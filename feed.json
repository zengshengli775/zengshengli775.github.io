{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sakura",
    "subtitle": "我以为18岁之后是19岁，19岁之后是18岁，20岁永远都不会到来 。",
    "icon": "https://zengshengli775.gitee.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://zengshengli775.gitee.io",
    "items": [
        {
            "id": "https://zengshengli775.gitee.io/2022/02/18/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E7%BD%91%E7%AB%99/",
            "url": "https://zengshengli775.gitee.io/2022/02/18/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E7%BD%91%E7%AB%99/",
            "title": "学习资料网站",
            "date_published": "2022-02-18T05:19:25.000Z",
            "content_html": "<h3 id=\"清华大学计算机系课程攻略\"><a class=\"anchor\" href=\"#清华大学计算机系课程攻略\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWtjYXJjLXRzYy11aHQucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2luZGV4Lmh0bWw=\">清华大学计算机系课程攻略</span></h3>\n<h3 id=\"浙江大学课程攻略共享计划\"><a class=\"anchor\" href=\"#浙江大学课程攻略共享计划\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9xc2N0ZWNoLmdpdGh1Yi5pby96anUtaWNpY2xlcy8=\">浙江大学课程攻略共享计划</span></h3>\n<h3 id=\"中国科学技术大学课程资源\"><a class=\"anchor\" href=\"#中国科学技术大学课程资源\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly91c3RjLXJlc291cmNlLmdpdGh1Yi5pby9VU1RDLUNvdXJzZS9pbmRleC5odG1s\">中国科学技术大学课程资源</span></h3>\n<h3 id=\"北大课程资料民间整理\"><a class=\"anchor\" href=\"#北大课程资料民间整理\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWItcGt1LmdpdGh1Yi5pby8=\">北大课程资料民间整理</span></h3>\n<h3 id=\"上海交通大学课程资料分享\"><a class=\"anchor\" href=\"#上海交通大学课程资料分享\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2MtaGovU0pUVS1Db3Vyc2Vz\">上海交通大学课程资料分享</span></h3>\n",
            "tags": [
                "学习工具",
                "学习资料"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2022/02/18/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0C%E5%92%8CC++%E7%A2%B0%E5%88%B0%E7%9A%84%E7%9A%84%E7%96%91%E9%9A%BE%E7%82%B9/",
            "url": "https://zengshengli775.gitee.io/2022/02/18/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0C%E5%92%8CC++%E7%A2%B0%E5%88%B0%E7%9A%84%E7%9A%84%E7%96%91%E9%9A%BE%E7%82%B9/",
            "title": "学习C和C++碰到的的疑难点",
            "date_published": "2022-02-17T16:00:00.000Z",
            "content_html": "<h3 id=\"c语言中的和符号\"><a class=\"anchor\" href=\"#c语言中的和符号\">#</a> C 语言中的 * 和 &amp; 符号</h3>\n<p>之前对 * 和 &amp; 符号一直理解的比较浅显。只知道：<br />\n*p 好像表示的是一个指针；<br />\n&amp;p 表示的是一个地址。<br />\n然而这次当遇到了下面这个情况的时候：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a；</pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>d\\n”<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>d\\n”<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>d\\n”<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>d\\n”<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre>结果：</pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre><span class=\"token number\">6487620</span></pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre><span class=\"token number\">6487620</span></pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><p>一脸懵逼，为什么 &amp; a 和 * b 的值不是一样？这才发现自己其实一点都没有搞懂。</p>\n<p>经过学习后，总结出来：<br />\n<strong>变量 a 本质上代表一个存储单元</strong>。CPU 通过该存储单元的地址访问该存储单元中的数据。所以<strong> a 本来代表两个值：存储单元的地址和储单元中的数据</strong>。于是就有了二异性。为了消除这种二义性，C 语言规定 a 表示存储单元中的数据，&amp;a 表示存储单元的地址。<br />\na 存储单元中的数据可以是一个普通数值，也可以是另一个存储单元的地址，比如：a = &amp;b; 语句就是将 b 的存储单元的地址存入 a 存储单元中。C 语言规定<em> a 代表 a 中存储的地址对应的存储单元中的数据，也就是访问</em> a 就等于访问 b，于是 * a 提供了通过 a 访问 b 中的数据的手段。</p>\n<p><strong>a 表示 a 对应的存储单元中的数据。</strong><br />\n<strong>&amp;a 表示 a 对应的存储单元的地址。</strong><br />\n<em><em>“</em>a” 表示：首先，要求 a 对应的存储单元中的数据一定是另一个存储单元的地址。</em>*<br />\n<em><em> 于是，“</em>a” 表示另一个存储单元中的数据。</em>*<br />\n<strong> 当 a 声明的类型是 int 时</strong>，a 中存储的是一个整数数值，通过 a 可以访问（读取或修改）这个数值。<br />\n<strong>当 a 声明的类型是 int * 时</strong>，a 中存储的是一个存储单元的地址，而该存储单元中存储的数据是一个整数数值；通过 * a 可以访问（读取或修改）这个数值。a == &amp;*a 都是该存储单元的地址。<br />\n<strong>当 a 声明的类型是 int * * 时</strong>，a 中存储的是一个存储单元的地址，而该存储单元中存储的数据是另外一个存储单元的地址，另外这个存储单元中存储的是一个整数数值；通过 * * a 可以访问（读取或修改）这个数值。<br />\n…</p>\n<p>最后，在 C 语言里地址叫指针。还有，在 C 语言中的数组本质上其实也是指针，即：* a 等同于 a []。</p>\n<p>转载于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNTgzNjgxL2FydGljbGUvZGV0YWlscy83ODU3MjAwOQ==\">C 语言中的 * 和 &amp; 符号</span></p>\n<h3 id=\"c-ifndef和ifdef宏定义的使用及作用介绍\"><a class=\"anchor\" href=\"#c-ifndef和ifdef宏定义的使用及作用介绍\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3Mjc4OTU3L2FydGljbGUvZGV0YWlscy83Nzk4ODI1Ng==\">C++ #ifndef 和 #ifdef 宏定义的使用及作用介绍</span></h3>\n<h3 id=\"ifndef-define-endif-作用\"><a class=\"anchor\" href=\"#ifndef-define-endif-作用\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hhbGxlbmdlci12aXAvcC8zMzg2ODE5Lmh0bWw=\">#ifndef, #define, #endif 作用</span></h3>\n<h3 id=\"void与void详解\"><a class=\"anchor\" href=\"#void与void详解\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jYWMzOTU3MWE0ZTg=\">void 与 void * 详解</span></h3>\n<h3 id=\"c-命名空间\"><a class=\"anchor\" href=\"#c-命名空间\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jcGx1c3BsdXMvY3BwLW5hbWVzcGFjZXMuaHRtbA==\">C++ 命名空间</span></h3>\n<h3 id=\"c-作用域符-双冒号\"><a class=\"anchor\" href=\"#c-作用域符-双冒号\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjY2OTg3L2FydGljbGUvZGV0YWlscy81MzY4OTEzMw==\">C++ “::” 作用域符 双冒号</span></h3>\n<h3 id=\"c-cin-详解之终极无惑\"><a class=\"anchor\" href=\"#c-cin-详解之终极无惑\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0szNDZLMzQ2L2FydGljbGUvZGV0YWlscy80ODIxMzgxMQ==\">C++ cin 详解之终极无惑</span></h3>\n<h3 id=\"eof是什么\"><a class=\"anchor\" href=\"#eof是什么\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTEvMTEvZW9mLmh0bWw=\">EOF 是什么？</span></h3>\n<h3 id=\"cc\"><a class=\"anchor\" href=\"#cc\">#</a> <a href=\"https://www.slyar.com/blog/c-zizeng.html\">[C/C<ins> 语言中 i</ins> 和 ++i 有什么区别？]</a></h3>\n<h3 id=\"c-点操作符和箭头-操作符\"><a class=\"anchor\" href=\"#c-点操作符和箭头-操作符\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDU3MTYzMDI3L2FydGljbGUvZGV0YWlscy81NDIzNzc4Mg==\">C++ 点 (.) 操作符和箭头 (-&gt;) 操作符</span></h3>\n<h3 id=\"cc-中-malloc-calloc-realloc-函数的用法\"><a class=\"anchor\" href=\"#cc-中-malloc-calloc-realloc-函数的用法\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kNmYyMDliODc5NmQ=\">C\\C++ 中 malloc、calloc、realloc 函数的用法</span></h3>\n<h3 id=\"c-中vector的使用方法\"><a class=\"anchor\" href=\"#c-中vector的使用方法\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R1YW4xOTkyMDEwMS9hcnRpY2xlL2RldGFpbHMvNTA2MTcxOTA=\">C++ 中 vector 的使用方法</span></h3>\n<h3 id=\"c语言字符减去0的含义\"><a class=\"anchor\" href=\"#c语言字符减去0的含义\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1FpbmhhaWZ1L2FydGljbGUvZGV0YWlscy84ODg2NTYzOQ==\">C 语言字符减去‘0’的含义</span></h3>\n<h3 id=\"c之using-namespace-std-详解与命名空间的使用\"><a class=\"anchor\" href=\"#c之using-namespace-std-详解与命名空间的使用\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlXzA3MTIvYXJ0aWNsZS9kZXRhaWxzLzcyODI0NjY4\">C++ 之 using namespace std 详解与命名空间的使用</span></h3>\n<h3 id=\"c中memset函数的用法\"><a class=\"anchor\" href=\"#c中memset函数的用法\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMTIyODExL2FydGljbGUvZGV0YWlscy81MjczODAyOQ==\">C++ 中 memset 函数的用法</span></h3>\n",
            "tags": [
                "编程基础",
                "C -C++"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2022/02/18/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/",
            "url": "https://zengshengli775.gitee.io/2022/02/18/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/",
            "title": "机器学习资料",
            "date_published": "2022-02-17T16:00:00.000Z",
            "content_html": "<h3 id=\"机器学习算法公式推导以及numpy实现\"><a class=\"anchor\" href=\"#机器学习算法公式推导以及numpy实现\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3podWxlaTIyNy9NTF9Ob3Rlcw==\">机器学习算法公式推导以及 numpy 实现</span></h3>\n<h3 id=\"bilibili-机器学习白板系列\"><a class=\"anchor\" href=\"#bilibili-机器学习白板系列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL2Jvb2tzL3NoYXJlL2Y0MDMxZjY1LTcwYzEtNDkwOS1iYTAxLWM0N2MzMTM5ODQ2Ng==\">Bilibili - 机器学习白板系列</span></h3>\n<h3 id=\"python3机器学习实战学习笔记\"><a class=\"anchor\" href=\"#python3机器学习实战学习笔记\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2M0MDY0OTU3NjIvY2F0ZWdvcnlfOTI2OTQ5Mi5odG1s\">Python3《机器学习实战》学习笔记</span></h3>\n<h3 id=\"人工智能-周志华教材版\"><a class=\"anchor\" href=\"#人工智能-周志华教材版\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzUxNzI5MzE0L2NoYW5uZWwvc2VyaWVz\">人工智能 - 周志华教材版</span></h3>\n<h3 id=\"周志华机器学习习题解答-pnyuans-blog\"><a class=\"anchor\" href=\"#周志华机器学习习题解答-pnyuans-blog\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbnl1YW4uZ2l0aHViLmlvL2Jsb2cvY2F0ZWdvcmllcy8lRTUlOTElQTglRTUlQkYlOTclRTUlOEQlOEUlRTMlODAlOEElRTYlOUMlQkElRTUlOTklQTglRTUlQUQlQTYlRTQlQjklQTAlRTMlODAlOEIlRTQlQjklQTAlRTklQTIlOTglRTglQTclQTMlRTclQUQlOTQv\">周志华《机器学习》习题解答 | PnYuan's Blog</span></h3>\n<h3 id=\"深度学习笔记整理\"><a class=\"anchor\" href=\"#深度学习笔记整理\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20veHVfa2FpX3h1eW91cWlhbi90c2RlbW8vYmxvYi9tYXN0ZXIvJUU3JUFDJTk0JUU4JUFFJUIwJUU2JTk1JUI0JUU3JTkwJTg2LmlweW5i\">深度学习笔记整理</span></h3>\n",
            "tags": [
                "机器学习",
                "机器学习"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/11/11/%E6%9C%9F%E6%9C%AB/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/",
            "url": "https://zengshengli775.gitee.io/2021/11/11/%E6%9C%9F%E6%9C%AB/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/",
            "title": "",
            "date_published": "2021-11-11T06:34:53.630Z",
            "content_html": "<hr />\n<p>title: 操作系统概念<br />\n date: 2021.11.11<br />\ncategories:</p>\n<ul>\n<li>期末<br />\n tags:</li>\n<li>操作系统<br />\n description: 目录第一章、导论 1.1 操作系统 1.1.1 用户视角 1.1.2 系统视角 1.1.3 定义操作系统 1.2 计算机系统组织 1.2.1 计算机系统操作 1.2.2 存储结构 1.2.3 I/O 结构 1.3 计算机系统体系结构 1.4 . 操作系统结构 1.5 操作系统操作 1.5.1 操作系统的双重模式操作 1.5.2 定时器第二章 操作系统结构 2.1 操...</li>\n</ul>\n<h1 id=\"操作系统概念-学习笔记\"><a class=\"anchor\" href=\"#操作系统概念-学习笔记\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcyL2FydGljbGUvZGV0YWlscy84ODgyODM2MQ==\">操作系统概念 学习笔记</span></h1>\n<h1 id=\"第一章-导论\"><a class=\"anchor\" href=\"#第一章-导论\">#</a> 第一章、导论</h1>\n<h2 id=\"11-操作系统\"><a class=\"anchor\" href=\"#11-操作系统\">#</a> 1.1 操作系统</h2>\n<p><strong>1. 计算机系统四个组成部分</strong></p>\n<p>计算机硬件、操作系统、系统程序和用户程序、用户。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111111544225.png\" alt=\"\" /><br />\n硬件为系统提供了基本的计算资源。应用程序规定了用户按何种方式使用这些资源，操作系统不过提供了一个方便其它程序做有用工作的环境。</p>\n<h3 id=\"111-用户视角\"><a class=\"anchor\" href=\"#111-用户视角\">#</a> 1.1.1 用户视角</h3>\n<h3 id=\"112-系统视角\"><a class=\"anchor\" href=\"#112-系统视角\">#</a> 1.1.2 系统视角</h3>\n<blockquote>\n<p>操作系统看作资源分配器。</p>\n</blockquote>\n<ul>\n<li>操作系统管理这些资源</li>\n<li>面对冲突的资源请求，操作系统必须决定如何为各个程序和用户分配资源，以便计算机系统能有效而公平的运行。</li>\n</ul>\n<p>操作系统是 <strong>控制程序</strong>，管理用户程序的执行防止计算机资源的错误使用或使用不当。</p>\n<h3 id=\"113-定义操作系统\"><a class=\"anchor\" href=\"#113-定义操作系统\">#</a> <strong>1.1.3 定义操作系统</strong></h3>\n<p>操作系统是一组控制和管理计算机硬件和软件资源、合理地对各类作业进行调度，以及方便用户的程序集合。<br />\n<strong>3. 操作系统的目标</strong></p>\n<p>执行用户程序，更容易地解决用户问题。</p>\n<p>使计算机系统使用方便。</p>\n<p>有效地使用计算机硬件。</p>\n<h1 id=\"12-计算机系统组织\"><a class=\"anchor\" href=\"#12-计算机系统组织\">#</a> 1.2 计算机系统组织</h1>\n<h2 id=\"121-计算机系统操作\"><a class=\"anchor\" href=\"#121-计算机系统操作\">#</a> 1.2.1 计算机系统操作</h2>\n<p>现代通用计算机系统由一个或多个 CPU 和若干 <strong>设备控制器</strong>通过共同的总线相连而成。</p>\n<p>打开电源或重启 —— 运行 <strong>初始化程序</strong>（引导程序）—— 定位操作系统并将其装入内存 —— 执行第一个进程</p>\n<p><strong>引导程序</strong>：通常位于 ROM 或者 EEPROM，称为计算机硬件中的固件。用来初始化系统的所有部分（CPU 寄存器，设备控制器和内存）。<br />\n<strong>中断</strong>：硬件可随时通过系统总线向 CPU 发出信号，出发中断。软件通过系统调用（或者其他特别操作）触发中断。<br />\n发生中断 —— 调用一个通用子程序检查中断信息 —— 使用中断处理指针表（ <strong>中断向量</strong>）—— 间接调用中断处理子程序</p>\n<p>现在的操作系统都是以 <strong>中断</strong>为驱动的。</p>\n<h3 id=\"122-存储结构\"><a class=\"anchor\" href=\"#122-存储结构\">#</a> 1.2.2 存储结构</h3>\n<p>内存是处理器可以直接访问的唯一的大容量存储区域</p>\n<p><strong>辅存</strong>：一般是磁盘。（因为内存太小，而且是易失性存储设备。）</p>\n<p>各种存储系统的差别主要是速度、价格、大小和易失性。</p>\n<p><strong>易失性</strong>：断电时，会丢失内容</p>\n<p>价格逐渐降低，大小逐渐增大，速度逐渐减慢，主存以上易失，</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111111544532.png\" alt=\"\" /></p>\n<h3 id=\"123-io结构\"><a class=\"anchor\" href=\"#123-io结构\">#</a> 1.2.3 I/O 结构</h3>\n<p>通用计算机系统由一个 CPU 和多个设备控制器组成。通过共同的总线连接起来，每个设备控制器负责特定类型的设备，可有多个设备与其相连。</p>\n<p>SCSI (small computer system interface) 控制器可以有 7 个或更多的设备相连。</p>\n<p>设备控制器</p>\n<ul>\n<li>维护一定量的本地缓冲存储和一组特定用途的寄存器</li>\n<li>复制在其控制的外部设备与本地缓冲存储之间进行数据传递</li>\n<li>通常每个设备控制器都有一个设备驱动程序</li>\n</ul>\n<p>I/O 中断驱动 (适合少量的数据)</p>\n<ul>\n<li>设备驱动程序在设备控制器中装载适当的寄存器</li>\n<li>设备控制器检查寄存器状态决定操作</li>\n<li>控制器开始向本地缓冲区传输数据</li>\n<li>设备控制器通过中断通知设备驱动程序已完成操作</li>\n<li>设备驱动程序返回对系统的控制。</li>\n</ul>\n<p>DMA (direct memory access) 直接内存访问</p>\n<p>设备直接写入内存而不需要 CPU 的干预，每一块只产生一个中断。</p>\n<p>交换使得各个部件并发对话而不是在总线上争夺事件，更加地高效</p>\n<h2 id=\"13-计算机系统体系结构\"><a class=\"anchor\" href=\"#13-计算机系统体系结构\">#</a> 1.3 计算机系统体系结构</h2>\n<p>单处理器系统、多处理器系统、集群系统</p>\n<p><strong>单处理器系统</strong></p>\n<ul>\n<li>只有一个通用 CPU</li>\n<li>还包含其他特定目的微处理器， 用来克服主 CPU 超载问题</li>\n</ul>\n<p><strong>多处理器系统（并行系统、紧耦合系统）</strong></p>\n<p>定义：多处理器系统有多个紧密通信的 CPU，它们共享计算机总线，有时还有时钟、内存和外设等。</p>\n<p><strong>优点：</strong></p>\n<p>增加吞吐量、规模经济、增加可靠性。</p>\n<p><strong>分类：</strong></p>\n<p>非对称多处理：每个处理器都有各自特定的任务。一个主处理器控制系统，其他处理器或者向主处理器要任务或做预先定义的任务。</p>\n<p>对称多处理：每个处理器都要完成操作系统中的所有任务。所有处理器对等，处理器之间没有主 - 从关系。<br />\n<strong>集群系统</strong></p>\n<p>由两个或多个独立的系统耦合起来的，通过局域网连接或更快的内部连接 (InfiniBand)</p>\n<p>用途： 提供高可用性 (high availability) 服务</p>\n<p>分类：对称与非对称</p>\n<p>非对称集群 (asymmetric clustering) 中， 一台机器处于热备份状态 (hot standby mode)，另一台运行程序。</p>\n<p>对称集群 (symmetric clustering)，两个或多个主机都运行程序并互相监视。</p>\n<p>还有并行集群和 WAN 集群。</p>\n<p>并行集群中通常需要分布式锁管理器 (distributed lock manager， DLM)</p>\n<h2 id=\"14-操作系统结构\"><a class=\"anchor\" href=\"#14-操作系统结构\">#</a> 1.4 操作系统结构</h2>\n<p>分时操作系统、多道程序设计</p>\n<p>进程 (process): 装到内存并执行的程序</p>\n<p>作业调度 (job scheduling)： 在储存在磁盘作业池 (job pool) 中与主存中的作业做出决策和安排</p>\n<p>CPU 调度 (CPU scheduling)： 多个任务同时执行</p>\n<p>在分时操作系统中，为了保证合理的相应时间，就需要通过交换来得到。通常使用虚拟内存 (virtual memory) 实现。</p>\n<h2 id=\"15-操作系统操作\"><a class=\"anchor\" href=\"#15-操作系统操作\">#</a> 1.5 操作系统操作</h2>\n<h3 id=\"151-操作系统的双重模式操作\"><a class=\"anchor\" href=\"#151-操作系统的双重模式操作\">#</a> 1.5.1 操作系统的双重模式操作</h3>\n<p>为了区分操作系统代码和用户定义代码的执行，至少需要两种独立的操作模式 <strong>：用户模式、监督程序模式</strong>（管理模式、系统模式、特权模式）。</p>\n<p>将能引起损害的机器指令作为 <strong>特权指令</strong>。用户模式下想要执行特权指令，硬件不会执行，会认为是非法指令，并以陷阱的形式通知操作系统。<br />\n系统引导时，硬件开始处于 ** 内核模式。** 接着，装入操作系统，开始进入用户模式。出现陷阱或中断，会进入内核模式。</p>\n<p>转换到用户模式就是一个特权指令。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111111611598.png\" alt=\"\" /></p>\n<h3 id=\"152-定时器\"><a class=\"anchor\" href=\"#152-定时器\">#</a> 1.5.2 定时器</h3>\n<p>防止用户进入死循环或不调用系统服务。定时器在给定时间后中断计算机。操作系统将控制权交给用户之前，设置 ** 定时器。** 修改定时器的操作就是特权指令。</p>\n<h1 id=\"第二章-操作系统结构\"><a class=\"anchor\" href=\"#第二章-操作系统结构\">#</a> 第二章 操作系统结构</h1>\n<h2 id=\"21-操作系统服务\"><a class=\"anchor\" href=\"#21-操作系统服务\">#</a> 2.1 操作系统服务</h2>\n<p>用户界面（一种是命令行界面；另一种是批界面，最为常用的是图形用户面）、程序执行、I/O 操作、文件系统操作、通信、错误检测、资源分配、统计、保护和安全。</p>\n<h2 id=\"22-操作系统的用户界面\"><a class=\"anchor\" href=\"#22-操作系统的用户界面\">#</a> <strong>2.2 操作系统的用户界面</strong></h2>\n<p>命令解释程序（CLI）被成为外壳（shell）、图形用户界面（GUI）<br />\n<strong>命令解释程序主要作用</strong></p>\n<p>获取并执行用户指定的下一条指令。</p>\n<h2 id=\"23-系统调用system-call\"><a class=\"anchor\" href=\"#23-系统调用system-call\">#</a> 2.3 系统调用（System Call）</h2>\n<p><strong>系统调用</strong>提供了操作系统提供的有效服务界面。</p>\n<p>操作系统内核提供一系列预定功能，通过一组称为系统调用的接口呈现给编程人员，系统调用把应用程序的请求传给内核，系统调用相应的内核函数完成所需的处理，将处理结果返回给应用程序。<br />\n<strong>向操作系统传递参数的三种方法</strong></p>\n<ul>\n<li>通过寄存器来传递参数。</li>\n<li>若参数数量比寄存器多，参数通常存在内存的块和表中，并将块的地址通过寄存器来传递。</li>\n<li>参数也可以通过程序放在或压入堆栈中，并通过操作系统弹出。</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2019032813034779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<h2 id=\"24-系统调用类型\"><a class=\"anchor\" href=\"#24-系统调用类型\">#</a> 2.4 系统调用类型</h2>\n<p>进程控制、文件管理、设备管理、信息维护和通信</p>\n<h2 id=\"25-系统程序分类\"><a class=\"anchor\" href=\"#25-系统程序分类\">#</a> 2.5 系统程序分类</h2>\n<p>文件管理、状态信息、文件修改、程序语言支持、程序装入和执行、通信。</p>\n<h2 id=\"26-操作系统设计和实现\"><a class=\"anchor\" href=\"#26-操作系统设计和实现\">#</a> 2.6 操作系统设计和实现</h2>\n<h4 id=\"设计目标\"><a class=\"anchor\" href=\"#设计目标\">#</a> 设计目标</h4>\n<p>定义系统的目标和规格</p>\n<p>系统类型：批处理、 分时、 单用户、 多用户、 分布式、 实时、 通用目标</p>\n<p>两个基本类： 用户目标和系统目标</p>\n<h4 id=\"机制mechanism和策略policy\"><a class=\"anchor\" href=\"#机制mechanism和策略policy\">#</a> 机制（mechanism）和策略（policy）</h4>\n<p>区分机制和策略对于灵活性很重要</p>\n<ul>\n<li>机制决定如何做</li>\n<li>策略决定做什么，策略可能随时间或位置而有所改变。</li>\n</ul>\n<h4 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h4>\n<p>现代操作系统一般都是用高级语言编写， 如 C 或 C++</p>\n<p>代码编写更快， 更为紧凑，容易理解和调试。</p>\n<p>缺点仅仅为降低了速度和增加了存储要求</p>\n<h2 id=\"27-操作系统结构\"><a class=\"anchor\" href=\"#27-操作系统结构\">#</a> 2.7 操作系统结构</h2>\n<p>简单结构、分层方法、微内核、模块、虚拟机.</p>\n<h3 id=\"271-简单结构\"><a class=\"anchor\" href=\"#271-简单结构\">#</a> 2.7.1 简单结构</h3>\n<p>MS-DOS、原始的 UNIX 操作系统</p>\n<h3 id=\"272-分层方法\"><a class=\"anchor\" href=\"#272-分层方法\">#</a> <strong>2.7.2 分层方法</strong></h3>\n<p><strong>定义</strong>：操作系统分成若干层（级）。最底层（层 0）为硬件，最高层（层 N）为用户接口。每层只考虑较低层的功能和服务。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>每层都是利用较低层所提供的功能实现的，并为叫高层隐藏了一定的数据结构、操作和硬件的存在</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>分层法的主要困难涉及对层的详细定义</li>\n<li>与其它方法相比效率较差</li>\n</ul>\n<h3 id=\"273-微内核\"><a class=\"anchor\" href=\"#273-微内核\">#</a> 2.7.3 微内核</h3>\n<p>微内核方法将所有非基本部分从内核中移走，并将它们实现为系统或用户程序，这样得到了更小的内核。</p>\n<p>微内核的主要功能是使客户程序和运行在用户空间的各种服务之间进行通信。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>便于扩充操作系统</li>\n<li>很容易从一种硬件平台设计移植到另一种硬件平台设计</li>\n<li>更安全、可靠</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<p>由于系统功能总开销的增加而导致系统性能的下降。</p>\n<h3 id=\"274-模块\"><a class=\"anchor\" href=\"#274-模块\">#</a> 2.7.4 模块</h3>\n<p>大多数现代操作系统实现内核模块：</p>\n<ul>\n<li>使用面向对象 (object-oriented) 方法</li>\n<li>每个核心组件分离</li>\n<li>模块通过接口 (interfaces) 互相调用</li>\n<li>每个模块都作为内核中的可加载模块</li>\n</ul>\n<p>总之，类似于层，但更灵活。</p>\n<h2 id=\"28-虚拟机\"><a class=\"anchor\" href=\"#28-虚拟机\">#</a> 2.8 虚拟机</h2>\n<p>虚拟机（VirtualMachine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p>\n<h1 id=\"第三章-进程\"><a class=\"anchor\" href=\"#第三章-进程\">#</a> 第三章 进程</h1>\n<h2 id=\"31-进程概念\"><a class=\"anchor\" href=\"#31-进程概念\">#</a> 3.1 进程概念</h2>\n<h3 id=\"311-进程\"><a class=\"anchor\" href=\"#311-进程\">#</a> 3.1.1 进程</h3>\n<p>进程包含了程序代码和当前活动（其中当前活动通过程序计数器和处理器寄存器的内容表示）两个部分，进程是执行中的程序。具体有：</p>\n<ul>\n<li>文本段（代码段）</li>\n<li>数据段（全局变量）</li>\n<li>栈（stack）（包含临时数据、函数参数、返回地址、局部变量）</li>\n<li>堆（heap）（进程运行期间动态分配的内存）</li>\n<li>程序计数器</li>\n</ul>\n<p><strong>注意</strong>： 程序是被动实体，进程是活动实体（其中当前活动通过程序计数器和处理器寄存器的内容表示）</p>\n<p>两个进程可以与同一程序联系，虽然文本段相同。但是数据段、堆栈段不同</p>\n<h3 id=\"312-进程状态\"><a class=\"anchor\" href=\"#312-进程状态\">#</a> 3.1.2 进程状态</h3>\n<p>进程有 5 种状态，包括：</p>\n<ul>\n<li>New（新的）</li>\n<li>Running（运行）</li>\n<li>Waiting（等待）</li>\n<li>Ready（就绪）</li>\n<li>Terminated（终止）</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111112124875.png\" alt=\"\" /></p>\n<p>注意：一次只有一个进程能在一个处理器上运行（Running 态），但在处理器上运行的时候，其他进程可以进行 IO 操作（想一下 DMC 模式）</p>\n<h3 id=\"313-进程控制块pcb\"><a class=\"anchor\" href=\"#313-进程控制块pcb\">#</a> 3.1.3 进程控制块（PCB）</h3>\n<p>Process control block， PCB， 也称任务控制块（信息的仓库）</p>\n<p>包括：</p>\n<ul>\n<li>进程状态</li>\n<li>程序计数器</li>\n<li>CPU 寄存器</li>\n<li>CPU 调度信息\n<ul>\n<li>优先级</li>\n<li>调度队列的指针</li>\n<li>其他调度参数</li>\n</ul>\n</li>\n<li>内存管理信息\n<ul>\n<li>基址</li>\n<li>界限寄存器的值</li>\n<li>页表</li>\n<li>段表</li>\n</ul>\n</li>\n<li>记账信息\n<ul>\n<li>CPU 时间</li>\n<li>实际使用时间</li>\n<li>时间界限</li>\n<li>记账数据</li>\n<li>作业或进程数量</li>\n</ul>\n</li>\n<li>I/O 状态信息\n<ul>\n<li>I/O 设备列表</li>\n<li>打开的文件列表</li>\n</ul>\n</li>\n</ul>\n<p>CPU 通过保存 PCB 来进行进程间的切换</p>\n<h2 id=\"32-进程调度\"><a class=\"anchor\" href=\"#32-进程调度\">#</a> 3.2、进程调度</h2>\n<p>目的：使 CPU 的利用率最大化，需要优化进程调度的方法</p>\n<p>进程调度程序选择一个进程到 CPU 上执行（一个 CPU 一个时间段只能执行一个程序，其余程序需要等待 CPU 空闲重新调度）</p>\n<h3 id=\"321-调度队列\"><a class=\"anchor\" href=\"#321-调度队列\">#</a> 3.2.1 调度队列</h3>\n<p><strong>作业（Job）队列</strong>：包含了系统中所有的进程<br />\n<strong>就绪（Ready）队列</strong>：包含了系统中，驻留在 <strong>内存</strong>中就绪的，准备运行的进程<br />\n该队列通常用链表实现，头结点指向第一个和最后一个 PCB 块的指针，每个 PCB 块包括指向下一个 PCB 的指针域<br />\n<strong>设备（Device）队列</strong>：包含了等待特定 IO 设备的进程列表<br />\n进程可能会有 IO 请求，请求时可能 IO 设备在处理其他请求，所以该进程需要等待。</p>\n<p>讨论进程调度的常用方法是队列图<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20190326195440363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /><br />\n其中包括了就绪队列和设备队列（可能有多个设备队列）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190326195552195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<h3 id=\"322-调度程序\"><a class=\"anchor\" href=\"#322-调度程序\">#</a> 3.2.2 调度程序</h3>\n<p>通常对于批处理系统，进程更多的是被提交、放到大容量存储设备的缓冲池中，保存在那里以便之后执行，在这之后，需要通过调度程序来选择缓冲池中的进程装入内存，并执行</p>\n<p>进程选择由相应的调度程序执行，有两类调度程序：</p>\n<p><strong>长期调度程序（long-term schedule） / 作业调度程序（job schedule）</strong>：负责从缓冲池中选择进程，装入内存以便执行<br />\n<strong>短期调度程序（short-term schedule） / CPU 调度程序（CPU schedule）</strong>：从执行的进程中选择进程，并为之分配 CPU</p>\n<p>有的系统，如分时系统，加入了中期调度程序（medium-term schedule），其核心思想是能将进程从内存（或 CPU 竞争中）移出，从而降低多道程序设计的难度，之后，进程可被重新调入内存，并从中断处执行。通过中期调度程序，进程可换出，并在之后换入，这种方案称为交换<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20190326195710199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p><strong>各类进程调度的特点：</strong></p>\n<p>长期调度程序执行的不频繁（进程创建期间可能间隔数分钟）<br />\n短期调度程序执行的非常频繁（毫秒级），因此需要程序执行的速度非常快<br />\n长期调度程序控制多道程序（multiprogramming）设计的程度，在稳定情况下，创建进程的速度应该等于进程离开系统的平均速度</p>\n<p><strong>进程的类型</strong></p>\n<p>IO 为主（就是操作主要是 IO 传输）</p>\n<p>CPU 为主（就是操作主要是各种运算）</p>\n<h3 id=\"323-上下文切换\"><a class=\"anchor\" href=\"#323-上下文切换\">#</a> 3.2.3 上下文切换</h3>\n<p>中断使 CPU 从当前任务改变为运行内核子程序。当发生一次中断的时候，系统需要保存当前 <strong>程序的上下文</strong>，在恢复程序时需要恢复程序的上下文。</p>\n<p>将 CPU 切换到另一个进程需要保存当前程序的状态并恢复另一个程序的状态，这个任务叫做 <strong>上下文切换</strong></p>\n<p><strong>进程的上下文也就是进程的 PCB</strong>，上文提到过它的组成</p>\n<p><strong>上下文切换的类型：</strong></p>\n<p><strong>状态保存</strong>（state save）：保存当前 CPU 的状态（不论是内核模式还是用户模式）<br />\n<strong>状态恢复</strong>（state restore）：重新开始之前保存的状态</p>\n<p>上下文切换是额外开销，切换时系统不能做其他任何有用的工作。其消耗的时间为几毫秒，具体的时间消耗和硬件支持密切相关</p>\n<p>有的操作系统提供了多组寄存器集合，上下文切换只需要简单改变当前寄存器组的指针。</p>\n<h2 id=\"33-进程操作\"><a class=\"anchor\" href=\"#33-进程操作\">#</a> 3.3 进程操作</h2>\n<p>绝大多数系统内的进程能够并发执行，并动态的创建和删除，因此操作系统应该提供一种机制来 <strong>创建 / 终止</strong>进程（即进程操作）</p>\n<h3 id=\"331-进程创建\"><a class=\"anchor\" href=\"#331-进程创建\">#</a> 3.3.1 进程创建</h3>\n<p>进程树：进程在执行过程中，能够继续创建进程（系统调用），创建进程的进程为 <strong>父进程</strong>，被创建的进程是 <strong>子进程</strong>，以此类推，形成了进程树</p>\n<p>一般系统都有一个 <strong>根进程</strong>，负责创建其他所有的进程，这样一个系统的进程树只有一棵</p>\n<p>进程是需要一定的资源的（CPU 时间，内存，文件，IO 设备），在一个进程创建子进程的时候， <strong>在父进程和子进程之间需要分配 / 共享资源，有以下几种情况：</strong></p>\n<ul>\n<li>从操作系统哪里获取资源</li>\n<li>从父进程中获取资源（限制子进程只能从父进程中获取资源能防止创建过多的进程导致系统超载）</li>\n</ul>\n<p><strong>在进程创建时，该进程会得到：</strong></p>\n<ul>\n<li>各种物理和逻辑资源</li>\n<li>父进程传递来的初始化数据或输入</li>\n<li>通常子进程会返回给父进程自身的标识符（系统中唯一标识进程身份的 id）</li>\n</ul>\n<p><strong>在进程执行时，有以下几种情况：</strong></p>\n<ul>\n<li>父进程和子进程并发执行</li>\n<li>父进程等待，直到子进程执行完毕</li>\n</ul>\n<p><strong>创建的新进程的地址空间有两种可能</strong>：</p>\n<ul>\n<li>子进程是父进程的复制品（有相同的程序和数据）</li>\n<li>子进程内装入另一个新程序</li>\n</ul>\n<p><strong>关于 fork () 和 exec ()：</strong></p>\n<ul>\n<li>fork 命令创建一个新的进程</li>\n<li>exec 命令在 fork 命令后执行，用于将新的程序装入进程的内存空间</li>\n</ul>\n<h5 id=\"unix-中\"><a class=\"anchor\" href=\"#unix-中\">#</a> UNIX 中</h5>\n<p>通过 <code>fork()</code>  创建新进程。新进程通过复制原来进程的地址空间而成。</p>\n<p>对于新进程，系统调用 <code>fork()</code>  返回值为 0，对于父进程，返回值为子进程的进程标识符。</p>\n<p>在 <code>fork()</code>  之后，一个进程使用 <code>exec()</code> ，可以用新程序来取代进程的内存空间。</p>\n<p>这样两个进程就可以互相通信并可以通过各自的方式执行。</p>\n<p>如果子进程运行时没有什么可以做，那么就可以采用 <code>wait()</code>  把自己移出就绪队列来<strong>等待子进程</strong>的终止。</p>\n<p>Copy</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fork Failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">execlp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Child Complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>PS:  <code>Copy on write</code> : 需要写的时候才发生内存复制。</p>\n<h5 id=\"windows-中\"><a class=\"anchor\" href=\"#windows-中\">#</a> Windows 中</h5>\n<p>使用 <code>Win32 API</code>  中的 <code>CreateProcess()</code>  函数， 执行时，函数将一个特殊程序装入子进程的地址空间。需要至少 10 个参数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">CreateProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>` 需要两个参数`STARTUPINFO` 和 `PROCESS_INFORMATION</pre></td></tr></table></figure><p><code>STARTUPINFO</code>  指明新进程的许多特性，如窗口大小、标准输入及输出文件句柄</p>\n<p><code>PROCESS_INFORMATION</code>  包括一个句柄以及新生成进程和线程的标识</p>\n<p>调用前，需要使用 <code>ZeroMenory()</code>  为这两个结构清空内存</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Win32 API`相对于`Linux` 的`<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>`是`<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"332-进程终止\"><a class=\"anchor\" href=\"#332-进程终止\">#</a> 3.3.2 进程终止</h3>\n<p><strong>进程终止的时间：</strong></p>\n<ul>\n<li>执行完最后语句，并使用系统调用 exit () 请求操作系统删除自身。</li>\n<li>一个进程通过适当的系统调用终止另一个进程（通常这个进程需要是被终止进程的父进程，并且这需要知道被终止进程的标识符）</li>\n</ul>\n<p><strong>父进程终止子进程的原因一般有：</strong></p>\n<ul>\n<li>\n<ul>\n<li>子进程使用的资源超过了父进程分配的资源</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>分配给子进程的任务不再需要</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>父进程退出，在这种情况下，操作系统不允许子进程继续。有些系统如果一个进程终止，那么它所有的子进程都终止。这叫做 ** 级联终止。** 通常有操作系统进行</li>\n</ul>\n</li>\n</ul>\n<p><strong>进程终止后：</strong></p>\n<p>进程会返回状 <strong>态值（通常为整数）到父进程 &lt;br&gt; 所有进程资源会被操作系统释放</strong></p>\n<p>如果父进程终止，那么其所有子进程会以 init 进程作为父进程。因此，子进程仍然有一个父进程来收集状态和执行统计</p>\n<h2 id=\"34-进程间通信\"><a class=\"anchor\" href=\"#34-进程间通信\">#</a> 3.4 进程间通信</h2>\n<p>并发执行的进程有两类，一类是 <strong>独立进程</strong>，不能影响其他进程并且不被其他进程影响。<br />\n另一类是 <strong>协作进程</strong>，能影响其他进程或被其他进程影响</p>\n<p><strong>允许进程协作的优点：</strong></p>\n<ul>\n<li>信息共享</li>\n<li>提高运算速度</li>\n<li>模块化</li>\n<li>方便</li>\n</ul>\n<p>因此协作进程需要一种进程间通信机制（IPC）来允许进程相互交换数据与信息。有 <strong>共享内存和信息传递</strong>两种类型</p>\n<h3 id=\"341共享内存系统\"><a class=\"anchor\" href=\"#341共享内存系统\">#</a> <img data-src=\"https://img-blog.csdnimg.cn/20190326201024565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" />3.4.1 共享内存系统</h3>\n<p>生产者进程产生信息以供消费者进程消费，共享内存时解决<strong>生产者 - 消费者</strong>问题方法中的一种。</p>\n<p>有两种缓冲方式：</p>\n<ul>\n<li>无限缓冲（unbounded-buffer）：消费者可能不得不等待新的项， 生产者总是可以产生新项。</li>\n<li>有限缓冲（bounded-buffer）：缓冲大小固定，如果缓冲为空，消费者等待，如果缓冲为满，生产者等待。</li>\n</ul>\n<p>生产者进程：</p>\n<p>Copy</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>item nextProduced</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> BUFFER_SIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当缓冲满了的时候必须等待</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tbuffer<span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextProduced<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tin <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>in <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> BUFFER_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者进程:</p>\n<p>Copy</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>item nextConsumed</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>in <span class=\"token operator\">==</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当缓冲为空的时候必须等待</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tnextConsumed <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tout <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>out <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> BUFFER_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"342消息传递系统\"><a class=\"anchor\" href=\"#342消息传递系统\">#</a> 3.4.2 消息传递系统</h3>\n<p>常用于分布式环境中，如 Web</p>\n<p>消息传递提供一种机制允许进程不必通过共享地址空间来实现通讯与同步</p>\n<p>通信需要有通信线路（communication link）</p>\n<p>通讯线路的实现：</p>\n<ul>\n<li>物理：共享内存、硬件总线</li>\n<li>逻辑：逻辑属性 properties</li>\n</ul>\n<p>逻辑实现线路和发送接收操作的方法：</p>\n<ul>\n<li>直接或间接通信</li>\n<li>同步或异步通信</li>\n<li>自动或显式缓冲</li>\n</ul>\n<h5 id=\"命名\"><a class=\"anchor\" href=\"#命名\">#</a> 命名</h5>\n<p>对于直接通信：</p>\n<p>对称寻址：</p>\n<ul>\n<li><code>send(P, message)</code>  : 发送信息到进程 P</li>\n<li><code>receive(Q, message)</code>  : 接受来自进程 Q 的信息</li>\n</ul>\n<p>属性：</p>\n<ul>\n<li>每对需要通信的进程之间自动建立线路，进程仅需知道相互通信的标识符</li>\n<li>一个线路只与两个进程相关</li>\n<li>每对进程之间只有一个线路</li>\n</ul>\n<p>非对称寻址：</p>\n<ul>\n<li><code>send(P, message)</code>  : 发送信息到进程 P</li>\n<li><code>receive(id, message)</code> : 接受来自任何进程的信息，id 设置成与其通信的进程名称</li>\n</ul>\n<p>这两种寻址方式的缺点在于限制了进程定义的模式化，改变进程名字需要检查其他所有进程的定义。</p>\n<p>对于间接通信：</p>\n<p>通过邮箱和端口来发送或接受信息。</p>\n<p>一个进程可能通过许多不同的邮箱与其他进程通信，但两个进程仅在其共享至少一个邮箱时可以相互通信。</p>\n<ul>\n<li><code>send(A, message)</code>  ： 发送一个消息到邮箱 A</li>\n<li><code>receive(A, message)</code>  : 接受来自邮箱 A 的消息</li>\n</ul>\n<p>对于这种方案，通信线路有如下属性：</p>\n<ul>\n<li>只有在两个进程共享一个邮箱，才能建立通信线路</li>\n<li>一个线路可以与两个或更多的进程相关联</li>\n<li>两个通信进程之间可有多个不同的线路，每个线路对于一个邮箱</li>\n<li>连接可能是单向 <code>unidirectional</code>  或者双向 <code>bi-directional</code></li>\n</ul>\n<p>操作系统需提供的机制：</p>\n<ul>\n<li>创建新邮箱</li>\n<li>通过邮箱发送和接受消息</li>\n<li>删除邮箱</li>\n</ul>\n<p>邮箱的拥有权和接受权可以通过系统调用传递给其他进程。</p>\n<h5 id=\"同步\"><a class=\"anchor\" href=\"#同步\">#</a> 同步</h5>\n<p>消息传递可以是阻塞或非阻塞（同步或异步）</p>\n<ul>\n<li>阻塞发送 send： 发送进程阻塞， 直到消息被接受进程或邮箱所接受</li>\n<li>非阻塞发送 send： 发送进程发送消息并再继续操作</li>\n<li>阻塞接收 receive： 接收者阻塞， 直到有消息可用</li>\n<li>非阻塞接收 receive： 接收者收到一个有效信息或空信息</li>\n</ul>\n<p>当 <code>send()</code>  和  <code>receive()</code>  都阻塞， 发送者和接收者之间就有一个 <code>集合点（rendezvous）</code></p>\n<h5 id=\"缓冲\"><a class=\"anchor\" href=\"#缓冲\">#</a> 缓冲</h5>\n<ul>\n<li>无缓冲\n<ul>\n<li>零容量：阻塞</li>\n</ul>\n</li>\n<li>自动缓冲\n<ul>\n<li>有限容量： 线路满后阻塞</li>\n<li>无限容量： 不阻塞</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"客户机-服务器系统通信\"><a class=\"anchor\" href=\"#客户机-服务器系统通信\">#</a> 客户机 - 服务器系统通信</h3>\n<p>除了共享内存和消息传递，还有三种通信方法： Socket、远程过程调用（RPC）和 Java 的远程方法调用（RMI）</p>\n<h4 id=\"socket\"><a class=\"anchor\" href=\"#socket\">#</a> Socket</h4>\n<p>Socket（套接字）可定义为通信的端点。一对通过网络通信的进程需要使用一对 Socket（即每个进程各有一个）。</p>\n<p>Socket 由 IP 地址和一个端口号连接组成</p>\n<p>服务器通过 <strong>监听制定端口</strong> 来等待进来的客户请求， 一旦受到请求， 就接受来自客户 Socket 的连接， 从而完成连接。</p>\n<p>Java 提供了三种不同类型的 Socket</p>\n<ul>\n<li>面向连接（TCP）Socket： Socket 类</li>\n<li>无连接（UDP）Socket： DatagramSocket 类</li>\n<li>多点传送 Socket： DatagramSocket 的子类（允许数据发送到多个接收者）</li>\n</ul>\n<p>使用 Socket 通信，虽然常用和高效， 但是属于较为低级的分布式进程通信。原因之一在于 Socket 只允许在通信进程之间交换 ** 无结构的字节流 **</p>\n<h4 id=\"远程过程调用\"><a class=\"anchor\" href=\"#远程过程调用\">#</a> 远程过程调用</h4>\n<p>Remote Procedure Calls, RPC</p>\n<p>RPC 抽象层远程调用机制，用于通过网络连接系统</p>\n<p>存根 Stubs： 用于服务器上的实际程序的客户端代理</p>\n<p>客户端使用存根定位服务器，并提供参数</p>\n<p>服务器接收信息，解析后运行指定的程序</p>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h1 id=\"第四章-线程\"><a class=\"anchor\" href=\"#第四章-线程\">#</a> 第四章 线程</h1>\n<h2 id=\"41-概述\"><a class=\"anchor\" href=\"#41-概述\">#</a> 4.1 概述</h2>\n<p>线程是 CPU 使用的基本单元，由 <strong>线程 ID</strong>， <strong>程序计数器</strong>， <strong>寄存器集</strong>合和 <strong>栈</strong>组成。它与属于同一进程的其他线程 <strong>共享代码段，数据段和其他操作系统资源。</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111112325970.png\" alt=\"\" /></p>\n<h3 id=\"411-多线程编程的优点\"><a class=\"anchor\" href=\"#411-多线程编程的优点\">#</a> 4.1.1 多线程编程的优点</h3>\n<ol>\n<li>响应度高：一个多线程的程序即使部分阻塞，其他部分仍能运行，从而增加了对用户的响应程度。</li>\n<li>资源共享</li>\n<li>经济：创建和切换线程比创建进程更节省资源和时间</li>\n<li>多处理器体系结构的利用：多线程能充分利用多处理器体系</li>\n</ol>\n<h2 id=\"42-多线程模型\"><a class=\"anchor\" href=\"#42-多线程模型\">#</a> 4.2 多线程模型</h2>\n<p>提供多线程支持有两种方式： <strong>用户线程</strong>和 <strong>内核线程</strong></p>\n<ul>\n<li>用户线程受内核支持，无须内核管理</li>\n<li>内核线程由操作系统支持和管理</li>\n</ul>\n<p>在用户线程和内核线程之间存在一定的关系，即 <strong>多线程模型</strong>，以下讨论三种常用的关系：多对一，一对一，多对多</p>\n<h3 id=\"421-多对一模型\"><a class=\"anchor\" href=\"#421-多对一模型\">#</a> 4.2.1 多对一模型</h3>\n<p>多个用户线程映射到一个内核线程</p>\n<ul>\n<li>优点：线程管理由线程库在用户空间完成，效率比较高</li>\n<li>缺点：如果一个线程阻塞，整个进程就会阻塞；且多个线程无法并行运行在多处理器上</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdn.net/20180410093948774?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NhaWxpc3Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\" /></p>\n<h3 id=\"422-一对一模型\"><a class=\"anchor\" href=\"#422-一对一模型\">#</a> 4.2.2 一对一模型</h3>\n<p>每个用户线程映射到一个内核线程上</p>\n<ul>\n<li>优点：比多对一模型更好的并发功能；一个线程阻塞时，其他线程能够继续调用；多个线程能够并发运行在多处理器</li>\n<li>缺点：创建内核线程的开销会影响应用程序的功能</li>\n</ul>\n<h1 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> <img data-src=\"https://img-blog.csdnimg.cn/20190326205452929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /></h1>\n<h3 id=\"423-多对多模型\"><a class=\"anchor\" href=\"#423-多对多模型\">#</a> 4.2.3 多对多模型</h3>\n<ul>\n<li>多对一模型可以创建任意多的用户线程，但是只能没有增加并发性</li>\n<li>一对一模型增强了并发性，但开发者要小心不能在应用程序中创建太多的进程</li>\n</ul>\n<p>多对多模型没有上述的所有缺点，它多路复用了许多用户线程到同样数量或更小数量的内核线程上</p>\n<h1 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> <img data-src=\"https://img-blog.csdnimg.cn/20190326205512427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /></h1>\n<h1 id=\"-4\"><a class=\"anchor\" href=\"#-4\">#</a> <img data-src=\"https://img-blog.csdnimg.cn/20190326205609531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /></h1>\n<h2 id=\"43-线程库\"><a class=\"anchor\" href=\"#43-线程库\">#</a> 4.3 线程库</h2>\n<blockquote>\n<p>在用户空间中提供一个没有内核支持的库<br />\n执行一个由操作系统直接支持的内核级的库</p>\n</blockquote>\n<h2 id=\"44-多线程问题\"><a class=\"anchor\" href=\"#44-多线程问题\">#</a> 4.4 多线程问题</h2>\n<h3 id=\"441-系统调用fork和exec\"><a class=\"anchor\" href=\"#441-系统调用fork和exec\">#</a> 4.4.1 系统调用 fork () 和 exec ()</h3>\n<p>在多线程程序中，系统调用 fork () 和 exec () 的语义有所改变。</p>\n<p>如果程序中一个进程调用 fork ()，那么新进程会复制所有线程，还是新进程只有单个线程？有的 UNIX 系统有两种形式的 fork ()， <strong>一种复制所有线程，另一种只复制调用了系统调用 fork () 的线程。</strong></p>\n<p>Exec () 工作方式：如果一个线程调用系统调用 exec ()，那么 exec () 参数所指定的程序会替换整个进程，包括所有线程。</p>\n<p>如果调用 fork () 之后立即调用 exec ()，那么没有必要复制所有线程，因为 exec () 参数所指定的程序会替换整个进程。在这种情况下，只复制调用线程比较适当。不过，如果在 fork () 之后另一进程并不调用 exec (), 那么另一进程就应复制所有进程。</p>\n<h3 id=\"442-取消\"><a class=\"anchor\" href=\"#442-取消\">#</a> 4.4.2 取消</h3>\n<p>线程取消（thread cancellation）是在线程完成之前来终止线程的任务。</p>\n<p>要取消的线程通常称为 <strong>目标线程</strong>。目标线程的取消可在如下两种情况下发生：</p>\n<p>一是 <strong>异步取消</strong>（asynchronous cancellation）：一个线程立即终止目标线程。</p>\n<p>二是 <strong>延迟取消</strong>（deferred cancellation）：目标线程不断地检查它是否应终止，这允许目标线程有机会以有序方式来终止自己。</p>\n<p>如果资源已经分配給要取消的线程，或者要取消的线程正在更新与其他线程所共享的数据，那么取消会有困难，对于异步取消尤为麻烦。操作系统回收取消线程的系统资源，但是通常不回收所有资源。因此，异步取消线程并不会使所需的资源空闲。相反采用延迟取消时，允许一个线程检查它是否是在安系统资源空闲全的点被取消，pthread 称这些点为 <strong>取消点</strong>（cancellation point）。</p>\n<h3 id=\"443-信号处理\"><a class=\"anchor\" href=\"#443-信号处理\">#</a> 4.4.3 信号处理</h3>\n<p>信号处理：信号在 Unix 中用来通知进程某个特定时间已发生了，信号可以同步或异步接收。所有有信号具有同样的模式：</p>\n<p>（1）信号有特定事件的发生所产生</p>\n<p>（2）产生的信号要发送到进程</p>\n<p>（3）一旦发送，信号必须交易处理。</p>\n<p>同步信号的例子包括访问非法内存或被 0 除。在这种情况下，如果运行程序执行这些动作，那么就产生信号，同步信号发送到执行操作而产生信号的同一进程（同步的原因）。</p>\n<p>当一个信号由运行进程之外的事件产生，那么进程就异步接收这一信号。这种信号的例子包括使用特殊键（Ctrl + C）或者定时器到期。通常，异步信号被发送到另一个进程。</p>\n<p><strong>每个信号可能由两种可能的处理程序中的一种来处理：</strong></p>\n<p>（1）默认信号处理程序</p>\n<p>（2）用户定义的信号处理程序</p>\n<p>每个信号都有一个默认信号处理程序，当处理信号是在内核中运行的，这种默认动作可以用用户定义的信号处理程序来改写。信号可以按照不同的方式处理。有的信号可以简单的忽略（如改变窗口大小），有的需要终止程序来处理（非法内存访问）</p>\n<p>单线程程序的信号处理比较直接，信号总是发送给 <strong>进程</strong>。</p>\n<p><strong>当多线程时，信号会</strong></p>\n<p>（1）发送信号到信号所应用的线程</p>\n<p>（2）发送信号到进程内的每个线程</p>\n<p>（3）发送信号到进程内的某些固定线程</p>\n<p>（4）规定一个特定线程以接收进程的所有信号。</p>\n<p>发送信号的方法依赖于信号的类型。</p>\n<h3 id=\"444-线程池\"><a class=\"anchor\" href=\"#444-线程池\">#</a> 4.4.4 线程池</h3>\n<p>多线程服务器有一些潜在问题：第一个是关于处理请求之前用以创建线程的时间，以及线程在完成工作之后就要被丢弃这一事实。第二个，如果允许所有并发请求都通过新线程来处理，那么将没法限制在系统中并发执行的线程的数量。无限制的线程会耗尽系统资源。解决这一问题是使用 <strong>线程池</strong>。</p>\n<p>线程池的思想是在进程开始时创建一定数量的线程，并放入到池中以等待工作。当服务器收到请求时，他会唤醒池中的一个线程，并将要处理的请求传递给他，一旦线程完成了服务，它会返回到池中在等待工作。如果池中没有可用的线程，那么服务器会一直等待直到有空线程为止。</p>\n<p><strong>线程池的优点：</strong></p>\n<p>（1）通常用现有线程处理请求要比等待创建新的线程要快</p>\n<p>（2）线程池限制了在任何时候可用线程的数量。</p>\n<p>线程池中的线程数量由系统 CPU 的数量、物理内存的大小和并发客户请求的期望值等因素决定。比较高级的线程池能动态的调整线程的数量，以适应具体情况。</p>\n<h3 id=\"445-线程特定数据\"><a class=\"anchor\" href=\"#445-线程特定数据\">#</a> 4.4.5 线程特定数据</h3>\n<p>同属一个进程的线程共享进程数据。</p>\n<p>在某些情况下每个线程可能需要一定数据的自己的 <strong>副本</strong>，这种数据称为 <strong>线程特定数据</strong>。可以让每个线程与其唯一的标识符相关联。</p>\n<h1 id=\"第五章-cpu调度\"><a class=\"anchor\" href=\"#第五章-cpu调度\">#</a> 第五章 CPU 调度</h1>\n<h2 id=\"51-基本概念\"><a class=\"anchor\" href=\"#51-基本概念\">#</a> 5.1 基本概念</h2>\n<p>多道程序操作系统的基础。通过在进程之间切换 CPU，操作系统可以提高计算机的吞吐率。<br />\n对于单处理器系统，每次只允许一个进程运行：任何其他进程必须等待，直到 CPU 空闲能被调度为止。</p>\n<h3 id=\"511-cpu-io-区间周期\"><a class=\"anchor\" href=\"#511-cpu-io-区间周期\">#</a> 5.1.1 CPU-I/O 区间周期</h3>\n<p>CPU 的成功调度依赖于进程的如下属性：</p>\n<p>进程执行由 <strong>CPU 执行周期</strong>和 <strong>I/O 等待周期</strong>组成。进程在这两个状态之间切换 (CPU burst—I/O bust)。</p>\n<p>进程执行从 CPU 区间（CPU burst）开始，在这之后是 I/O 区间（I/O burst）。接着另外一个 CPU 区间，然后是另外一个 I/O 区间，如此进行下去，最终，最后的 CPU 区间通过系统请求中止执行。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111122103853.png\" alt=\"\" /></p>\n<p>经过大量 CPU 区间的长度的测试。发现具有大量短 CPU 区间和少量长 CPU 区间。I/O 约束程序通常具有很多短 CPU 区间。CPU 约束程序可能有少量的长 CPU 区间。这种分布有助于选择合适的 CPU 调度算法。</p>\n<h3 id=\"512-cpu程序调度\"><a class=\"anchor\" href=\"#512-cpu程序调度\">#</a> 5.1.2 CPU 程序调度</h3>\n<p>每当 CPU 空闲时，操作系统就必须从就绪队列中选择一个进程来执行。进程选择由短期调度程序（short-term scheduler）或 CPU 调度程序执行。调度程序从内存中选择一个能够执行的进程，并为之分配 CPU。</p>\n<p>就绪队列不必是先进先出（FIFO）队列，也可为优先队列、树或简单的无序链表。不过队列中所有的进程都要排队以等待在 CPU 上运行。队列中的记录通常为进程控制块（PCB）。</p>\n<h3 id=\"513-抢占调度\"><a class=\"anchor\" href=\"#513-抢占调度\">#</a> 5.1.3 抢占调度</h3>\n<p>CPU 调度决策可在如下 4 种情况环境下发生：</p>\n<p>（1）当一个进程从运行切换到等待状态（如：I/O 请求，或者调用 wait 等待一个子进程的终止）</p>\n<p>（2）当一个进程从运行状态切换到就绪状态（如：出现中断）</p>\n<p>（3）当一个进程从等待状态切换到就绪状态（如：I/O 完成）</p>\n<p>（4）当一个进程终止时</p>\n<p>对于第 1 和 4 两种情况，没有选择而只有调度。一个新进程（如果就绪队列中已有一个进程存在）必须被选择执行。对于第２和第３两种情况，可以进行选择。</p>\n<p>当调度只能发生在第 1 和 4 两种情况下时，称调度是非抢占的（nonpreemptive）或协作的（cooperative）；否则，称调度方案为 <strong>抢占的</strong>（preemptive）。采用非抢占调度，一旦 CPU 分配给一个进程，那么该进程会一直使用 CPU 直到进程终止或切换到等待状态。</p>\n<p>抢占调度对访问共享数据是有代价（如加锁）的，有可能产生错误，需要新的机制（如，同步）来协调对共享数据的访问。</p>\n<p>抢占对于操作系统内核的设计也有影响。在处理系统调用时，内核可能忙于进程活动。这些活动可能涉及要改变重要内核数据 (如 I/O 队列)。</p>\n<p>因为根据定义中断能随时发生，而且不能总是被内核所忽视，所以受中断影响的代码段必须加以保护以避免同时访问。操作系统需要在任何时候都能够接收中断，否则输入会丢失或输出会被改写。为了这些代码段不被多个进程同时访问，在进入时就要禁止中断，而在退出时要重新允许中断。</p>\n<h3 id=\"514-分派程序\"><a class=\"anchor\" href=\"#514-分派程序\">#</a> 5.1.4 分派程序</h3>\n<p>** 分派程序（**dispatch）是一个模块，用来将 CPU 的控制交给由短期调度程序选择的进程。<br />\n<strong>其功能包括</strong>：</p>\n<p>切换上下文<br />\n切换到用户模式<br />\n跳转到用户程序的合适位置，以重新启动程序。</p>\n<p>分派程序停止一个进程而启动另一个所花的时间成为 <strong>分派延迟</strong>。</p>\n<h2 id=\"52-调度准则\"><a class=\"anchor\" href=\"#52-调度准则\">#</a> 5.2 调度准则</h2>\n<p><strong>为了比较 CPU 调度算法所提出的准则：</strong></p>\n<p><strong>CPU 使用率</strong>：需要使 CPU 尽可能忙<br />\n<strong>吞吐量</strong>：指一个时间单元内所完成进程的数量<br />\n ** 周转时间 😗* 从进程提交到进程完成的时间段称为周转时间，周转时间是所有时间段之和，包括等待进入内存、在就绪队列中等待、在 CPU 上执行和 I/O 执行<br />\n<strong>等待时间</strong>：在就绪队列中等待所花费时间之和<br />\n<strong>响应时间</strong>：从提交请求到产生第一响应的时间</p>\n<p>需要使 CPU 使用率和吞吐量最大化，而使周转时间、等待时间和响应时间最小化。绝大多数情况下需要优化平均值，有时需要优化最大值或最小值，而不是平均值。</p>\n<h2 id=\"53-调度算法\"><a class=\"anchor\" href=\"#53-调度算法\">#</a> 5.3 调度算法</h2>\n<h3 id=\"531-先到先服务调度first-comefirst-served-scheduling\"><a class=\"anchor\" href=\"#531-先到先服务调度first-comefirst-served-scheduling\">#</a> 5.3.1 先到先服务调度 (First-Come，First-Served scheduling)</h3>\n<p>最简单的 CPU 调度算法是先到先服务算法（First-Come，First-Served scheduling）：先请求 CPU 的进程先分配到 CPU。FCFS 策略可以用 FIFO 队列来容易实现。当一个进程进入就绪队列，其 PCB 链接到队列的尾部。当 CPU 空闲时，CPU 分配给位于队列头的进程，接着运行进程从队列中删除。</p>\n<p>FCFS 策略的代码编写简单且容易理解，不过采用 FCFS 策略的平均等待时间通常比较长。当进程 CPU 区间时间变化很大，平均等待时间会变化很大。</p>\n<p>比如以下例子<br />\n进程 区间时间<br />\n P1 24<br />\nP2 3<br />\nP3 3</p>\n<p>如果按照 P1 P2 P3</p>\n<p>顺序到达，Gantt 图如下:</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190326211224562.png\" alt=\"\" /></p>\n<p>平均等待时间：0+24+273=17</p>\n<p>如果按 P2 P3 P1</p>\n<p>顺序到达，</p>\n<p>平均等待时间：0+3+63=3</p>\n<p>另外考虑在动态情况下的性能，假设有一个 CPU 约束进程和许多 I/O 约束进程，CPU 约束进程会移回到就绪队列并被分配到 CPU。再次所有 I/O 进程会在就绪队列中等待 CPU 进程的完成。由于所有其他进程都等待一个大进程释放 CPU，这称之为 <strong>护航效果</strong>（convoy effect）。与让较短进程最先执行相比，这样会导致 CPU 和设备使用率变的很低。</p>\n<p>FCFS 调度算法是 <strong>非抢占</strong>的。对于分时系统（每个用户需要定时的等待一定的 CPU 时间）是特别麻烦。允许一个进程保持 CPU 时间过长是个严重错误。</p>\n<h3 id=\"532-最短作业优先调度shortest-job-first-schedulingsjf\"><a class=\"anchor\" href=\"#532-最短作业优先调度shortest-job-first-schedulingsjf\">#</a> 5.3.2 最短作业优先调度 (shortest-job-first scheduling,SJF)</h3>\n<p>将每个进程与下一个 CPU 区间段相关联。当 CPU 为空闲时，它会赋给具有最短 CPU 区间的进程。如果两个进程具有同样长度，那么可以使用 FCFS 调度来处理。注意，一个更为适当地表示是最短下一个 CPU 区间的算法，这是因为调度检查进程的下一个 CPU 区间的长度，而不是其总长度。</p>\n<p>比如以下例子<br />\n进程 区间时间<br />\n P1 6<br />\nP2 8<br />\nP3 7<br />\nP4 3</p>\n<p>SJF = 0+3+9+164=7</p>\n<p>FCFS = 0+6+14+214=10.25</p>\n<p>SJF 算法的平均等待时间最小。SJF 算法的真正困难是如何知道 <strong>下一个 CPU 区间的长度</strong>。对于批处理系统的长期（作业）调度，可以将用户提交作业时间所制定的进程时间极限作为长度。SJF 调度经常用于 <strong>长期调度</strong>。</p>\n<p>它不能在短期 CPU 调度层次上加以实现。我们可以预测下一个 CPU 区间。认为下一个 CPU 区间的长度与以前的相似。因此通过计算下一个 CPU 区间长度的近似值，能选择具有最短预测 CPU 区间的进程来运行。 <strong>下一个 CPU 区间通常可预测为以前 CPU 去剪的测量长度的指数平均</strong>（exponential average）。</p>\n<p>SJF 算法可能是 <strong>抢占的或非抢占的</strong>。抢占 SJF 算法可抢占当前运行的进程，而非抢占的 SJF 算法会允许当前的进程先完成其 CPU 区间。抢占 SJF 调度有时称为 ** 最短剩余时间优先调度（**shortest-remaining-time-first scheduling）。</p>\n<p>比如以下例子<br />\n进程 到达时间 区间时间<br />\n P1 0 ８<br />\nP2 1 ４<br />\nP3 2 ９<br />\nP4 3 ５</p>\n<p>根据 Gantt 图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190326211409922.png\" alt=\"\" /></p>\n<p>平均等待时间：</p>\n<p>0+0+(5−3)+(10−1)+(17−2)4=264=6.5</p>\n<p>非抢占 SJF:</p>\n<p>0+(8−1)+(12−3)+(17−2)4=7.75</p>\n<h3 id=\"533-优先级调度priority-scheduling-algorithm\"><a class=\"anchor\" href=\"#533-优先级调度priority-scheduling-algorithm\">#</a> 5.3.3 优先级调度 (priority scheduling algorithm)</h3>\n<p>SJF 算法可作为通用的优先级调度算法的一个特例。每个进程都有一个优先级与其关联，具有最高优先级的进程会分配到 CPU。具有相同优先级的进程按 FCFS 顺序调度。SJF，其优先级（p）为下一个 CPU 区间的倒数。CPU 区间越大，则优先级越小，反之亦然。</p>\n<p>优先级通常是固定区间的数字，如０～７，但是数字大小与优先级的高低没有定论。</p>\n<p>对于下例，假设数字越小优先级越高<br />\n进程 区间时间 优先级<br />\n P1 10 ３<br />\nP2 1 １<br />\nP3 2 ４<br />\nP4 1 ５<br />\nP5 5 ２</p>\n<p>平均等待时间为：</p>\n<p>0+1+6+16+185=8.2</p>\n<p>优先级可通过内部或外部方式来定义。内部定义优先级使用一些测量数据以计算进程优先级。外部优先级是通过操作系统之外的准则来定义，如进程重要性等。</p>\n<p><strong>优先级调度可以是抢占的或非抢占的。</strong></p>\n<p>优先级调度算法的一个重要问题是 <strong>无限阻塞（indefinite blocking）或饥饿</strong>（starvation）。可以运行但缺乏 CPU 的进程可认为是阻塞的，它在等待 CPU。优先级调度算法会使某个有低优先级无穷等待 CPU。</p>\n<p>低优先级进程务求等待问题的解决之一是 <strong>老化</strong>（aging）。老化是一种技术，以逐渐增加在系统中等待很长时间的进程的优先级。</p>\n<h3 id=\"534-轮转法调度round-robinrr\"><a class=\"anchor\" href=\"#534-轮转法调度round-robinrr\">#</a> 5.3.4 轮转法调度 (round-robin,RR)</h3>\n<p>专门为分时系统设计。它类似于 FCFS 调度，但是 <strong>增加了抢占以切换进程</strong>。定义一个较小的时间单元，称为 <strong>时间片</strong>（time quantum，or time slice）。将就绪队列作为 <strong>循环队列</strong>。CPU 调度程序循环就绪队列，为每个进程分配不超过一个时间片段的 CPU。</p>\n<p>新进程增加到就绪队列的尾部。CPU 调度程序从就绪队列中选择第一个进程，设置定时器在一个时间片之后中断，再分派该进程。接下来将可能发生两种情况。进程可能只需要小于时间片的 CPU 区间。对于这种情况，进程本身会自动释放 CPU。调度程序接着处理就绪队列的下一个进程。否则，如果当前运行进程的 CPU 区间比时间片要长，定时器会中断产生操作系统中断，然后进行上下文切换，将进程加入到就绪队列的尾部，接着 CPU 调度程序会选择就绪队列中的下一个进程。</p>\n<p>RR 策略的平均等待时间通常较长</p>\n<p>比如以下例子，使用４ms 时间片<br />\n进程 区间时间<br />\n P1 24<br />\nP2 3<br />\nP3 3</p>\n<p>画出 Gantt 图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190326211615960.png\" alt=\"\" /></p>\n<p>平均等待时间：</p>\n<p>0+4+7+(10−4)3=5.66</p>\n<p>如果就绪，那么每个进程会得到 1n<br />\n 的 CPU 时间，其长度不超过 q 时间单元。每个进程必须等待 CPU 时间不会超过 (n−1)×q</p>\n<p>个时间单元，直到它的下一个时间片为止。</p>\n<p>RR 算法的性能很大程度上依赖于时间片的大小。在极端情况下，如果时间片非常大，那么 RR 算法与 FCFS 算法一样。如果时间片很小，那么 RR 算法称为处理器共享，n 个进程对于用户都有它自己的处理器，速度为真正处理器速度的 1/n。小的时间片会增加上下文切换的次数，因此，希望时间片比上下文切换时间长，事实上，绝大多数现代操作系统，上下文切换的时间仅占时间片的一小部分。周转时间也依赖于时间片的大小。</p>\n<h3 id=\"535-多级队列调度multilevel-queue-scheduling\"><a class=\"anchor\" href=\"#535-多级队列调度multilevel-queue-scheduling\">#</a> 5.3.5 多级队列调度 (Multilevel Queue Scheduling)</h3>\n<p>前台（交互）进程和后台（批处理）进程。这两种不同各类型的进程具有不同响应时间要求，也有不同调度需要。与后台进程相比，前台进程要有更高（或外部定义）的优先级。</p>\n<p>多级队列调度算法将就绪队列 <strong>分成多个独立队列</strong>。根据进程的属性，如内存大小等，一个进程被永久地分配到一个队列 (低调度开销但是不够灵活)，每个队列有自己的调度算法。前台队列可能采用 RR 算法调度，而后台调度可能采用 FCFS 算法调度。</p>\n<p>另外，队 <strong>列之间必须有调度</strong>，通常采用固定优先级抢占调度，例如前台队列可以比后台队列具有绝对优先值。另一种可能在队列之间划分时间片例如，前台队列可以有 80% 的时间用于在进程之间进行 RR 调度，而后台队列可以有 20% 的 CPU 时间采用 FCFS 算法调度进程。</p>\n<p>与多级队列调度相反，多级反馈队列调度允许进程在队列之间移动。主要思想是根据不同 CPU 区间的特点以区分进程。如果进程使用过多 CPU 时间，那么它可能被转移到较低优先级队列。这种方案将 I/O 约束和交互进程留在更高优先级队列。此外，在较低优先级队列中等待时间过长的进程会被转移到更高优先级队列。这种形式的老化组织饥饿的发生。</p>\n<p><strong>通常，多级反馈队列调度程序可由下列参数来定义：</strong></p>\n<ul>\n<li>队列数量。</li>\n<li>每个队列的调度算法。</li>\n<li>用以确定何时升级到更高优先级队列的方法。</li>\n<li>用以确定何时降级到更低优先级队列的方法。</li>\n<li>用以确定进程在需要服务时应进入哪个队列的方法。</li>\n</ul>\n<h1 id=\"第六章-进程同步\"><a class=\"anchor\" href=\"#第六章-进程同步\">#</a> 第六章 进程同步</h1>\n<h2 id=\"61-背景\"><a class=\"anchor\" href=\"#61-背景\">#</a> 6.1 背景</h2>\n<p>互相协作的进程之间有 <strong>共享的数据</strong>，于是这里就有一个并发情况下，如何确保有序操作这些数据、维护一致性的问题，即 <strong>进程同步。</strong></p>\n<p>从底层到高级应用，同步机制依次有临界区、信号量、管、原程子事务。</p>\n<p>多个进程并发访问和操作同一数据且执行结果与访问发生的特定顺序有关，称之为 <strong>竞争条件</strong>（race condition）。</p>\n<h3 id=\"62-临界区critical-section\"><a class=\"anchor\" href=\"#62-临界区critical-section\">#</a> 6.2 临界区（critical section）</h3>\n<p>每个进程有一个代码段（code segment）称为 <strong>临界区</strong>（critical section），在该区中进程可能改变共同变量、更新一个表或写一个文件等。这种系统的重要特征是当一个进程进入临界区，没有其他进程可被允许在临界区内执行，即没有两个进程可同时在临界区内执行。</p>\n<p><strong>临界资源</strong>（Critical resource）每次只能被一个进程访问。而 <strong>临界区则是能够访问临界资源的代码片段</strong>。</p>\n<p>临界区问题（critical-section problem）是设计一个以便进程协作的协议。每个进程必须请求允许进入其临界区。实现请求的代码段称为进入区（entry section），临界区之后可有退出区（exit section），其他代码段成为剩余区（remainder section）。</p>\n<p>一个典型进程 Pi 的通用结构：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>进入区</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    临界区</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>退出区</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    剩余区</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>临界区问题的解答必须满足三项要求：</strong></p>\n<p>（1） <strong>互斥</strong>（mutual exclusion）：<br />\n如果进程 Pi 在其临界区内执行，那么其他进程都不能在其临界区内执行；</p>\n<p>（2） <strong>前进</strong>（progress）：<br />\n如果没有进程在其临界区内执行且有进程需进入临界区，那么只有那么不在剩余区内执行的进程可参加选择，以确定谁能下一个进入临界区，且这种选择不能无限推迟；</p>\n<p>（3） <strong>有限等待</strong>（bounded waiting）：<br />\n从一个进程做出进入临界区的请求，直到该请求允许为止，其他进程允许进入其临界区内的次数有上限。</p>\n<p>一个操作系统，在某个时刻，可同时存在有多个处于内核模式的活动进程，因此实现操作系统的内核代码，会存在竞争条件。内核开发人员有必要确保其操作系统不会产生竞争条件。</p>\n<p>有两种方法用于处理操作系统内的临界区问题：</p>\n<p><strong>抢占内核（preemptive kernel）与非抢占内核</strong>（nonpreemptive kernel）：</p>\n<p>抢占内核允许处于内核模式的进程被抢占。</p>\n<p>非抢占内核不允许内核模式的进程被抢占。</p>\n<p>非抢占内核的内核数据结构从根本上不会导致竞争条件，对于抢占内核需要认真设计以确保其内核数据结构不会导致竞争条件。</p>\n<p>但抢占内核更受欢迎，因为抢占内核更适合实时编程，因为它能允许实时进程抢占处于内核模式运行的其他进程。再者，抢占内核的响应更快，因为处于内核模式的进程在释放 CPU 之前不会运行过久。</p>\n<h2 id=\"63-peterson算法\"><a class=\"anchor\" href=\"#63-peterson算法\">#</a> 6.3 Peterson 算法</h2>\n<p>Peterson 算法是一种经典的基于 <strong>软件</strong>的临界区问题算法，可能现代计算机体系架构基本机器语言有些不同，不能确保正确运行。</p>\n<p>Peterson 算法适用于两个进程在临界区与剩余区间交替执行，为了方便，当使用 Pi 时，Pj 来标示另一个进程，即 j=i−1。Peterson 算法需要在两个进程之间共享两个数据项：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> turn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>boolean flag<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>变量 turn 表示哪个进程可以进入其临界区，即如果 turn==i，那么进程 Pi 允许在其临界区内执行。</p>\n<p>数组 flag 表示哪个进程想要进入临界区，如果 flag [i] 为 true，即 Pi 想进入其临界区。</p>\n<p>// 进程 Pi 的 Peterson 算法</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   turn<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>turn<span class=\"token operator\">==</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token operator\">&amp;</span>#x4E34<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#x754C<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#x533A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token operator\">&amp;</span>#x5269<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#x4F59<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#x533A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可以证明，满足三项要求。</p>\n<p>Peterson 算法实际上是一种谦让的过程，即：<br />\nPi：我已经准备好了，但是我让这次一次的 turn=j，看看 Pj 是否要运行，如果是的话，我就让 Pj 先运行。<br />\nPj 也是这样的情况。</p>\n<h2 id=\"64-硬件同步\"><a class=\"anchor\" href=\"#64-硬件同步\">#</a> 6.4 硬件同步</h2>\n<p>通过要求临界区用锁来防护，就可以避免竞争条件，即一个进程在进入临界区之前必须得到锁，而其退出临界区时释放锁。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    请求锁</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        临界区</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    释放锁</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        剩余区</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>硬件特性能简化编程任务且提高系统效率。</p>\n<p>对于单处理器环境，临界区问题可简单地加以解决：在修改共享变量时要禁止中断出现。这样其他指令不可能执行，所以共享变量也不会被意外修改。这种方法通常为抢占式内核所采用。</p>\n<p>在多处理器环境下，这种解决方法是不可行的，低效且影响系统时钟。</p>\n<p>特殊硬件指令以允许能 ** 原子地（** 不可中断的）检查和修改字的内容或交换两个字的内容。如 TestAndSet ()，当两个指令同时执行在不同的 CPU 上，那么它们会按任意顺序来顺序执行。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>boolean <span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span>boolean <span class=\"token operator\">*</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    boolean rv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">*</span>target <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> rv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    lock <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>boolean <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> boolean <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    boolean temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    key <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    lock <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 TestAndSet 的互斥实现，声明一个 Boolean 变量 lock，初始化为 false</p>\n<pre><code>do&#123;\n    while(TestAndSetLock(&amp;lock))\n        ;//do nothing\n        //critical section\n    lock=FALSE;\n        //remainder section\n&#125;while(TRUE);\n</code></pre>\n<p><strong>Swap 指令的定义：</strong></p>\n<pre><code>void Swap(boolean *a,boolean *b)\n&#123;\n  booleab temp=*a;\n  *a=*b;\n  *b=temp;\n&#125;\n</code></pre>\n<p>使用 Swap 的互斥实现：key 为每个进程局部变量，lock 为全局变量，初始化为 false</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    key <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    lock <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这些算法解决了互斥，但是并没有解决有限等待要求，因为所有的程序执行都是随机执行的问题。</p>\n<p>下面介绍的使用 TestAndSet 的算法，该算法满足所有的临界区的三个要求。<br />\n公用的数据结构如下<br />\n boolean waiting [i] = TRUE;<br />\nboolean lock;<br />\n 初始化均为 false。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  waiting<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  key<span class=\"token operator\">=</span>TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>waiting<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    key<span class=\"token operator\">=</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  waiting<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//critical section</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  j<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">!=</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>waiting<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    j<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    lock<span class=\"token operator\">=</span>FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    waiting<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>FALSE</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//remainder section</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了满足有限等待，当一个进程退出其临界区时，它会循环地扫描数组 waiting [i] 并根据这一顺序而指派第一个等待进程作为下一个进入临界区的进程。因此，任何等待进入临界区的进程只需要等待 n−1 次。<br />\n然而，对于硬件设计人员，在多处理器上实现原子指令 TestAndSet 并不简单。</p>\n<h2 id=\"65-信号量semaphore\"><a class=\"anchor\" href=\"#65-信号量semaphore\">#</a> 6.5 信号量 (semaphore)</h2>\n<p>应用层面解决临界区问题： <strong>信号量</strong></p>\n<p>信号量 S 是个整数变量，除了初始化外，它只能通过两个标准原子操作： <strong>wait () 和 signal () 来访问。即 P 和 V</strong>。</p>\n<p>wait () 就是等待资源的过程，定义可表示为：</p>\n<pre><code>wait(S)\n&#123;\n  while(S&lt;=0) ; no-op s--; &#125;&lt; code&gt;&lt;/=0)&gt;\n</code></pre>\n<p>signal () 就是释放资源的过程，定义可表示为：</p>\n<pre><code>signal(S)\n&#123;\n  S++;\n&#125;\n</code></pre>\n<p>在 wait () 和 signal () 操作中，对信号量整型值的修改必须不可分地执行。即当一个进程修改信号量值时，不能有其他进程同时修改同一信号量的值。另外，对于 wait (S)，对于 S 的整数值测试 (S≤0) 和对其可能的修改 (S–)，也必须不被中断地执行。</p>\n<h3 id=\"651-用法\"><a class=\"anchor\" href=\"#651-用法\">#</a> 6.5.1 用法</h3>\n<p>通常操作系统区分 <strong>计数信号量</strong>和 <strong>二进制信号量</strong>。计数信号量的值域不受限制，而二进制信号量的值只能为 0 或 1, 有的系统，将二进制信号量成为 <strong>互斥锁</strong>。<br />\n由于二进制信号量是互斥的，因而可以将其应用于处理多进程的临界区问题：这 n 个进程共享信号量 mutex，初始值 1。结构如下</p>\n<pre><code>do\n&#123;\n  wait(mutex);\n    //critical section\n  signal(mutex);\n    //remainder section\n&#125;while(TRUE);\n</code></pre>\n<p>计数信号量可以用来控制访问具有若干个实例的某种资源。该信号量初始化为可用资源的数量。当每个进程需要使用资源时，需要对该信号量执行 wait () 操作。当进程释放资源时，需要对该信号执行 signal () 操作。</p>\n<p>可以用信号量来解决各种同步问题。如先执行 Pi 的 S1 语句，然后再执行 Pj 的 S2 语句，可以通向一个信号量，初始化为 0。<br />\n进程 P1 中插入语句：</p>\n<pre><code>S1;\nsignal(synch);\n</code></pre>\n<p>在进程 P2 中插入语句：</p>\n<pre><code>wait(synch);\nS2;\n</code></pre>\n<p>因为初始化 synch 为 0，P2<br />\n 只有在 P1 调用 signal (synch)，即 (S1) 之后，才会执行 S2。</p>\n<h3 id=\"652-实现\"><a class=\"anchor\" href=\"#652-实现\">#</a> 6.5.2 实现</h3>\n<p>信号量的主要缺点是要求 <strong>忙等待</strong>（busy waiting）。即在进入代码段中连续地循环。忙等待浪费了 CPU 时钟，这种类型的信号量也称为 <strong>自旋锁</strong>（spinlock），这是因为进程在其等待锁的时还在运行 (自旋锁有其优点，进程在等待锁时不进行上下文切换，而上下文切换可能需要花费相当长的时间。因此如果锁占用的时间短，那么锁就有用了，自旋锁常用于多处理器系统中，这样一个线程在一个处理器自旋时，另一线程可在另一个处理器上在其临界区内执行).</p>\n<p>为克服这一缺点，修改 wait () 和 signal () 的定义，信号量值不为正时，不是忙等而是 <strong>阻塞</strong>自己，阻塞操作将一个进程放入到与信号量相关的等待队列中，并将该进程的状态切换成等待状态，接着，控制转到 CPU 调度程序，以选择另一个进程来执行，从而使 CPU 占用率变高。</p>\n<p>被阻塞在等待信号Ｓ上的进程，可以在其他进程执行 signal () 的时候操作之后重新被执行，该进程的重新执行是通过 wakeup () 操作来进行的将进程从等待状态切换到就绪状态。接着进程被放到就绪队列中。</p>\n<p>因而将信号量定义为如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">process</span> <span class=\"token operator\">*</span>list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> semaphore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>每个信号量都有一个整型值和一个进程链表，当一个进程必须等待信号量时，就加入到进程链表上，操作 signal () 会从等待进程链表中取一个进程以唤醒。</p>\n<p><strong>wait () 实现：</strong></p>\n<pre><code>wait (semaphore *S) &#123;\n    S-&gt;value--;\n    if (S-&gt;value &lt; 0) &#123;\n        add this process to S-&gt;list;\n        block(); // 挂起调用它的进程\n    &#125;\n&#125;\n</code></pre>\n<p><strong>signal () 实现：</strong></p>\n<pre><code>signal(semaphore *S) &#123;\n    S-&gt;value++;\n    if (S-&gt;value &lt;= 0) &#123;\n        remove a process P from S-&gt;list;\n        wakeup(P); // 重新启动阻塞进程P的执行\n    &#125;\n&#125;\n</code></pre>\n<p>操作 block () 挂起调用他的进程。</p>\n<p>操作 wakeup (P) 重新启动阻塞进程Ｐ的执行。</p>\n<p>这两个操作都是由操作系统作为基本系统调用来提供的。</p>\n<p>在具有忙等的信号量经典定义下，信号量的值绝对不能为负数，但是本实现可能造成信号量为负值。 <strong>如果信号量为负值，那么其绝对值就是等待该信号量的进程的个数。</strong></p>\n<p>等待进程的链表可以利用进程控制块 PCB 中的一个链接域来加以轻松实现。即每个信号量包括一个整型值和一个 PCB 链表的指针。</p>\n<p>信号量的关键之处是它们原子的执行。必须确保没有两个进程能同时对一个信号量进行操作，在单处理器情况下，可以在执行 wait () 和 signal () 的时候简单的关闭中断，保证只有当前进程进行。</p>\n<p>多处理器下，若禁止所有 CPU 的中断，则会严重影响性能，SMP 系统必须提供其他加锁技术（如自旋锁），以确保 wait () 与 signal () 可原子地执行。</p>\n<h3 id=\"653-死锁与饥饿\"><a class=\"anchor\" href=\"#653-死锁与饥饿\">#</a> <strong>6.5.3 死锁与饥饿</strong></h3>\n<p>具有等待队列的信号量的实现可能会导致这样的情况：</p>\n<p>两个或多个进程无限地等待一个事件，而该事件只能由这些等待进程之一来产生。这里的事件是 signal () 操作的执行。当出现这样的状态时，这些进程就称为死锁（deadlocked）。</p>\n<p>例如，一个由 P1<br />\n 和 P2 组成的系统，每个都访问共享的信号量Ｓ和Ｑ，Ｓ和Ｑ初值均为１。</p>\n<p>P0:</p>\n<pre><code>wait(S);\nwait(Q);\n//......\n\nsignal(S);\nsignal(Q);\n</code></pre>\n<p>P1:</p>\n<pre><code>wait(Q);\nwait(S);\n//......\n\nsignal(Q);\nsignal(S);\n</code></pre>\n<p>假设，P0 执行 wait (S)，接着 P1 执行 wait (Q)，P0 再执行 wait (Q) 时，必须等待，直到 P1 执行 signal (Q)，而此时 P1 也在等待 P0 执行 signal (S)，两个操作都不能进行，P0 和 P1 就死锁了。</p>\n<p>与死锁相关的另一个问题是 <strong>无限期阻塞（indefinite blocking）或饥饿</strong>（starvation）：即进程在信号量内无限期等待。</p>\n<p>举个例子来理解死锁与饥饿的区别：</p>\n<p>死锁 (deadlock)<br />\n 指的是两个或者两个以上的进程相互竞争系统资源，导致进程永久阻塞。</p>\n<p>例如：</p>\n<p>1、桌子上有慢慢一桌子的美食，但是只有一双筷子。<br />\n2、甲拿了一根，然后在找另一根。<br />\n3、乙拿了一根，然后也在找另一根。<br />\n4、因为他们都掌握了对方必需的资源，导致最后他们俩谁都吃不到美食。</p>\n<p>饥饿 (starvation)<br />\n 指的是等待时间已经影响到进程运行，此时成为饥饿现象。如果等待时间过长，导致进程使命已经没有意义时，称之为 &quot;饿死&quot;。</p>\n<p>例如：</p>\n<p>1、小明要告诉妈妈明天开家长会。<br />\n2、小明妈妈因为工作太忙，在公司加班，没有回家。<br />\n3、于是第二天，小明的妈妈就错过了家长会。（&quot;饿死&quot;）<br />\n4、其实小明的妈妈没有出现 &quot;死锁&quot;。只是小明的优先级过低，不如工作重要。</p>\n<h2 id=\"66-经典同步问题\"><a class=\"anchor\" href=\"#66-经典同步问题\">#</a> 6.6 经典同步问题</h2>\n<h3 id=\"661-有限缓存问题生产者消费问题\"><a class=\"anchor\" href=\"#661-有限缓存问题生产者消费问题\">#</a> 6.6.1 有限缓存问题 — 生产者消费问题：</h3>\n<p>假设缓冲池有 n 个缓冲项，每个缓冲项能存在一个数据项。信号量 mutex 提供了对缓冲池访问的互斥要求，并初始化为 1。信号量 empty 和 full 分别用来表示空缓冲项和满缓冲项的个数，信号量 empty 初始化为 n；而信号量 full 初始化为 0</p>\n<p>生产者进程结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// produce an item in nextp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// add nextp to buffer</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>消费者进程结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 消费者</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// r3emove an item from buffer to nextc</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// consume the item in nextc</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"662-读者-写者问题\"><a class=\"anchor\" href=\"#662-读者-写者问题\">#</a> 6.6.2 读者 - 写者问题</h3>\n<p>只读数据库的进程称为读者；更新（读和写）数据库的称为写者。</p>\n<p>第一读者 - 写者问题：要求没有读者需要保持等待除非已有一个写者已获得允许已使用共享数据库。换句话说，没有读者会因为一个写者在等待而会等待其他读者的完成。</p>\n<p>第二读者 - 写者问题：要求一旦写者就绪，那么写者会尽可能快得执行其写操作。换句话说，如果一个写者等待访问对象，那么不会有新读者开始读操作。</p>\n<p>对于这两个问题的解答可能导致饥饿问题。对第一种情况，写者可能饥饿；对第二种情况，读者可能饥饿。</p>\n<p>对于第一读者－写者问题的解决:</p>\n<p>读者进程共享以下数据结构：</p>\n<pre><code>semaphore mutex, wrt;\nint readcount;\n</code></pre>\n<p>信号量 mutex 和 wrt 初始化为 1，readcount 初始化为 0，信号量 wrt 为读者和写者进程所共有。信号量 mutex 用于确保在更新变量 readcount 时的互斥。变量 readcount 用来跟踪有多少进程正在读对象。信号量 wrt 供写者作为互斥信号量，它为第一个进入临界区和最后一个离开临界区的读者所使用，而不被其他读者所使用。</p>\n<p>写者进程结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 写者进程结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>wrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// writing is performed</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>wrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>读者进程结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 读者进程结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    readcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readcount <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当前没有读者，需要等待 / 获取写者互斥</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>wrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// reading is performed</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    readcount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readcount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 所有读者退出，释放写者互斥</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>wrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>推广为读写锁。</p>\n<p>在以下情况下最为有用：</p>\n<p>一是，当可以区分哪些进程只需要读共享数据，哪些进程只需要写共享数据；</p>\n<p>二是，当读者进程数比写进程多时。</p>\n<h3 id=\"663-哲学家进餐问题\"><a class=\"anchor\" href=\"#663-哲学家进餐问题\">#</a> <strong>6.6.3 哲学家进餐问题</strong></h3>\n<p>拿起与他相近的两只筷子，一个哲学家一次只能拿起一只筷子，同时有两只筷子时，就能吃，吃完，会放下两只筷子。</p>\n<p>一种简单的方法，每只筷子都用一个信号量来表示。一个哲学家通过执行 wait () 操作试图获取相应的筷子，他会通过执行 signal () 操作以释放相应的筷子。</p>\n<p>共享数据为：semaphore chopstick [5]; 其中所有 chopstick 的元素初始化为 1。</p>\n<p>哲学家 i 的结构：</p>\n<pre><code>do\n&#123;\n  wait(chopstick[i]);\n  wait(chopstick[(i+1)%5]);\n  &amp;#x2026;;\n  //eat\n  &amp;#x2026;;\n  signal(chopstick[i]);\n  signal(chopstick[(i+1)%5]);\n  &amp;#x2026;;\n  //think\n  &amp;#x2026;;\n&#125;while(TRUE);\n</code></pre>\n<p>但这种方法会发生死锁，例如，所有哲学家同时饥饿，且同时拿起左边的筷子。</p>\n<p>多种可以解决死锁的方法：<br />\n①最多只允许 4 个哲学家同时坐在桌子上；<br />\n②只有两只筷子都可用时才允许一个哲学家拿起它们（他必须在临界区内拿起两只筷子）；<br />\n③使用非对称解决方法，即技术哲学家先拿起左边的筷子，接着拿起右边的筷子，而偶数哲学家先拿起右边的筷子，接着拿起左边的筷子。</p>\n<h1 id=\"第七章-死锁\"><a class=\"anchor\" href=\"#第七章-死锁\">#</a> 第七章 死锁</h1>\n<blockquote>\n<p>所有申请的资源都被其他等待进程占有，那么该等待进程有可能在无法改变其状态，这种情况称为 <strong>死锁</strong>（deadlock）。</p>\n</blockquote>\n<h2 id=\"71-系统模型\"><a class=\"anchor\" href=\"#71-系统模型\">#</a> 7.1 系统模型</h2>\n<p>进程在使用资源之前必须先申请资源，在使用资源之后要释放资源。进程所申请的资源数量不能超过系统所有资源的总量。</p>\n<p>某系统拥有一定数量的资源，分布在若干竞争进程之间。这些资源可以分成多种类型，每种类型有一定数量的实例。</p>\n<p><strong>在正常操作模式下，进程只能按如下顺序使用资源</strong>：</p>\n<ul>\n<li>①申请：如果申请不能立即被允许，那么申请进程必须等待，直到它获得该资源为止。</li>\n<li>②使用：进程对资源进行操作。</li>\n<li>③释放：进程释放资源</li>\n</ul>\n<p>资源的申请与释放为 <strong>系统调用</strong>。其他资源的申请与释放可以通过信号量的 wait 与 signal 操作或通过互斥锁的获取与释放来完成。因此对于进程和线程的每次使用，操作系统会检查以确保使用进程已经申请并获得了资源。</p>\n<p>系统表记录了每个资源是否空闲或已被分配，分配给了哪个进程。如果进程正在申请的资源正在为其他进程所使用，那么该进程会增加到该资源的等待队列。</p>\n<p><strong>当一组进程的每个进程都在等待一个事件，而这个事件只能由这一组进程的另一个进程所引起，那么这组进程就处于死锁状态</strong>。</p>\n<p>死锁也可设计不同的资源类型。多线程可能因为竞争共享资源而容易产生死锁。</p>\n<h2 id=\"72-死锁特征\"><a class=\"anchor\" href=\"#72-死锁特征\">#</a> 7.2 死锁特征</h2>\n<p>当出现死锁时，进程永远不能完成，并且系统资源被阻碍使用，阻止了其他作业开始执行。</p>\n<h3 id=\"721-必要条件\"><a class=\"anchor\" href=\"#721-必要条件\">#</a> 7.2.1 必要条件</h3>\n<p><strong>如果在一个系统中下面四个条件同时满足，那么会引起死锁。</strong></p>\n<p>（1） 互斥 (mutual exclusion)：至少有一个资源必须处于非共享模式，即一次只有一个进程使用，如果另一个进程申请该资源，那么申请进程必须等到该资源被释放为止。</p>\n<p>（2） 占有并等待 (hold and wait)：一个进程必须占有至少一个资源，并等待另一资源，而该资源为其他进程所占有。</p>\n<p>（3） 非抢占 (no preemption)：资源不能被抢占，即资源只能在进程完成任务后自动释放。</p>\n<p>（4） 循环等待 (circular wait)：有一组等待进程｛P0,P1,P2,P3...,Pn｝,P0 等待的资源被 P1 等待，P１等待的资源被 P2 所占有，......，Pn−1 等待的资源为 Pn 所占有，Pn 所等待的资源被 P0 所占有。</p>\n<p>４个条件必须同时满足才会出现死锁，循环等待条件意味着占有并等待条件，这样四个条件并不完全独立。</p>\n<h3 id=\"722-资源分配图\"><a class=\"anchor\" href=\"#722-资源分配图\">#</a> 7.2.2 资源分配图</h3>\n<p>死锁问题可用称为系统资源分配图的有向图进行更为精确地描述。</p>\n<p>这种图由一个节点集合Ｖ和一个边集合Ｅ组成。节点集合Ｖ可以分成两种类型的节点：</p>\n<p>Ｐ＝｛P1，P2，...，Pn｝（系统活动进程的集合）</p>\n<p>Ｒ＝｛R1，R2，...，Rn｝（系统所有资源的集合）</p>\n<p>Pi→Rj<br />\n 表示进程 Pi 已经申请了资源类型为 Rj 的一个实例，称为申请边</p>\n<p>Rj→Pi<br />\n 表示资源类型 Rj 已经分配给进程 Pi，称为分配边</p>\n<p>如一个分配图的例子如下：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111131635370.png\" alt=\"\" /></p>\n<p>有一个 R1、R3 的资源，有两个 R2 的资源，有三个 R4 的资源。</p>\n<p><strong>可以证明：</strong></p>\n<ul>\n<li>如果分配图没有环，那么系统就没有进程死锁。如果分配图有环，那么可能存在死锁。</li>\n<li>如果每个类型只有一个实例，环是死锁存在的充分必要条件。不过每个类型不止一个实例，环是死锁的必要条件。</li>\n</ul>\n<p>存在死锁的资源分配图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190326214632949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>存在环但是没有死锁的资源分配图:</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190326214641465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI2NDcy,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<h2 id=\"73-死锁处理方法\"><a class=\"anchor\" href=\"#73-死锁处理方法\">#</a> 7.3 死锁处理方法</h2>\n<p><strong>有三种方法：</strong></p>\n<ul>\n<li>可使用协议以 <strong>预防或避免</strong>死锁，确保系统不会进入死锁状态。</li>\n<li>可允许系统进入死锁状态，然后检测它，并加以 <strong>修复</strong>。</li>\n<li>可忽略这个问题，认为死锁不可能在系统内发生。</li>\n</ul>\n<p>这里第三种方法为绝大多数操作系统所用，因此应用程序开发人员需要自己来处理死锁。</p>\n<p>为了确保死锁不会发生，系统可以采用死锁预防或死锁避免方案</p>\n<p><strong>死锁预防</strong>（deadlock prevention）是一组方法，以确保至少一个必要条件不成立。这些方法通过限制如何申请资源的方法来预防死锁。</p>\n<p><strong>死锁避免</strong>（deadlock avoidance）要求操作系统事先得到有关进程申请资源和使用资源的额外信息。有了这些额外信息，系统可以确定：对于一个申请，进程是否应等待。为了确定当前申请是允许还是延迟，系统必须考虑可用资源，已经分配给每个进程的资源，每个进程将来申请和释放的资源。</p>\n<p>除此之外，系统还可以提供一个算法来检查系统状态来确定死锁是否发生，并提供另一个算法来从死锁中恢复。</p>\n<p>预防死锁的副作用是降低设备的使用率和系统的吞吐率。</p>\n<p>缺点是低设备使用率和系统吞吐率。</p>\n<h2 id=\"74-死锁预防deadlock-prevention\"><a class=\"anchor\" href=\"#74-死锁预防deadlock-prevention\">#</a> 7.4 死锁预防（deadlock prevention）</h2>\n<blockquote>\n<p>出现死锁有四个必要条件，只要保证至少一个条件不成立，就能预防死锁的发生。</p>\n</blockquote>\n<h3 id=\"741-互斥\"><a class=\"anchor\" href=\"#741-互斥\">#</a> 7.4.1 互斥</h3>\n<p>对于非共享资源，必须要有互斥条件（如打印机）。另一方面，共享资源不要求互斥访问，因此不会涉及死锁（如只读文件）。</p>\n<p>故通常不能通过否定互斥条件来预防死锁，有的资源本身就是非共享的。</p>\n<h3 id=\"742-占有并等待\"><a class=\"anchor\" href=\"#742-占有并等待\">#</a> 7.4.2 占有并等待</h3>\n<p>为了确保占有并等待条件不会在系统内出现，必须保证： <strong>当一个进程申请一个资源时，就不能占有其他资源。</strong></p>\n<p>方法一：可以通过要求申请资源的系统调用在所有其使用的协议是每个进程在执行前申请并获得所有资源。他系统调用之前进行。</p>\n<p>方法二：允许进程在没有资源时才可申请资源，一个进程可申请一些资源并使用它们，然而，在它申请更多其他资源之前，它必须释放其现已分配的所有资源。</p>\n<p><strong>这两种协议有两个主要缺点：</strong></p>\n<p>第一，资源利用率（resource utilization）可能比较低，因为很多资源可能已分配，但长时间没有被使用。</p>\n<p>第二，可能发生饥饿。一个进程如需要多个常用资源，可能会永久等待，比如因为其所需要的资源中至少一个总是分配给其他的进程。</p>\n<h3 id=\"743-非抢占\"><a class=\"anchor\" href=\"#743-非抢占\">#</a> 7.4.3 非抢占</h3>\n<p>为确保这一条件不成立，可使用如下协议：</p>\n<p>即可以抢占，如果一个进程占用资源并申请另一个不能立即分配的资源，那么其现已分配的资源都可被抢占，即这些资源被隐式地释放了。只有当进程获得其原有资源和所申请的新资源时，进程才可以重新执行。</p>\n<p>或者说，如果一个进程申请一些资源，首先检查是否可用，如果可用就分配它们，如果不可用，那么检查这些资源是否已分配给其他等待额外资源的进程。如果是就抢占这些资源，并分配给申请进程。如果资源不可用且也不可被其他等待进程占有，那么申请进程必须等待。当一个进程处于等待时，如果其他进程申请其拥有的资源，那么该进程部分资源可以被抢占。一个进程要重新执行，他必须分配到其所申请的资源，并恢复其在等待时被抢占的资源。</p>\n<p>这个协议通常用于状态可以保存和恢复的资源，如 CPU 寄存器和内存，一般不适用其他资源，如打印机和磁带驱动器。</p>\n<h3 id=\"744-循环等待\"><a class=\"anchor\" href=\"#744-循环等待\">#</a> 7.4.4 循环等待</h3>\n<p>一个确保此条件不成立的方法是：对所有资源类型进行完全排序，且要求每个进程按递增顺序来申请资源。</p>\n<p>设Ｒ＝｛R1，R2，R3，...，Rn｝为资源类型的的集合。为每个资源类型分配一个唯一整数来允许比较两个资源以确定其先后顺序。可定义一个函数Ｆ：R→N , 其中Ｎ是自然数集合，例如：Ｆ（tapedrive）＝1 Ｆ（diskdrive）＝5 Ｆ（printer）＝12</p>\n<p>每个进程只按照递增顺序申请资源，即一个进程开始可以申请任意数量的资源类型为Ｒｉ的实例。之后，当且仅当Ｆ（Rj）&gt;Ｆ（Ri）时，该进程可以申请资源 Rj 的实例。如果需要同一资源类型的多个实例，那么对它们必须一起申请。</p>\n<p>例如，对于以上给定函数，一个进程如果同时需要打印机和磁带驱动器，那么就必须先申请磁带驱动器，再申请打印机。换句话说，要求当一个进程申请资源类型 Rj 时，必须先释放所有 Ri [Ｆ（Ri）&gt;Ｆ（Rj）]</p>\n<p>可以使用反证法证明，使用这两个协议，那么循环等待就不可能成立。</p>\n<p>设计一个完全排序或层析并不能防止死锁，而是要靠应用程序员来按顺序编写程序。另外函数Ｆ应该根据系统内资源使用的正常顺序来定义。例如，由于磁带通常在打印机之前使用，所以定义Ｆ（tapedrive）</p>\n",
            "tags": []
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/11/11/%E6%9C%9F%E6%9C%AB/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%94%E8%AE%B0/",
            "url": "https://zengshengli775.gitee.io/2021/11/11/%E6%9C%9F%E6%9C%AB/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%94%E8%AE%B0/",
            "title": "操作系统概念笔记",
            "date_published": "2021-11-10T16:00:00.000Z",
            "content_html": "<h1 id=\"读书笔记-操作系统概念\"><a class=\"anchor\" href=\"#读书笔记-操作系统概念\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnpoZW5seS5jbi9Cb29rL2Jvb2tfT3BlcmF0aW9uX3N5c3RlbS8=\">读书笔记 | 操作系统概念</span></h1>\n<h1 id=\"第一部分-概论\"><a class=\"anchor\" href=\"#第一部分-概论\">#</a> 第一部分 概论</h1>\n<h2 id=\"第-1-章-导论\"><a class=\"anchor\" href=\"#第-1-章-导论\">#</a> 第 1 章 导论</h2>\n<p>操作系统是管理计算机硬件的程序， 为应用程序提供基础， 并且充当计算机硬件和计算机用户的中介。</p>\n<p>计算机系统大致分为 4 个部分：</p>\n<ul>\n<li>计算机硬件</li>\n<li>操作系统</li>\n<li>系统程序与应用程序</li>\n<li>用户</li>\n</ul>\n<h3 id=\"计算机系统操作\"><a class=\"anchor\" href=\"#计算机系统操作\">#</a> 计算机系统操作</h3>\n<p>计算机开始运行的时候，通常需要运行一个初始化程序 / 引导程序 (bootstrap program)，通常位于 ROM 或 EEPROM 中，称为计算机硬件中的固件。</p>\n<p>它负责初始化系统中的所有部分，包括：CPU 寄存器， 设备控制器， 内存内容。它必须知道如果装入系统并开始执行系统，定位操作系统内核并把他装入内存，然后操作系统就开始初始化。</p>\n<h3 id=\"中断\"><a class=\"anchor\" href=\"#中断\">#</a> 中断</h3>\n<p>事件的发生通常通过硬件或软件中断 (interrupt) 来表示，硬件可以随时通过系统总线向 CPU 发出信号，触发中断，而软件通过执行特别操作如系统调用 (system call)/ 监视器调用 (monitor call)</p>\n<p>中断是计算机结构的重要组成部分。中断必须将控制转移到合适的中断处理程序，简单的方法就是调用一个通用的子程序检查中断信息，然后调用对应的中断处理程序。</p>\n<p>也可以使用中断处理子程序的指针表，间接地调用，这样就不需要经过其他的中间子程序。通常指针表处于低地址内存，包括了各种设备的中断处理子程序的地址，地址的数组或中断向量 (interrupt vector) 可以通过唯一设备索引号来提供子程序地址。</p>\n<p>中断程序必须负责恢复中断前的状态。</p>\n<h3 id=\"存储结构\"><a class=\"anchor\" href=\"#存储结构\">#</a> 存储结构</h3>\n<p>典型指令执行周期</p>\n<ul>\n<li>从内存中获取指令， 保存在指令寄存器 (instruction register)</li>\n<li>指令被解码，并可能导致从内存获取操作数或将操作数保存在内部寄存器中</li>\n<li>执行指令</li>\n</ul>\n<p>理想情况下， 程序和数据都永久留在内存中，但是这是不可能的，因为</p>\n<ul>\n<li>内存太小</li>\n<li>内存是易失性存储设备</li>\n</ul>\n<p>所以需要辅存 (secondary storage)， 如磁盘 (magnetic disk)， SSD</p>\n<p>存储设备层次：(估计比较老的了)</p>\n<ul>\n<li>寄存器</li>\n<li>高速缓存</li>\n<li>主存</li>\n<li>电子磁盘</li>\n<li>磁盘</li>\n<li>光盘</li>\n<li>磁带</li>\n</ul>\n<h3 id=\"io-结构\"><a class=\"anchor\" href=\"#io-结构\">#</a> I/O 结构</h3>\n<p>通用计算机系统由一个 CPU 和多个设备控制器组成。通过共同的总线连接起来，每个设备控制器负责特定类型的设备，可有多个设备与其相连。</p>\n<p>SCSI (small computer system interface) 控制器可以有 7 个或更多的设备相连。</p>\n<p>设备控制器</p>\n<ul>\n<li>维护一定量的本地缓冲存储和一组特定用途的寄存器</li>\n<li>复制在其控制的外部设备与本地缓冲存储之间进行数据传递</li>\n<li>通常每个设备控制器都有一个设备驱动程序</li>\n</ul>\n<p>I/O 中断驱动 (适合少量的数据)</p>\n<ul>\n<li>设备驱动程序在设备控制器中装载适当的寄存器</li>\n<li>设备控制器检查寄存器状态决定操作</li>\n<li>控制器开始向本地缓冲区传输数据</li>\n<li>设备控制器通过中断通知设备驱动程序已完成操作</li>\n<li>设备驱动程序返回对系统的控制。</li>\n</ul>\n<p>DMA (direct memory access) 直接内存访问</p>\n<p>设备直接写入内存而不需要 CPU 的干预，每一块只产生一个中断。</p>\n<p>交换使得各个部件并发对话而不是在总线上争夺事件，更加地高效</p>\n<h3 id=\"计算机系统体系结构\"><a class=\"anchor\" href=\"#计算机系统体系结构\">#</a> 计算机系统体系结构</h3>\n<ul>\n<li>\n<p>单处理器系统</p>\n<ul>\n<li>只有一个通用 CPU</li>\n<li>还包含其他特定目的微处理器， 用来克服主 CPU 超载问题</li>\n</ul>\n</li>\n<li>\n<p>多处理器系统 (并行系统 Parallel system, 紧耦合系统 tightly coupled system)</p>\n<ul>\n<li>拥有多个紧密通信的 CPU，共享计算机总线，时钟，内存和外设</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>增加吞吐量</li>\n<li>规模经济</li>\n<li>增加可靠性</li>\n</ul>\n</li>\n</ul>\n<p>计算机系统不断增加的可靠性是很关键的，这种能提供与正常工作的硬件成正比的服务的能力称为<strong>适度退化</strong> (graceful degradation)。超出适度退化的能力被称为容错 (fault tolerant)</p>\n<p>多处理器系统主要分为</p>\n<p>非对称多处理 (asymmetric multiprocessing) ： 主从处理器</p>\n<p>对称多处理 (symmetric multiprocessing， SMP)</p>\n<p>概念： 刀片服务器 (blade server) 每个刀片处理器独立启动并运行各自的系统</p>\n<p><strong>集群系统</strong>：</p>\n<p>由两个或多个独立的系统耦合起来的</p>\n<p>通过局域网连接或更快的内部连接 (InfiniBand)</p>\n<p>用途： 提供高可用性 (high availability) 服务</p>\n<p>分类：对称与非对称</p>\n<p>非对称集群 (asymmetric clustering) 中， 一台机器处于热备份状态 (hot standby mode)，另一台运行程序。</p>\n<p>对称集群 (symmetric clustering)，两个或多个主机都运行程序并互相监视。</p>\n<p>还有并行集群和 WAN 集群。</p>\n<p>并行集群中通常需要分布式锁管理器 (distributed lock manager， DLM)</p>\n<h3 id=\"操作系统结构\"><a class=\"anchor\" href=\"#操作系统结构\">#</a> 操作系统结构</h3>\n<p>分时操作系统、多道程序设计</p>\n<p>进程 (process): 装到内存并执行的程序</p>\n<p>作业调度 (job scheduling)： 在储存在磁盘作业池 (job pool) 中与主存中的作业做出决策和安排</p>\n<p>CPU 调度 (CPU scheduling)： 多个任务同时执行</p>\n<p>在分时操作系统中，为了保证合理的相应时间，就需要通过交换来得到。通常使用虚拟内存 (virtual memory) 实现。</p>\n<h3 id=\"操作系统操作\"><a class=\"anchor\" href=\"#操作系统操作\">#</a> 操作系统操作</h3>\n<p>现代操作系统通常是由<strong>中断</strong>驱动的。</p>\n<p>操作系统的合理设计必须确保错误程序 (或恶意程序) 不会造成其他程序执行错误。</p>\n<h4 id=\"双重模式操作\"><a class=\"anchor\" href=\"#双重模式操作\">#</a> 双重模式操作</h4>\n<p>区分操作系统代码和用户自定义代码的执行，通常提供硬件支持以允许区分各种执行模式 (在计算机硬件增加一个模式位 (mode bit) 来区分)</p>\n<ul>\n<li>用户模式 (user mode)</li>\n<li>内核模式：监督程序模式 (monitor mode)[也称为管理模式 (supervisor mode)]、系统模式 (system mode) 或特权模式 (privileged mode)</li>\n</ul>\n<p>只要操作系统获得了对计算机的控制，就处于内核模式。</p>\n<p>某些特权指令 (privileged instruction) 只能在内核模式执行。</p>\n<p>特权指令：可以引起损害的机器指令，如切换到用户模式、I/O 的控制、定时器的管理和中断管理</p>\n<p>系统调用通常采用陷阱到中断向量中的一个指定位置的方式。</p>\n<h4 id=\"定时器\"><a class=\"anchor\" href=\"#定时器\">#</a> 定时器</h4>\n<p>确保操作系统维持对 CPU 的控制，防止用户程序陷入死循环不返回控制权，通常使用定时器 (timer) 定时中断。</p>\n<h3 id=\"进程管理\"><a class=\"anchor\" href=\"#进程管理\">#</a> 进程管理</h3>\n<p>进程：处于执行中的程序</p>\n<p>需要一定的资源</p>\n<p>程序本身不是进程，程序时被动的实体。</p>\n<p>单线程进程具有一个<strong>程序计数器</strong>来明确下一个执行的指令，这样程序的执行必须时连续的。</p>\n<p>进程时系统工作的单元。系统由多个进程组成，其中一些事操作系统进程，其他是用户进程。</p>\n<p>操作系统需要负责：</p>\n<ul>\n<li>创建和删除用户进程和系统进程</li>\n<li>挂起和重启进程</li>\n<li>提供进程同步机制</li>\n<li>提供进程通讯机制</li>\n<li>提供死锁处理机制</li>\n</ul>\n<h3 id=\"内存管理\"><a class=\"anchor\" href=\"#内存管理\">#</a> 内存管理</h3>\n<p>内存是现代计算机操作系统的中心，是 CPU 和 I/O 设备共同快速访问的数据仓库，通常也是 CPU 可以直接寻址和访问的唯一大容量存储器。</p>\n<p>操作系统负责下列有关的内存管理的活动：</p>\n<ul>\n<li>记录内存的哪部分正在被使用和被谁使用</li>\n<li>当有内存空间是，决定哪些进程可以装入内存</li>\n<li>根据需要分配和释放内存空间</li>\n</ul>\n<h3 id=\"存储管理\"><a class=\"anchor\" href=\"#存储管理\">#</a> 存储管理</h3>\n<h4 id=\"文件系统管理\"><a class=\"anchor\" href=\"#文件系统管理\">#</a> 文件系统管理</h4>\n<p>操作系统负责：</p>\n<ul>\n<li>创建和删除文件</li>\n<li>创建和删除目录来组织文件</li>\n<li>提供操作文件和目录的原语</li>\n<li>将文件映射到二级存储上</li>\n<li>在稳定存储介质上备份文件</li>\n</ul>\n<h4 id=\"大容量存储器管理\"><a class=\"anchor\" href=\"#大容量存储器管理\">#</a> 大容量存储器管理</h4>\n<p>操作系统负责：</p>\n<ul>\n<li>空闲空间管理</li>\n<li>存储空间分配</li>\n<li>硬盘调度</li>\n</ul>\n<h4 id=\"高速缓存\"><a class=\"anchor\" href=\"#高速缓存\">#</a> 高速缓存</h4>\n<p>由于高速缓存的大小有限，因此高速缓存管理 (cache management) 的设计就显得十分地重要。</p>\n<p>高速缓存的大小和置换策略的仔细选择可以极大地提高性能.</p>\n<p>高速缓存需要解决<strong>高速缓存一致性</strong> (cache coherency), 这通常是硬件问题。以确保每个进程都得到最近已更新的值</p>\n<h4 id=\"io-系统\"><a class=\"anchor\" href=\"#io-系统\">#</a> I/O 系统</h4>\n<p>操作系统的目的之一： 对用户隐藏具体硬件设备的特性。</p>\n<p>而 I/O 子系统也对操作系统隐藏一些 I/O 设备的特性。只有设备驱动才知道特性。</p>\n<h3 id=\"保护和安全\"><a class=\"anchor\" href=\"#保护和安全\">#</a> 保护和安全</h3>\n<p>保护： 一种控制进程或用户对计算机系统资源的访问的机制</p>\n<p>安全： 防止系统不受外部或内部攻击</p>\n<h3 id=\"分布式系统\"><a class=\"anchor\" href=\"#分布式系统\">#</a> 分布式系统</h3>\n<p>网络， 两个或多个系统之间的通讯路径</p>\n<p>一个网络协议只简单地需要一个接口设备，加上管理他的驱动程序以及按网络协议处理数据的软件</p>\n<p>根据<strong>节点间的距离</strong>来分，网络可以分为</p>\n<ul>\n<li>局域网 (local-area network， LAN)</li>\n<li>广域网 (wide-area network， WAN)</li>\n<li>城域网 (metropolitan-area network，MAN)</li>\n<li>小域网 (small-area network， SAN)</li>\n</ul>\n<p>网络操作系统 (network operating system) 提供了比网络连接更进一步的网络和分布式系统的概念</p>\n<h3 id=\"专用系统\"><a class=\"anchor\" href=\"#专用系统\">#</a> 专用系统</h3>\n<ul>\n<li>实时嵌入式系统</li>\n<li>多媒体系统</li>\n<li>手持系统</li>\n</ul>\n<h3 id=\"计算环境\"><a class=\"anchor\" href=\"#计算环境\">#</a> 计算环境</h3>\n<h4 id=\"传统计算\"><a class=\"anchor\" href=\"#传统计算\">#</a> 传统计算</h4>\n<h4 id=\"客户机-服务器计算\"><a class=\"anchor\" href=\"#客户机-服务器计算\">#</a> 客户机 - 服务器计算</h4>\n<ul>\n<li>计算服务器系统</li>\n<li>文件服务器系统</li>\n</ul>\n<h4 id=\"对等计算\"><a class=\"anchor\" href=\"#对等计算\">#</a> 对等计算</h4>\n<p>对等 (P2P) 系统模式</p>\n<h4 id=\"基于-web-的计算\"><a class=\"anchor\" href=\"#基于-web-的计算\">#</a> 基于 Web 的计算</h4>\n<h2 id=\"第-2-章-操作系统结构\"><a class=\"anchor\" href=\"#第-2-章-操作系统结构\">#</a> 第 2 章 操作系统结构</h2>\n<h3 id=\"操作系统服务\"><a class=\"anchor\" href=\"#操作系统服务\">#</a> 操作系统服务</h3>\n<p>操作系统提供给用户的常用函数：</p>\n<ul>\n<li>用户界面 (user interface, UI)：\n<ul>\n<li>命令行界面 (command-line interface, CLI)</li>\n<li>批界面 (batch interface)，不常见</li>\n<li>图形用户界面 (graphical user interface, GUI)</li>\n</ul>\n</li>\n<li>程序执行</li>\n<li>I/O 操作</li>\n<li>文件系统操作</li>\n<li>通信： 一个进程与另一个进程进行交换信息，可以通过<strong>共享内存</strong>或<strong>信息交换</strong>来实现</li>\n<li>错误检测</li>\n</ul>\n<p>确保系统高效运行的函数：</p>\n<ul>\n<li>资源分配：\n<ul>\n<li>如，CPU 周期， 内存，文件储存：需要特别的分配代码</li>\n<li>如， I/O 设备：只需要通用的请求和释放代码</li>\n</ul>\n</li>\n<li>统计 (accounting)</li>\n<li>保护和安全</li>\n</ul>\n<h3 id=\"操作系统的用户界面\"><a class=\"anchor\" href=\"#操作系统的用户界面\">#</a> 操作系统的用户界面</h3>\n<h4 id=\"命令解释程序command-interpreters\"><a class=\"anchor\" href=\"#命令解释程序command-interpreters\">#</a> 命令解释程序 (Command Interpreters)</h4>\n<p>获取并执行用户指定的下一条命令</p>\n<p>有两种常用的方法:</p>\n<ul>\n<li>命令解释程序本身包含代码以执行这些命令</li>\n<li>由系统程序实现绝大多数命令，命令解释程序只需要调用</li>\n</ul>\n<h4 id=\"图形用户界面graphical-user-interfaces\"><a class=\"anchor\" href=\"#图形用户界面graphical-user-interfaces\">#</a> 图形用户界面 (Graphical User Interfaces)</h4>\n<p>提供基于鼠标的窗口和菜单系统作为接口</p>\n<ul>\n<li>Usually mouse, keyboard, and monitor</li>\n<li>Icons represent files, programs, actions, etc</li>\n<li>Various mouse buttons over objects in the interface cause various actions (provide information, options, execute function, open directory (known as a folder)</li>\n<li>Invented at Xerox PARC</li>\n</ul>\n<h3 id=\"系统调用system-calls\"><a class=\"anchor\" href=\"#系统调用system-calls\">#</a> 系统调用 (System Calls)</h3>\n<p>提供了操作系统提供的有效服务界面</p>\n<p>Mostly accessed by programs via a high-level Application Program Interface (API) rather than direct system call use</p>\n<p>程序通过高层应用程序接口访问，而不是直接调用系统的调用</p>\n<p>常用的 API：</p>\n<ul>\n<li>Win32 API</li>\n<li>POSIX API (包括几乎所有 UNIX、Linux 和 Mac OS X)</li>\n<li>Java API</li>\n</ul>\n<p>向系统传递参数的方法：</p>\n<ul>\n<li>通过寄存器</li>\n<li>存在内存的块或表中</li>\n<li>放在或压入堆栈中</li>\n</ul>\n<h3 id=\"系统调用类型\"><a class=\"anchor\" href=\"#系统调用类型\">#</a> 系统调用类型</h3>\n<ul>\n<li>进程控制 Process control\n<ul>\n<li>end, abort</li>\n<li>load, execute</li>\n<li>create process, terminate process</li>\n<li>get process attributes, set process attributes</li>\n<li>wait for time</li>\n<li>wait event, signal event</li>\n<li>allocate and free memory</li>\n</ul>\n</li>\n<li>文件管理 File management\n<ul>\n<li>create file, delete file</li>\n<li>open, close</li>\n<li>read, write, reposition (重定位)</li>\n<li>get file attributes, set file attributes</li>\n</ul>\n</li>\n<li>设备管理 Device management\n<ul>\n<li>request device, release device</li>\n<li>read, write, reposition</li>\n<li>get device attributes, set device attributes</li>\n<li>logically attach or detach devices（逻辑连接或断开设备）</li>\n</ul>\n</li>\n<li>信息维护 Information maintenance\n<ul>\n<li>get time or date, set time or date</li>\n<li>get system data, set system data</li>\n<li>get process, file, or device attributes</li>\n<li>set process, file, or device attributes</li>\n</ul>\n</li>\n<li>通信 Communications\n<ul>\n<li>create, delete communication connection</li>\n<li>send, receive message</li>\n<li>transfer status information</li>\n<li>attach or detach remote devices</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"进程控制\"><a class=\"anchor\" href=\"#进程控制\">#</a> 进程控制</h4>\n<ul>\n<li>运行程序需要能正常或非正常地中断其执行 (end 或 abort)</li>\n<li>当发生错误的时候，就会由内存信息转储 (dump of memory) 并产生一个错误信息</li>\n<li>装入和执行另一个程序</li>\n<li>如果新程序终止时控制权返回到现有程序，那么需要保存现有程序的内存映像</li>\n<li>创建新的作业或线程，需要可以控制他的执行，能决定和重置进程或作业的属性 (优先级、最大允许执行时间)</li>\n<li>等待作业或进程执行</li>\n<li>提供转储内存信息的系统调用，帮助调试</li>\n<li>提供程序的时间表</li>\n<li>单任务与多任务系统的控制</li>\n</ul>\n<h4 id=\"设备管理\"><a class=\"anchor\" href=\"#设备管理\">#</a> 设备管理</h4>\n<p>I/O 设备和文件非常相似，在 UNIX 中将这两者合并为<strong>文件 - 设备结构</strong></p>\n<h4 id=\"通讯\"><a class=\"anchor\" href=\"#通讯\">#</a> 通讯</h4>\n<p>通讯模型：</p>\n<ul>\n<li>消息传递模型 (message-passing model)</li>\n<li>共享内存模型 (shared-memory model)</li>\n</ul>\n<h3 id=\"系统程序\"><a class=\"anchor\" href=\"#系统程序\">#</a> 系统程序</h3>\n<p>可以分为：</p>\n<ul>\n<li>文件管理 File manipulation</li>\n<li>状态信息 Status information</li>\n<li>文件修改 File modification</li>\n<li>程序语言支持 Programming language support</li>\n<li>程序装入和执行 Program loading and execution</li>\n<li>通讯 Communications</li>\n<li>应用程序 Application programs</li>\n</ul>\n<h3 id=\"操作系统设计和实现\"><a class=\"anchor\" href=\"#操作系统设计和实现\">#</a> 操作系统设计和实现</h3>\n<h4 id=\"设计目标\"><a class=\"anchor\" href=\"#设计目标\">#</a> 设计目标</h4>\n<p>定义系统的目标和规格</p>\n<p>系统类型：批处理、 分时、 单用户、 多用户、 分布式、 实时、 通用目标</p>\n<p>两个基本类： 用户目标和系统目标</p>\n<h4 id=\"机制mechanism和策略policy\"><a class=\"anchor\" href=\"#机制mechanism和策略policy\">#</a> 机制（mechanism）和策略（policy）</h4>\n<p>区分机制和策略对于灵活性很重要</p>\n<ul>\n<li>机制决定如何做</li>\n<li>策略决定做什么，策略可能随时间或位置而有所改变。</li>\n</ul>\n<h4 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h4>\n<p>现代操作系统一般都是用高级语言编写， 如 C 或 C++</p>\n<p>代码编写更快， 更为紧凑，容易理解和调试。</p>\n<p>缺点仅仅为降低了速度和增加了存储要求</p>\n<h3 id=\"操作系统结构-2\"><a class=\"anchor\" href=\"#操作系统结构-2\">#</a> 操作系统结构</h3>\n<h4 id=\"简单结构\"><a class=\"anchor\" href=\"#简单结构\">#</a> 简单结构</h4>\n<p>MS-DOS：并没有很好区分接口和功能层次，应用程序可以直接访问基本的 I/O。</p>\n<p>UNIX： 由内核和系统程序组成， 物理硬件之上和系统调用接口之下的所有部分都是内核， 这一单一的结构使 UNIX 难以增强</p>\n<h4 id=\"分层方法-layered\"><a class=\"anchor\" href=\"#分层方法-layered\">#</a> 分层方法 Layered</h4>\n<p>采用自顶向下方法，可先确定总的功能和特征，再划分模块</p>\n<p>使用分层法来模块化，最底层 (层 0) 是硬件层，最高层 (层 N) 为用户接口</p>\n<p>主要优点： 构造和调试的简单化，每层只能调用较低层的功能和服务。</p>\n<p>主要困难：对层的详细定义较难， 效率稍差。</p>\n<h4 id=\"微内核-microkernel\"><a class=\"anchor\" href=\"#微内核-microkernel\">#</a> 微内核 Microkernel</h4>\n<p>将非基本部分从内核移走</p>\n<p>微内核通常包括最小的进程和内存管理以及通讯功能。</p>\n<p>主要功能：使用户程序和运行在用户空间的各种服务之间进行通讯（利用消息传递）</p>\n<p>好处：</p>\n<ul>\n<li>便于扩充操作系统</li>\n<li>容易移植操作系统到新结构中</li>\n<li>更加可靠（在内核模式下运行的代码少）</li>\n<li>更加安全</li>\n</ul>\n<p>缺点：由于系统功能总开销的增加而导致系统性能的下降</p>\n<h4 id=\"模块-modules\"><a class=\"anchor\" href=\"#模块-modules\">#</a> 模块 Modules</h4>\n<p>模块化的内核：</p>\n<ul>\n<li>使用面向对象 (object-oriented) 方法</li>\n<li>每个核心组件分离</li>\n<li>模块通过接口 (interfaces) 互相调用</li>\n<li>每个模块都作为内核中的可加载模块</li>\n</ul>\n<p>类似于分层，但是更灵活</p>\n<p>Solaris 系统：</p>\n<ul>\n<li>核心内核 core Kernel\n<ul>\n<li>调度类 scheduling classes</li>\n<li>文件系统 file systems</li>\n<li>可加载的系统调用 loadable system calls</li>\n<li>可执行格式 executable formats</li>\n<li>STREAMS 模块 STREAMS modules</li>\n<li>杂项模块 miscellaneous modules</li>\n<li>设备和总线驱动 device and bug drivers</li>\n</ul>\n</li>\n</ul>\n<p>Mac OS X， 混合结构：</p>\n<ul>\n<li>程序 -&gt;BSD-&gt;Mach</li>\n<li>程序 -&gt;Mach</li>\n</ul>\n<h4 id=\"虚拟机\"><a class=\"anchor\" href=\"#虚拟机\">#</a> 虚拟机</h4>\n<p>提供与基本硬件相同的接口</p>\n<p>虚拟用户模式和虚拟内核模式运行在物理用户模式</p>\n<p>优点：</p>\n<ul>\n<li>不同的系统资源具有完全的保护\n<ul>\n<li>可以通过共享磁盘或虚拟机网络通讯</li>\n</ul>\n</li>\n<li>研究和开发操作系统</li>\n</ul>\n<p>实例</p>\n<ul>\n<li>VMware\n<ul>\n<li>将 Intel 80x86 硬件抽象为独立的虚拟机</li>\n</ul>\n</li>\n<li>Java 虚拟机（JVM）\n<ul>\n<li><strong>类加载器</strong> ： 从 Java 程序和 Java API 中加载编译过的.class 文件</li>\n<li>执行与平台无关的字节码 Java 解释器</li>\n<li>JIT (just-in-time)，可以在第一次调用 Java 方法时，转换为本地机器语言，加快运行速度。</li>\n</ul>\n</li>\n<li>CLR（.Net 的核心，公共语言运行时）</li>\n</ul>\n<h3 id=\"系统生成\"><a class=\"anchor\" href=\"#系统生成\">#</a> 系统生成</h3>\n<p>System generation， SYSGEN</p>\n<p>配置和生成系统</p>\n<p>需要确定的信息：</p>\n<ul>\n<li>CPU</li>\n<li>内存</li>\n<li>可用设备及其具体调用信息</li>\n<li>系统选项的参数</li>\n</ul>\n<p>生成方法（区别在于大小和通用性，以及硬件变化进行修改的方便性）：</p>\n<ul>\n<li>系修改源代码，重新编译</li>\n<li>从预先编译的库中选择模块，将表格连接起来形成操作系统</li>\n<li>由表驱动，在运行时选择适当的模块（大多数现代操作系统）</li>\n</ul>\n<h3 id=\"系统启动\"><a class=\"anchor\" href=\"#系统启动\">#</a> 系统启动</h3>\n<h4 id=\"过程\"><a class=\"anchor\" href=\"#过程\">#</a> 过程</h4>\n<ul>\n<li>加电</li>\n<li>运行初始化程序 (或引导程序，在 ROM 中)\n<ul>\n<li>初始化 CPU 寄存器，设备控制器到内存</li>\n</ul>\n</li>\n<li>引导程序装入操作系统内核到内存</li>\n<li>操作系统执行第一个进程 init，并等待某些事件发生</li>\n<li>若事件发生，则进入该事件处理程序</li>\n</ul>\n<p>个人计算机中：一个简单的引导程序从磁盘调用一个较复杂的引导程序，再装入内核</p>\n<p>CPU 重置：从 ROM 中，指令寄存器被重新加载，并开始执行。（此时 RAM 处于未知状态）</p>\n<p>有些系统在 ROM 中保存完整的操作系统</p>\n<h1 id=\"第二部分-进程管理\"><a class=\"anchor\" href=\"#第二部分-进程管理\">#</a> 第二部分 进程管理</h1>\n<h2 id=\"第-3-章-进程\"><a class=\"anchor\" href=\"#第-3-章-进程\">#</a> 第 3 章 - 进程</h2>\n<p>操作系统负责进程和线程管理：</p>\n<ul>\n<li>用户进程和系统进程的创建和删除</li>\n<li>进程调度</li>\n<li>提供进程同步机制</li>\n<li>进程通信机制</li>\n<li>进程死锁处理机制</li>\n</ul>\n<h3 id=\"进程processes\"><a class=\"anchor\" href=\"#进程processes\">#</a> 进程（Processes）</h3>\n<p>正在执行的程序，需要一定的资源来完成任务。是大多数系统的工作单元。</p>\n<p>程序本身不是进程，程序只是被动实体，进程是活动实体</p>\n<p>一个程序包括：</p>\n<ul>\n<li>program counter</li>\n<li>stack</li>\n<li>data section</li>\n</ul>\n<p>内存分配：</p>\n<ul>\n<li>栈段：编译时设定，由操作系统分配和释放，保存函数参数和返回地址和局部变量等</li>\n<li>堆区：由程序员分配释放</li>\n<li>数据段：全局区、静态区和常量区</li>\n<li>程序代码段：二进制代码</li>\n</ul>\n<h4 id=\"进程状态\"><a class=\"anchor\" href=\"#进程状态\">#</a> 进程状态</h4>\n<ul>\n<li>New</li>\n<li>Running</li>\n<li>Waiting / Blocked\n<ul>\n<li>Blocked Suspend</li>\n</ul>\n</li>\n<li>Ready\n<ul>\n<li>Ready Suspend</li>\n</ul>\n</li>\n<li>Terminated / Exit</li>\n</ul>\n<p>每次只有一个进程可以在一个处理器上运行，但多个进程可处于就绪或等待状态。</p>\n<h4 id=\"进程控制块\"><a class=\"anchor\" href=\"#进程控制块\">#</a> 进程控制块</h4>\n<p>Process control block， PCB， 也称任务控制块（信息的仓库）</p>\n<p>包括：</p>\n<ul>\n<li>进程状态</li>\n<li>程序计数器</li>\n<li>CPU 寄存器</li>\n<li>CPU 调度信息\n<ul>\n<li>优先级</li>\n<li>调度队列的指针</li>\n<li>其他调度参数</li>\n</ul>\n</li>\n<li>内存管理信息\n<ul>\n<li>基址</li>\n<li>界限寄存器的值</li>\n<li>页表</li>\n<li>段表</li>\n</ul>\n</li>\n<li>记账信息\n<ul>\n<li>CPU 时间</li>\n<li>实际使用时间</li>\n<li>时间界限</li>\n<li>记账数据</li>\n<li>作业或进程数量</li>\n</ul>\n</li>\n<li>I/O 状态信息\n<ul>\n<li>I/O 设备列表</li>\n<li>打开的文件列表</li>\n</ul>\n</li>\n</ul>\n<p>CPU 通过保存 PCB 来进行进程间的切换</p>\n<h4 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h4>\n<p>进程可以一次执行多个线程</p>\n<h3 id=\"进程调度\"><a class=\"anchor\" href=\"#进程调度\">#</a> 进程调度</h3>\n<p>选择一个可用的进程到 CPU 上执行</p>\n<h4 id=\"调度队列\"><a class=\"anchor\" href=\"#调度队列\">#</a> 调度队列</h4>\n<p>通常用链表实现。</p>\n<ul>\n<li>作业队列：Job queue - set of all processes in the system</li>\n<li>就绪队列：Ready queue - set of all processes residing in main memory, ready and waiting to execute</li>\n<li>设备队列：Device queue - set of processes waiting for an I/O device\n<ul>\n<li>等待特定 I/O 设备的进程列表称为设备队列，每个设备都有自己的设备队列。</li>\n</ul>\n</li>\n</ul>\n<p>操作系统在多个队列之间切换</p>\n<p>Linux 中的进程控制块 (PCB) 中是通过结构体表示，包含以下信息</p>\n<ul>\n<li>进程 id</li>\n<li>进程的状态</li>\n<li>调度和内存管理信息</li>\n<li>打开文件列表</li>\n<li>指向父进程和所有子进程的指针</li>\n</ul>\n<p>我们通常使用队列图表示进程调度：</p>\n<ul>\n<li>长方形：队列（就绪队列 / 设备队列）</li>\n<li>圆形：队列服务的资源</li>\n<li>箭头：系统内进程的流向</li>\n</ul>\n<p>当进程分配到 CPU 并执行的时候，可能发生下面几种事件中的一种：</p>\n<ul>\n<li>进程发出一个 I/O 请求，并放入到 I/O 队列中</li>\n<li>进程创建一个新的子进程，并等待其结束</li>\n<li>进程由于中断强制释放 CPU，并被返回就绪队列中</li>\n</ul>\n<h4 id=\"调度程序scheduler\"><a class=\"anchor\" href=\"#调度程序scheduler\">#</a> 调度程序（Scheduler）</h4>\n<p>长期调度程序（long-term scheduler）/ 作业调度程序（job scheduler）：从池中选择进程，<strong>装入内存</strong>准备执行。（创建进程的平均速度必须等于进程离开系统的平均速度，必须<strong>合理分配 I/O 和 CPU 密集</strong>类程序）</p>\n<p>短期调度程序（short-term scheduler）/ CPU 调度程序：准备执行的进程中选择进程，并为之<strong>分配 CPU</strong>。（通常 100ms 执行一次，比较重视速度）</p>\n<p>中期调度程序（medium-term scheduler） 将进程从内存（或 CPU 竞争）中<strong>移出</strong>，之后可以<strong>重新调入</strong>内存（进入就绪队列），并从中断处继续执行，称为<strong>交换（swapping）</strong>。</p>\n<h4 id=\"上下文切换context-switch\"><a class=\"anchor\" href=\"#上下文切换context-switch\">#</a> 上下文切换（Context switch）</h4>\n<p>当发生一个中断时，系统需要保存当前运行在 CPU 中进程的上下文，从而在其处理完能恢复上下文。</p>\n<p>进程上下文用 PCB 表示，包括：CPU 寄存器的值、进程状态、内存管理信息。</p>\n<p>通过执行一个 <strong>状态保存</strong> （state save）保存 CPU 当前状态</p>\n<p>通过执行一个 <strong>状态恢复</strong> （state restore）重新开始运行</p>\n<p>硬件支持：有的处理器提供多组寄存器集合，上下文切换只需改变当前寄存器组的指针</p>\n<h3 id=\"进程操作\"><a class=\"anchor\" href=\"#进程操作\">#</a> 进程操作</h3>\n<h4 id=\"进程创建\"><a class=\"anchor\" href=\"#进程创建\">#</a> 进程创建</h4>\n<p>进程在执行过程中，能通过 <strong>创建进程系统调用</strong> (Create-process system call) 创建多个新进程。</p>\n<p>创建进程成为父进程，新进程成为子进程，形成<strong>进程树</strong>。</p>\n<p><strong>子进程</strong>可能从操作系统直接获取资源，也可能只从父进程获取资源。</p>\n<p><strong>父进程</strong>可能必须在其子进程之间分配资源或共享资源，限制子进程只能使用父进程的资源可以防止创建过多的进程带来的系统超载。</p>\n<p>进程创建的初始化数据（或输入）由父进程传递给子进程。</p>\n<p>创建新进程：</p>\n<ul>\n<li>父进程与子进程<strong>并发</strong>执行</li>\n<li>父进程<strong>等待</strong>，直到某个或全部子进程执行完。</li>\n</ul>\n<p>新进程的地址空间:</p>\n<ul>\n<li>\n<p>子进程是父进程的</p>\n<p>复制品</p>\n<p>(duplicate)</p>\n<ul>\n<li>具有相同的程序和数据</li>\n</ul>\n</li>\n<li>\n<p>子进程装入另一个<strong>新程序</strong></p>\n</li>\n</ul>\n<h5 id=\"unix-中\"><a class=\"anchor\" href=\"#unix-中\">#</a> UNIX 中</h5>\n<p>通过 <code>fork()</code>  创建新进程。新进程通过复制原来进程的地址空间而成。</p>\n<p>对于新进程，系统调用 <code>fork()</code>  返回值为 0，对于父进程，返回值为子进程的进程标识符。</p>\n<p>在 <code>fork()</code>  之后，一个进程使用 <code>exec()</code> ，可以用新程序来取代进程的内存空间。</p>\n<p>这样两个进程就可以互相通信并可以通过各自的方式执行。</p>\n<p>如果子进程运行时没有什么可以做，那么就可以采用 <code>wait()</code>  把自己移出就绪队列来<strong>等待子进程</strong>的终止。</p>\n<p>Copy</p>\n<pre><code>#include &lt;sys/types.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nvoid main(int argc, char *argv[]) &#123;\n    pid_t pid;\n    pid = fork();\n\n    if (pid &lt; 0) &#123;\n        fprintf(stderr, &quot;Fork Failed&quot;);\n        exit(-1);\n    &#125; else if (pid == 0) &#123;\n        execlp(&quot;/bin/ls&quot;, &quot;ls&quot;, NULL);\n    &#125; else &#123;\n        wait(NULL);\n        printf(&quot;Child Complete&quot;);\n        exit(0);\n    &#125;\n&#125;\n</code></pre>\n<p>PS:  <code>Copy on write</code> : 需要写的时候才发生内存复制。</p>\n<h5 id=\"windows-中\"><a class=\"anchor\" href=\"#windows-中\">#</a> Windows 中</h5>\n<p>使用 <code>Win32 API</code>  中的 <code>CreateProcess()</code>  函数， 执行时，函数将一个特殊程序装入子进程的地址空间。需要至少 10 个参数。</p>\n<pre><code>CreateProcess()` 需要两个参数`STARTUPINFO` 和 `PROCESS_INFORMATION\n</code></pre>\n<p><code>STARTUPINFO</code>  指明新进程的许多特性，如窗口大小、标准输入及输出文件句柄</p>\n<p><code>PROCESS_INFORMATION</code>  包括一个句柄以及新生成进程和线程的标识</p>\n<p>调用前，需要使用 <code>ZeroMenory()</code>  为这两个结构清空内存</p>\n<pre><code>Win32 API`相对于`Linux` 的`wait()`是`WaitForSingleObject()\n</code></pre>\n<h4 id=\"进程终止\"><a class=\"anchor\" href=\"#进程终止\">#</a> 进程终止</h4>\n<p>当进程执行完调用 <code>exit()</code>  后，进程终止，返回状态值到父进程，所有进程资源被释放。</p>\n<p>父进程通过<strong>标识符</strong>使用适当的系统调用也可以终止子进程。</p>\n<p>对于某些系统当父进程终止的时候，子进程也会被终止，而某些系统父进程终止后，子进程会以 <code>init</code>  进程作为父进程。</p>\n<h3 id=\"进程间通信\"><a class=\"anchor\" href=\"#进程间通信\">#</a> 进程间通信</h3>\n<p>并发执行的进程可以分为<strong>独立进程</strong>和<strong>协作进程</strong></p>\n<p>独立进程： 不能影响其他进程或被其他进程所影响， 不与任何其他进程共享数据</p>\n<p>协作进程： 能影响其他进程或被其他进程所影响， 与任何其他进程共享数据</p>\n<p>提供环境允许进程协作的优点:</p>\n<ul>\n<li>信息共享 Information sharing</li>\n<li>提高运算速度 Computation seed-up： 把特定任务分成子任务并发执行</li>\n<li>模块化 Modularity： 将系统功能分成独立的进程或线程</li>\n<li>方便 Convenience： 单用户也可以同时执行多任务</li>\n</ul>\n<p>协作进程需要一种进程间通信机制（interprocess communication, IPC）来允许进程相互交换数据与信息。</p>\n<p>两种基本通信模式:</p>\n<ul>\n<li>共享内存\n<ul>\n<li>更快的速度</li>\n</ul>\n</li>\n<li>信息传递\n<ul>\n<li>更方便</li>\n<li>交换少量数据</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"共享内存系统\"><a class=\"anchor\" href=\"#共享内存系统\">#</a> 共享内存系统</h4>\n<p>生产者进程产生信息以供消费者进程消费，共享内存时解决<strong>生产者 - 消费者</strong>问题方法中的一种。</p>\n<p>有两种缓冲方式：</p>\n<ul>\n<li>无限缓冲（unbounded-buffer）：消费者可能不得不等待新的项， 生产者总是可以产生新项。</li>\n<li>有限缓冲（bounded-buffer）：缓冲大小固定，如果缓冲为空，消费者等待，如果缓冲为满，生产者等待。</li>\n</ul>\n<p>生产者进程：</p>\n<p>Copy</p>\n<pre><code>item nextProduced\n\nwhile (true) &#123;\n\twhere(((in + 1) % BUFFER_SIZE) == out); // 当缓冲满了的时候必须等待\n\tbuffer[in] = nextProduced;\n\tin = (in + 1) % BUFFER_SIZE;\n&#125;\n</code></pre>\n<p>消费者进程:</p>\n<p>Copy</p>\n<pre><code>item nextConsumed\nwhile (true) &#123;\n\twhile (in == out); // 当缓冲为空的时候必须等待\n\tnextConsumed = buffer[out];\n\tout = (out + 1) % BUFFER_SIZE;\n&#125;\n</code></pre>\n<h3 id=\"操作系统服务-2\"><a class=\"anchor\" href=\"#操作系统服务-2\">#</a> 操作系统服务</h3>\n<h4 id=\"消息传递系统-ipc\"><a class=\"anchor\" href=\"#消息传递系统-ipc\">#</a> 消息传递系统 IPC</h4>\n<p>常用于分布式环境中，如 Web</p>\n<p>消息传递提供一种机制允许进程不必通过共享地址空间来实现通讯与同步</p>\n<p>通信需要有通信线路（communication link）</p>\n<p>通讯线路的实现：</p>\n<ul>\n<li>物理：共享内存、硬件总线</li>\n<li>逻辑：逻辑属性 properties</li>\n</ul>\n<p>逻辑实现线路和发送接收操作的方法：</p>\n<ul>\n<li>直接或间接通信</li>\n<li>同步或异步通信</li>\n<li>自动或显式缓冲</li>\n</ul>\n<h5 id=\"命名\"><a class=\"anchor\" href=\"#命名\">#</a> 命名</h5>\n<p>对于直接通信：</p>\n<p>对称寻址：</p>\n<ul>\n<li><code>send(P, message)</code>  : 发送信息到进程 P</li>\n<li><code>receive(Q, message)</code>  : 接受来自进程 Q 的信息</li>\n</ul>\n<p>属性：</p>\n<ul>\n<li>每对需要通信的进程之间自动建立线路，进程仅需知道相互通信的标识符</li>\n<li>一个线路只与两个进程相关</li>\n<li>每对进程之间只有一个线路</li>\n</ul>\n<p>非对称寻址：</p>\n<ul>\n<li><code>send(P, message)</code>  : 发送信息到进程 P</li>\n<li><code>receive(id, message)</code> : 接受来自任何进程的信息，id 设置成与其通信的进程名称</li>\n</ul>\n<p>这两种寻址方式的缺点在于限制了进程定义的模式化，改变进程名字需要检查其他所有进程的定义。</p>\n<p>对于间接通信：</p>\n<p>通过邮箱和端口来发送或接受信息。</p>\n<p>一个进程可能通过许多不同的邮箱与其他进程通信，但两个进程仅在其共享至少一个邮箱时可以相互通信。</p>\n<ul>\n<li><code>send(A, message)</code>  ： 发送一个消息到邮箱 A</li>\n<li><code>receive(A, message)</code>  : 接受来自邮箱 A 的消息</li>\n</ul>\n<p>对于这种方案，通信线路有如下属性：</p>\n<ul>\n<li>只有在两个进程共享一个邮箱，才能建立通信线路</li>\n<li>一个线路可以与两个或更多的进程相关联</li>\n<li>两个通信进程之间可有多个不同的线路，每个线路对于一个邮箱</li>\n<li>连接可能是单向 <code>unidirectional</code>  或者双向 <code>bi-directional</code></li>\n</ul>\n<p>操作系统需提供的机制：</p>\n<ul>\n<li>创建新邮箱</li>\n<li>通过邮箱发送和接受消息</li>\n<li>删除邮箱</li>\n</ul>\n<p>邮箱的拥有权和接受权可以通过系统调用传递给其他进程。</p>\n<h5 id=\"同步\"><a class=\"anchor\" href=\"#同步\">#</a> 同步</h5>\n<p>消息传递可以时阻塞或非阻塞（同步或异步）</p>\n<ul>\n<li>阻塞 send： 发送进程阻塞， 直到消息被接受进程或邮箱所接受</li>\n<li>非阻塞 send： 发送进程发送消息并再继续操作</li>\n<li>阻塞 receive： 接收者阻塞， 直到有消息可用</li>\n<li>非阻塞 receive： 接收者收到一个有效信息或空信息</li>\n</ul>\n<p>当 <code>send()</code>  和  <code>receive()</code>  都阻塞， 发送者和接收者之间就有一个 <code>集合点（rendezvous）</code></p>\n<h5 id=\"缓冲\"><a class=\"anchor\" href=\"#缓冲\">#</a> 缓冲</h5>\n<ul>\n<li>无缓冲\n<ul>\n<li>零容量：阻塞</li>\n</ul>\n</li>\n<li>自动缓冲\n<ul>\n<li>有限容量： 线路满后阻塞</li>\n<li>无限容量： 不阻塞</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"客户机-服务器系统通信\"><a class=\"anchor\" href=\"#客户机-服务器系统通信\">#</a> 客户机 - 服务器系统通信</h3>\n<p>除了共享内存和消息传递，还有三种通信方法： Socket、远程过程调用（RPC）和 Java 的远程方法调用（RMI）</p>\n<h4 id=\"socket\"><a class=\"anchor\" href=\"#socket\">#</a> Socket</h4>\n<p>Socket（套接字）可定义为通信的端点。一对通过网络通信的进程需要使用一对 Socket（即每个进程各有一个）。</p>\n<p>Socket 由 IP 地址和一个端口号连接组成</p>\n<p>服务器通过 <strong>监听制定端口</strong> 来等待进来的客户请求， 一旦受到请求， 就接受来自客户 Socket 的连接， 从而完成连接。</p>\n<p>Java 提供了三种不同类型的 Socket</p>\n<ul>\n<li>面向连接（TCP）Socket： Socket 类</li>\n<li>无连接（UDP）Socket： DatagramSocket 类</li>\n<li>多点传送 Socket： DatagramSocket 的子类（允许数据发送到多个接收者）</li>\n</ul>\n<p>使用 Socket 通信，虽然常用和高效， 但是属于较为低级的分布式进程通信。原因之一在于 Socket 只允许在通信进程之间交换 ** 无结构的字节流 **</p>\n<h4 id=\"远程过程调用\"><a class=\"anchor\" href=\"#远程过程调用\">#</a> 远程过程调用</h4>\n<p>Remote Procedure Calls, RPC</p>\n<p>RPC 抽象层远程调用机制，用于通过网络连接系统</p>\n<p>存根 Stubs： 用于服务器上的实际程序的客户端代理</p>\n<p>客户端使用存根定位服务器，并提供参数</p>\n<p>服务器接收信息，解析后运行指定的程序</p>\n<h2 id=\"第-4-章-线程\"><a class=\"anchor\" href=\"#第-4-章-线程\">#</a> 第 4 章 线程</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>线程是 CPU 使用的基本单元。它与属于同一进程的其他线程共享代码段、数据段和其他操作系统资源。</p>\n<p>组成：</p>\n<ul>\n<li>线程 ID</li>\n<li>程序计数器</li>\n<li>寄存器集合</li>\n<li>栈</li>\n</ul>\n<h4 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h4>\n<ul>\n<li>响应度高：即使部分阻塞，程序也能继续执行，从而增加了对用户的相应速度</li>\n<li>资源共享：线程默认共享他们所属的进程的内存和资源</li>\n<li>经济：进程创建所需要的内存和资源的分配比较昂贵，创建和切换线程比较经济</li>\n<li>多处理器体系结构的利用：多线程可以并行在不同的 CPU 上</li>\n</ul>\n<h3 id=\"多线程模型\"><a class=\"anchor\" href=\"#多线程模型\">#</a> 多线程模型</h3>\n<p>有两种不同方法提供线程支持：</p>\n<ul>\n<li>用户层的用户线程</li>\n<li>内核层的内核线程（由操作系统直接支持和管理）</li>\n</ul>\n<h4 id=\"多对一模型\"><a class=\"anchor\" href=\"#多对一模型\">#</a> 多对一模型</h4>\n<p>将许多用户级线程映射到一个内核线程。</p>\n<p>线程管理是由线程库在用户空间进行的，因而<strong>效率比较高</strong></p>\n<h4 id=\"一对一模型\"><a class=\"anchor\" href=\"#一对一模型\">#</a> 一对一模型</h4>\n<p>将每个用户线程映射到一个内核线程</p>\n<p>开销比较大</p>\n<h4 id=\"多对多模型\"><a class=\"anchor\" href=\"#多对多模型\">#</a> 多对多模型</h4>\n<p>开发人员可以创建任意多的用户线程，并且相应内核线程能在多处理器系统上并发执行。</p>\n<p>并且在一个线程执行阻塞系统调用的时候，内核能调度另一个线程来执行。</p>\n<h4 id=\"二级模型\"><a class=\"anchor\" href=\"#二级模型\">#</a> 二级模型</h4>\n<p>类似于多对多模型，二级模型还允许用户线程绑定在一个内核线程里面</p>\n<h3 id=\"线程库\"><a class=\"anchor\" href=\"#线程库\">#</a> 线程库</h3>\n<p>为程序员提供创建和管理线程的 API</p>\n<p>两种方法:</p>\n<ul>\n<li>在用户空间提供一个没有内核支持的库</li>\n<li>执行一个由操作系统直接支持额内核级的库</li>\n</ul>\n<h3 id=\"多线程问题\"><a class=\"anchor\" href=\"#多线程问题\">#</a> 多线程问题</h3>\n<h4 id=\"系统调用-fork和-exec\"><a class=\"anchor\" href=\"#系统调用-fork和-exec\">#</a> 系统调用 fork () 和 exec ()：</h4>\n<p>fork:</p>\n<ul>\n<li>可以复制所有线程</li>\n<li>仅仅复制调用 fork 系统调用的线程</li>\n</ul>\n<p>exec:</p>\n<p>如果一个线程调用 exec ()，那么整个进程都会被替换</p>\n<p>如果 fork 后立即调用 exec，那么就没有必要复制所有线程</p>\n<h4 id=\"线程取消-thread-cancellation\"><a class=\"anchor\" href=\"#线程取消-thread-cancellation\">#</a> 线程取消 Thread Cancellation</h4>\n<p>在线程执行完成后中止</p>\n<p>取消方法：</p>\n<ul>\n<li>异步取消 (asynchronous cancellation)：立即终止目标线程</li>\n<li>延迟取消 (deferred cancellation)：允许目标线程周期性地检查是否应该取消该线程，这些检查点称为取消点 (cancellation point)</li>\n</ul>\n<h4 id=\"信号处理-signal-handling\"><a class=\"anchor\" href=\"#信号处理-signal-handling\">#</a> 信号处理 Signal Handling</h4>\n<p>信号处理程序用于通知进程某个特性事件发生了</p>\n<p>可以为同步或异步接收</p>\n<p>模式：</p>\n<ul>\n<li>信号是由特定事件产生的</li>\n<li>生成的信号传递到进程</li>\n<li>一旦发送，信号必须加以处理</li>\n</ul>\n<p>信号的处理：</p>\n<ul>\n<li>默认的信号处理程序 (default signal handler)</li>\n<li>用户定义的信号处理程序</li>\n</ul>\n<p>信号发送的选择（依赖于信号的类型）：</p>\n<ul>\n<li>将信号传递到信号<strong>所应用的线程</strong></li>\n<li>将信号传递给进程中的<strong>每个线程</strong></li>\n<li>将信号传递给进程中的某些<strong>固定线程</strong></li>\n<li>指定一个<strong>特定的线程</strong>来接收进程的所有信号</li>\n</ul>\n<h4 id=\"线程池\"><a class=\"anchor\" href=\"#线程池\">#</a> 线程池</h4>\n<p>优点：</p>\n<ul>\n<li>通常比创建新的线程要快</li>\n<li>限制了任何时候的可用线程数</li>\n</ul>\n<h4 id=\"线程的特定数据-thread-specific-data\"><a class=\"anchor\" href=\"#线程的特定数据-thread-specific-data\">#</a> 线程的特定数据 Thread Specific Data</h4>\n<p>允许每个线程有自己的一定的数据副本</p>\n<p>当使用线程池的时候有用（不是自己创建进程的时候）</p>\n<h4 id=\"调度程序激活\"><a class=\"anchor\" href=\"#调度程序激活\">#</a> 调度程序激活</h4>\n<p>Scheduler Activations</p>\n<p>多对多和二级模型都需要内核与线程库之间的通信（允许动态调整内核线程的数量以保证最好的性能）</p>\n<p>内核通过 upcall 与线程库通信，允许应用程序维护正确的内核线程数</p>\n<p>内核提供一组虚拟处理器 (LWP) 给应用程序，应用程序可调度用户线程到一个可用的 LWP 中。</p>\n<p>upcall 处理句柄必须在虚拟处理器上运行。</p>\n<h2 id=\"第-5-章-cpu-调度\"><a class=\"anchor\" href=\"#第-5-章-cpu-调度\">#</a> 第 5 章 CPU 调度</h2>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p>当一个程序必须等待时，操作系统会从该进程拿走 CPU 的使用权，而将 CPU 交给其他进程</p>\n<h4 id=\"cpu-io-区间\"><a class=\"anchor\" href=\"#cpu-io-区间\">#</a> CPU-I/O 区间</h4>\n<p>进程执行由 CPU 执行和 I/O 等待周期组成，进程在这两个状态之间切换。</p>\n<p>CPU 约束程序可能有少量的长 CPU 区间</p>\n<p>I/O 约束程序通常具有很多短 CPU 区间</p>\n<h4 id=\"cpu-调度程序\"><a class=\"anchor\" href=\"#cpu-调度程序\">#</a> CPU 调度程序</h4>\n<p>当 CPU 空闲，操作系统从就绪队列选择一个进程执行，从内存中选择并为之分配 CPU</p>\n<p>就绪队列的实现可以为：FIFO 队列， 优先队列，树或简单的无序链表，其内容通常为进程控制块 (PCB)</p>\n<h4 id=\"抢占调度\"><a class=\"anchor\" href=\"#抢占调度\">#</a> 抢占调度</h4>\n<p>CPU 调度决策的发生：</p>\n<ul>\n<li>运行状态切换到等待状态</li>\n<li>运行状态切换到就绪状态</li>\n<li>等待状态切换到就绪状态</li>\n<li>进程终止</li>\n</ul>\n<p>第一种和第四种没有选择只有调度， 称为非抢占的 (non-preemptive) 或协作的 (cooperative)，否则调度方案就是抢占的 (preemptive)</p>\n<p>抢占调度需要特别的硬件（如计时器）的支持，因此有的设备只能使用协作调度</p>\n<p>注意：抢占调度对访问共享数据有代价，对操作系统内核设计也有影响。</p>\n<h4 id=\"分派程序-dispatcher\"><a class=\"anchor\" href=\"#分派程序-dispatcher\">#</a> 分派程序 Dispatcher</h4>\n<p>用于将 CPU 的控制交给由短期调度程序选择的进程，功能:</p>\n<ul>\n<li>切换上下文</li>\n<li>切换到用户模式</li>\n<li>跳转到用户程序的合适位置，以重新启动程序</li>\n</ul>\n<p>分派程序停止一个进程而启动另一个所要花的时间称为分派延迟 (dispatch latency)</p>\n<h3 id=\"调度准则-scheduling-criteria\"><a class=\"anchor\" href=\"#调度准则-scheduling-criteria\">#</a> 调度准则 Scheduling Criteria</h3>\n<ul>\n<li>CPU 使用率 CPU utilization： 使得 CPU 尽可能忙</li>\n<li>吞吐量 Throughput： 指一个时间单元内所完成进程的数量</li>\n<li>周转时间 Turnaround time: 从进程提交到进程完成的时间段。包括等待进入内存，在就绪队列中等待， 在 CPU 上执行和 I/O 执行</li>\n<li>等待时间 Waiting time ：在就绪队列中等待所花的时间之和</li>\n<li>响应时间 Response time： 从提交请求到产生第一响应的时间</li>\n</ul>\n<p>需要使得 CPU 使用率，吞吐量最大化，使周转时间，等待时间，响应时间最小化。</p>\n<h3 id=\"调度算法\"><a class=\"anchor\" href=\"#调度算法\">#</a> 调度算法</h3>\n<h4 id=\"先到先服务调度\"><a class=\"anchor\" href=\"#先到先服务调度\">#</a> 先到先服务调度</h4>\n<p>first-come, first-served(<strong>FCFS</strong>) Scheduling algorithm</p>\n<p>先请求 CPU 的进程先分配到 CPU</p>\n<p>使用 FIFO 队列实现</p>\n<p>通常平均等待时间比较长。</p>\n<p><strong>护航效果 (convoy effect)</strong>: 所有其他进程都在等待一个大进程释放 CPU，导致 CPU 和设备的利用率变得更低</p>\n<p>FCFS 调度算法是<strong>非抢占</strong>的。</p>\n<h4 id=\"最短作业优先调度\"><a class=\"anchor\" href=\"#最短作业优先调度\">#</a> 最短作业优先调度</h4>\n<p>shortest-job-first (<strong>SJF</strong>) scheduling algorithm</p>\n<p>优先赋给具有最短 CPU 区间的进程</p>\n<p>SJF 调度算法可证明为<strong>最佳的</strong></p>\n<p>难点在于如何知道下一个 CPU 区间的长度，因此一般用于长期调度，将用户提交作业时所指定的进程时间极限作为长度。</p>\n<p>预测算法：</p>\n<p>T(n+1)=αtn+(1−α)TnT(n+1)=αtn+(1−α)Tn</p>\n<p>当 α=0α=0 最近的历史没有统计</p>\n<p>当 α=1α=1 只是根据上一次的运行时间</p>\n<p>对于短期调度，通常去根据以前的 CPU 区间长度来预测下一个。预测值为之前的指数平均</p>\n<p>SJF 调度算法可以为抢占或者时非抢占的。</p>\n<p>抢占式的 SJF 可抢占当前运行的进程，有时称为<strong>最短剩余时间优先调度</strong> (shortest-remaining-time-first scheduling, SRTF)</p>\n<p>非抢占式的允许当前运行的进程先完成其 CPU 区间。</p>\n<h4 id=\"优先级调度\"><a class=\"anchor\" href=\"#优先级调度\">#</a> 优先级调度</h4>\n<p>SJF 算法可以作为通用优先级调度算法 (priority scheduling algorithm) 的一个特例，优先级为下一个 CPU 区间的倒数</p>\n<p>每个进程都有一个优先级与其相关联，具有最高优先级的进程会分配到 CPU，具有相同优先级的按 FCFS 顺序调度。</p>\n<p>优先级可以通过内部或者外部定义，内部通常使用一些测量数据，如：时间极限，内存要求，打开文件的数量和平均 I/O 区间和平均 CPU 区间。</p>\n<p>优先级调度可以式抢占或者式非抢占的。</p>\n<p>主要问题：无穷阻塞 (indefinite blocking) 或饥饿 (starvation)</p>\n<p>可以运行但缺乏 CPU 的进程被认为是阻塞的，他在等待 CPU，调度算法会使某个低优先级进程无穷等待 CPU</p>\n<p>解决方案：老化 (aging)， 逐渐增加在系统中等待很长时间的进程的优先级。</p>\n<h4 id=\"轮转法调度\"><a class=\"anchor\" href=\"#轮转法调度\">#</a> 轮转法调度</h4>\n<p>round-robin, RR</p>\n<p>专门为分时系统设计，在 FCFS 上增加了抢占以切换进程。改进了响应时间。</p>\n<p>定义一个较小的时间单元，称为时间片 (time quantum. or time slice)，通常为 10~100ms，将就绪队列作为循环队列，为每个进程分配不超过一个时间片的 CPU</p>\n<p>RR 策略的平均等待时间通常较长，性能很大程序依赖于时间片的大小，如果时间片很小，那么 RR 算法就称为<strong>处理器共享</strong></p>\n<p>性能：</p>\n<p>当时间段比较长的时候：退化为 FIFO</p>\n<p>当时间段比较短的时候：时间段必须大于上下文切换的时间，否则开销会很大</p>\n<h4 id=\"多级队列调度\"><a class=\"anchor\" href=\"#多级队列调度\">#</a> 多级队列调度</h4>\n<p>multilevel queue scheduling</p>\n<p>将就绪队列分成多个独立队列。根据进程的属性（内存大小，进程优先级， 进程类型）每个队列有自己的调度算法，如</p>\n<ul>\n<li>前台队列：RR 算法</li>\n<li>后台队列：FCFS 算法</li>\n</ul>\n<p>队列之间也必须有调度，通常采用固定优先级抢占队列，比如前台队列对于后台队列有绝对的优先级，不过固定的优先级可能会引起饥饿</p>\n<p>队列之间也可以划分时间片，每个队列有一定的 CPU 时间（如，80% 的时间给前台队列，20% 给后台）</p>\n<h4 id=\"多级反馈队列调度\"><a class=\"anchor\" href=\"#多级反馈队列调度\">#</a> 多级反馈队列调度</h4>\n<p>multilevel feedback queue scheduling</p>\n<p>比多级队列调度更加灵活，但是开销也更大</p>\n<p>允许进程在队列之间移动，主要思想是根据不同的 CPU 区间的特点以区分进程。如果进程使用过多 CPU 时间，那么它就会被转移到更低优先级的队列，如果低优先级队列中等待时间过长，那么也会被转移到更高优先级队列。这种老化防止了饥饿的发生。</p>\n<p>通常，可以由以下参数来定义</p>\n<ul>\n<li>队列数量</li>\n<li>每个队列的调度算法</li>\n<li>用以确定何时升级到更高优先级队列的方法</li>\n<li>用以确定何时降级到更低优先级队列的方法</li>\n<li>用以确定进程在需要服务时应进入哪个队列的方法</li>\n</ul>\n<p>多级反馈队列调度程序为最通用的 CPU 调度算法，也是最复杂的。</p>\n<p>如：</p>\n<p>首先进程进入第一级 FCFS 队列，如果 8ms 内不能完成，就移到第二级 FCFS 队列，如果 16ms 内不能完成，就进入三级 FCFS 队列</p>\n<p>高级队列的优先级最高，仅当高级队列为空，才调度较低优先级的队列。如果低优先级的进程被抢占，则放入原队列的末尾。</p>\n<p>如果进程请求 I/O，让出了 CPU 则 I/O 完成后，放入比原来队列高一级的队列中</p>\n<h3 id=\"多处理器调度\"><a class=\"anchor\" href=\"#多处理器调度\">#</a> 多处理器调度</h3>\n<p>多个 CPU 可实现负载分配 (load sharing)，调度问题也更加地复杂</p>\n<p>即使对于同构多处理器，也有一些调度限制，比如一个 I/O 设备与一个处理器通过私有总线相连，那么必须把使用改设备的进程调度到这个 CPU 上去运行。</p>\n<p>实时调度：</p>\n<ul>\n<li>Hard real-time systems：保证在一定时间内完成重要的任务</li>\n<li>Soft real-time systems：重要进程的优先级比其他的高</li>\n</ul>\n<h4 id=\"多处理器调度的方法\"><a class=\"anchor\" href=\"#多处理器调度的方法\">#</a> 多处理器调度的方法</h4>\n<ul>\n<li>非对称多处理 (asymmetric multiprocessing)\n<ul>\n<li>一个处理器（主服务器）处理所有的调度决定、I/O 处理以及其他系统活动</li>\n<li>其他处理器只执行用户代码</li>\n<li>更加简单，减轻了对数据共享的需要</li>\n</ul>\n</li>\n<li>对称多处理 (symmetric multiprocessing, SMP)\n<ul>\n<li>每个处理器自我调度</li>\n<li>调度通过每个处理器检查共同就绪队列并选择一个进程来执行</li>\n<li>必须保证两个处理器不能选择同一个进程，并且进程不会从对联中丢失</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"处理器亲和性\"><a class=\"anchor\" href=\"#处理器亲和性\">#</a> 处理器亲和性</h4>\n<p>当一个特定的进程在处理器上运行的时候，进程最近访问的数据进入处理器缓存，缓存的失效和重新构建代价时很高的。</p>\n<p>处理器亲和性： 避免将进程从一个处理器移到另一个处理器，使得一个进程在同一个处理器上运行</p>\n<ul>\n<li>软亲和性 soft affinity ： 进程可能在处理器之间移动</li>\n<li>硬亲和性 hard affinity：进程被指定不允许移到其他处理器</li>\n</ul>\n<h4 id=\"负载平衡\"><a class=\"anchor\" href=\"#负载平衡\">#</a> 负载平衡</h4>\n<p>设法将工作负载平均地分配到 SMP 系统的所有处理器上。</p>\n<p>只是对于那些拥有子集私有的可执行进程的处理器是必要的，对于有共同队列的系统是不需要的。</p>\n<p>通常有两种方法：</p>\n<ul>\n<li>push migration\n<ul>\n<li>一个特定的任务周期性地检查每个处理器上的负载，发现不平衡就将进程从超载 CPU 移动到空闲 CPU</li>\n</ul>\n</li>\n<li>pull migration\n<ul>\n<li>空闲处理器从一个超载处理器 pull 一个等待任务</li>\n</ul>\n</li>\n</ul>\n<p>通常这两种技术并行地实现</p>\n<p>负载平衡通常会抵消处理器亲和性的优点。</p>\n<h4 id=\"对称多线程\"><a class=\"anchor\" href=\"#对称多线程\">#</a> 对称多线程</h4>\n<p>SMT</p>\n<p>SMP 是基于多个物理处理器，SMT 基于多个逻辑处理器，也称为超线程技术 (Hyperthreading)</p>\n<p>SMT 的思想是在同一个物理处理器生成多个逻辑处理器，向操作系统呈现一个多逻辑处理器的视图。每个逻辑处理器都有自己的架构状态</p>\n<p>SMT 是硬件提供的。</p>\n<h3 id=\"线程调度\"><a class=\"anchor\" href=\"#线程调度\">#</a> 线程调度</h3>\n<p>线程：</p>\n<ul>\n<li>用户线程</li>\n<li>内核线程</li>\n</ul>\n<h4 id=\"竞争范围\"><a class=\"anchor\" href=\"#竞争范围\">#</a> 竞争范围</h4>\n<p>进程竞争范围（process-contention scope, PCS）（Local Scheduling）：线程库调度用户级线程到一个有效的 LWP 上运行（根据优先级）</p>\n<p>系统竞争范围（system-contention scope, SCS）（Global Scheduling）：调度内核线程到 CPU</p>\n<h3 id=\"算法评估\"><a class=\"anchor\" href=\"#算法评估\">#</a> 算法评估</h3>\n<p>定义准则：</p>\n<ul>\n<li>最大化 CPU 使用率，同时要求最大相应时间为 1s</li>\n<li>最大化吞吐量（平均周转时间与总地执行时间成正比）</li>\n</ul>\n<h4 id=\"确定类型\"><a class=\"anchor\" href=\"#确定类型\">#</a> 确定类型</h4>\n<p>评估方法:</p>\n<ul>\n<li>分析评估法 (analytic evaluation)：使用给定的算法和系统负荷，产生一个公式或数字来评估</li>\n<li>确定模型法 (deterministic modeling)：采用特殊预先确定的符合，计算在给定负荷下算法的性能</li>\n</ul>\n<h4 id=\"排队模型\"><a class=\"anchor\" href=\"#排队模型\">#</a> 排队模型</h4>\n<p>排队网络分析 (queueing-network analysis)：知道到达率和服务率，计算使用率，平均队列长度，平均等待时间等</p>\n<p>Little 公式： n=λ×Wn=λ×W</p>\n<h2 id=\"第-6-章-进程同步\"><a class=\"anchor\" href=\"#第-6-章-进程同步\">#</a> 第 6 章 进程同步</h2>\n<p>进程或线程异步执行并且共享数据，那么就有可能不能正确运行</p>\n<p>竞争条件 race condition： 多个进程并发访问和操作同一数据并且执行结果与访问发生的特定顺序有关</p>\n<p>为了避免竞争条件，需要确保一段时间内只有一个进程能操作变量，要求进行一定形式的进程同步</p>\n<p>因此需要进程同步 (process synchronization) 和协调 (coordination)</p>\n<h3 id=\"临界区问题\"><a class=\"anchor\" href=\"#临界区问题\">#</a> 临界区问题</h3>\n<p>临界区 (critical section)： 每个进程中的一个代码段，在该区内进程可能改变共同变量等操作。</p>\n<p>每个进程必须请求允许进程临界区，请求进入的代码称为进入区 (entry section), 临界区后可有退出区 (exit section), 其他代码为剩余区 (remainder section)</p>\n<p>临界区问题的三个要求：</p>\n<ul>\n<li>互斥 mutual exclusion: 当一个进程进入临界区，那么其他进程不能再临界区内运行。(无空等待)</li>\n<li>前进 progress: 如果没有进程再其临界区内执行且有进程需要进入临界区，那么只有哪些不在剩余区内执行的进程可以参加选择，确定谁能进入临界区，而且这种选择不能无限推迟（有空让进）</li>\n<li>有限等待 bounded waiting: 从一个进程做出进入临界区的请求，直到道该请求允许为止，其他进程允许进入临界区的次数有限。</li>\n</ul>\n<p>处理临界问题</p>\n<p>抢占内核 preemptive kernel， 需要设计以确保内核数据结构不会导致竞争条件。更适合实时编程，允许实时进程抢占内核默认运行的其他类型，响应更快。</p>\n<p>非抢占内核 nonpreemptive kernel， 从内核数据结构上就不会导致竞争条件</p>\n<p>让权等待：当进程不能进入自己的临界区的时候，释放处理器，以免进程进入盲等</p>\n<h3 id=\"一些解法\"><a class=\"anchor\" href=\"#一些解法\">#</a> 一些解法</h3>\n<p>双标志、先检查：可能两个都进入临界区</p>\n<p>双标志、后检查：可能两个都不能进入临界区</p>\n<h3 id=\"peterson-算法\"><a class=\"anchor\" href=\"#peterson-算法\">#</a> Peterson 算法</h3>\n<p>Copy</p>\n<pre><code>do &#123;\n    flag[i] = true;\n    turn = j;\n    while (flag[j] &amp;&amp; turn == j);\n    临界区\n    flag[i] = false;\n    剩余区\n&#125; while (true);\n</code></pre>\n<p>适用于两个进程再临界区与剩余区间交替执行</p>\n<p>此算法：</p>\n<ul>\n<li>互斥成立</li>\n<li>前进要求满足</li>\n<li>有限等待要求满足</li>\n</ul>\n<h3 id=\"硬件同步\"><a class=\"anchor\" href=\"#硬件同步\">#</a> 硬件同步</h3>\n<p>很多系统提供临界区的硬件支持</p>\n<p>单处理器：关中断，确保当前指令序列执行不被中断，常为非抢占内核使用</p>\n<p>多处理器：提供特殊硬件指令允许原子地检查和修改字的内容或交换两个字的内容</p>\n<p>Copy</p>\n<pre><code>do &#123;\n    请求锁\n        临界区\n    释放锁\n        剩余区\n&#125; while(true);\n</code></pre>\n<p>Copy</p>\n<pre><code>boolean TestAndSet(boolean *target) &#123;\n    boolean rv = *target;\n    *target = true;\n    return rv;\n&#125;\n\ndo &#123;\n    while (TestAndSet(&amp;lock));\n    // do something\n    lock = false;\n&#125; while (true);\n\nvoid Swap(boolean *a, boolean *b) &#123;\n    boolean temp = *a;\n    *a = *b;\n    *b = temp;\n&#125;\n\ndo &#123;\n    key = true;\n    while (key == true) Swap(&amp;lock, &amp;key);\n    // do something\n    lock = false;\n&#125; while (true);\n</code></pre>\n<p>以上为两种实现方法</p>\n<p>优点：</p>\n<ul>\n<li>适用于任意数目的进程，在单处理器和多处理器</li>\n<li>简单</li>\n<li>可以支持进程内存在多个临界区，只需为每个临界区设立一个布尔变量</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>等待需要耗费 CPU 时间，不能实现让权等待</li>\n<li>可能饥饿，优先级问题</li>\n<li>可能死锁， 优先级问题，如果有一个更高优先级的进程在临界区执行时中断并且需要这个进程的资源，就会造成死锁</li>\n</ul>\n<h3 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h3>\n<p>semaphore</p>\n<p>一个同步工具</p>\n<p>信号量 S 是个整型变量，除初始化外，只能通过两个标准原子操作 <code>wait()</code>  和 <code>signal()</code>  访问，也称为 P 和 V</p>\n<p>Copy</p>\n<pre><code>wait(S) &#123;\n    while(S &lt;= 0);\n    S--;\n&#125;\nsignal(S) &#123;\n    S++;\n&#125;\n</code></pre>\n<p>使用方法：</p>\n<p>Copy</p>\n<pre><code>mutex = 1;\ndo &#123;\n    wait(mutex);\n    // do something\n    signal(mutex)\n&#125; while (true);\n</code></pre>\n<p>缺点：忙等待。通过循环浪费了 CPU，称为自旋锁 (spinlock)</p>\n<p>改进： 变成阻塞自己，将进程放入与信号量相关的等待队列， 并切换进程状态为等待状态。</p>\n<p>Copy</p>\n<pre><code>typedef struct &#123;\n\tint value;\n    struct process *list;\n&#125; semaphore;\n</code></pre>\n<p>当一个进程必须等待信号量，那么就加入进程链表， <code>signal()</code>  会从等待链表中取一个进程以唤醒。</p>\n<p>Copy</p>\n<pre><code>wait (semaphore *S) &#123;\n    S-&gt;value--;\n    if (S-&gt;value &lt; 0) &#123;\n        add this process to S-&gt;list;\n        block(); // 挂起调用它的进程\n    &#125;\n&#125;\n\nsignal(semaphore *S) &#123;\n    S-&gt;value++;\n    if (S-&gt;value &lt;= 0) &#123;\n        remove a process P from S-&gt;list;\n        wakeup(P); // 重新启动阻塞进程P的执行\n    &#125;\n&#125;\n</code></pre>\n<p><code>value</code>  就是等待的进程数。</p>\n<p>大于等于 0 的时候就是可用资源数。</p>\n<p>小于 0 就是等待进入临界区的进程个数</p>\n<p>如果定义信号量 flag 为 0，可以先 <code>signal</code>  再 <code>wait</code> ， 确认操作完成后再继续执行。</p>\n<p>对于单处理器，可以执行 <code>wait</code>  和 <code>signal</code>  操作时简单地禁止中断，对于多处理器，必须禁止每个处理器的中断，或者提供其他加锁技术（如自旋锁 Spinlock，特点就是忙等待），使得这两个命令可以原子地执行。</p>\n<p>并没有完全取消忙等，而是取消了应用程序进入临界区的忙等。</p>\n<p><code>wait</code>  和 <code>signal</code>  必须成对出现:</p>\n<ul>\n<li>互斥操作时，处于同一进程</li>\n<li>同步操作时，不在同一进程</li>\n</ul>\n<p>如果两个 <code>wait</code>  相邻，那么他们顺序很重要（同步操作应该在互斥操作之前）， <code>signal</code>  则不重要。</p>\n<p>优点：简单，表达能力强，能解决任何同步互斥问题</p>\n<p>缺点：不够安全，当使用不当会出现死锁，实现复杂</p>\n<h4 id=\"死锁和饥饿\"><a class=\"anchor\" href=\"#死锁和饥饿\">#</a> 死锁和饥饿</h4>\n<p>当信号量使用顺序不对，就有可能造成死锁。</p>\n<p>当两个或多个进程无限等待一个事件，而该事件只能由这些等待进程之一来产生，那么这些进程就会称为死锁 (deadlocked)</p>\n<p>当进程再信号量内无限期等待，就会导致无限期阻塞 (indefinite blocking) 或饥饿 (starvation)</p>\n<h3 id=\"经典同步问题\"><a class=\"anchor\" href=\"#经典同步问题\">#</a> 经典同步问题</h3>\n<h4 id=\"有限缓冲问题\"><a class=\"anchor\" href=\"#有限缓冲问题\">#</a> 有限缓冲问题</h4>\n<ul>\n<li><code>mutex</code>  提供对缓冲池访问的互斥要求，初始化为 1</li>\n<li><code>empty</code>  表示空缓冲项，初始化为 n</li>\n<li><code>full</code>  表示满缓冲项，初始化为 0</li>\n</ul>\n<p>Copy</p>\n<pre><code>// 生产者\ndo &#123;\n    // produce an item in nextp\n    wait(empty);\n    wait(mutex);\n    // add nextp to buffer\n    signal(mutex);\n    signal(full);\n&#125; while (true);\n\n// 消费者\ndo &#123;\n    wait(full);\n    wait(mutex);\n    // r3emove an item from buffer to nextc\n    signal(mutex);\n    signal(empty);\n    // consume the item in nextc\n&#125; while (true);\n</code></pre>\n<h4 id=\"读者-写者问题\"><a class=\"anchor\" href=\"#读者-写者问题\">#</a> 读者 - 写者问题</h4>\n<ul>\n<li>第一读者 - 写者问题（<strong>读者优先</strong>）： 要求没有读者需要保持等待除非已有一个写者已获得允许以使用共享数据库，即没有读者会因为有一个写者在等待而会等待其他读者的完成. (即使有一个写者在等待，读者也会无视读者的锁而进行并发地读取，可能导致写者饥饿)</li>\n<li>第二读者 - 写者问题（<strong>写者优先</strong>）： 一旦写者就绪，那么写着就会尽可能快地执行写操作，即如果是个写者等待访问对象，那么不会有新读者开始读操作（一旦有写者等待，读者就会不会开始，可能导致读者饥饿</li>\n</ul>\n<p>第一读者写者问题解决</p>\n<p>Copy</p>\n<pre><code>semaphore mutex = 1, wrt = 1;\n// mutex 修改readcount的互斥\n// wrt 写者的互斥\nint readcount = 0;\n\n// 写者进程结构\ndo &#123;\n    wait(wrt);\n    ...\n    // writing is performed\n    ...\n    signal(wrt);\n&#125; while (true);\n\n// 读者进程结构\ndo &#123;\n    wait(mutex);\n    readcount++;\n    if (readcount == 1) &#123; // 当前没有读者，需要等待/获取写者互斥\n        wait(wrt);\n    &#125;\n    signal(mutex);\n    ...\n    // reading is performed\n    ...\n    wait(mutex);\n    readcount--;\n    if (readcount == 0) &#123; // 所有读者退出，释放写者互斥\n        signal(wrt);\n    &#125;\n    signal(mutex);\n&#125; while (true);\n</code></pre>\n<p>第二读者写者问题</p>\n<p>Copy</p>\n<pre><code>semaphore rmutex = 1, wmutex = 1, readTry = 1, resource = 1;\n// rmutex 修改readcount的互斥\n// wmutex 修改writecount的互斥\n// readTry 锁住进入读者队列\n// resouce 写者修改资源的互斥\nint readcount = 0, writecount = 0;\n\n// 写者进程结构\ndo &#123;\n    wait(wmutex);\n    writecount++;\n    if (writecount == 1) &#123; // 当前没有写者，需要先锁住读者队列\n        wait(readTry);\n    &#125;\n    signal(wmutex);\n    wait(resouce); // 需要获得资源的独占访问\n    ...\n    // writing is performed\n    ...\n    signal(resouce);\n    wait(wmutex);\n    writecount--;\n    if (writecount == 0) &#123; // 所有写者退出，释放读者队列的锁\n        signal(readTry);\n    &#125;\n    signal(wmutex);\n\n&#125; while (true);\n\n// 读者进程结构\ndo &#123;\n    wait(readTry); // 获取进入读者队列的锁\n    wait(rmutex);\n    readcount++;\n    if (readcount == 1) &#123; // 当前没有读者，需要等待/获取资源独占锁\n        wait(resource);\n    &#125;\n    signal(rmutex);\n    signal(readTry);\n    ...\n    // reading is performed\n    ...\n    wait(rmutex);\n    readcount--;\n    if (readcount == 0) &#123; // 所有读者退出，释放写者互斥\n        signal(resource);\n    &#125;\n    signal(rmutex);\n&#125; while (true);\n</code></pre>\n<p>某些系统提供读写锁</p>\n<p>多个进程可允许并发获取读模式的读写锁，只有一个进程可以为写操作获取读写锁</p>\n<p>需要读写锁的情况：</p>\n<ul>\n<li>当可以区分哪些进程需要读共享数据哪些进程只需写共享数据、</li>\n<li>当读者进程数比写者进程多时。</li>\n</ul>\n<h4 id=\"哲学家进餐问题\"><a class=\"anchor\" href=\"#哲学家进餐问题\">#</a> 哲学家进餐问题</h4>\n<p>典型的同步问题，并发控制的问题。</p>\n<p>需要在多个进程之间分配多个资源且不会出现死锁和饥饿</p>\n<p>一个简单的解决方法就是每一个资源使用一个信号量表示</p>\n<p>Copy</p>\n<pre><code>emaphore chopstick[5]; // 初始化为1\ndo &#123;\n    wait(chopstick[i]);\n    wait(chopstick[(i + 1) % 5]);\n    // eat\n    signal(chopstick[i]);\n    signal(chopstick[(i + 1) % 5]);\n    // think\n&#125; while (true);\n</code></pre>\n<p>但是这个方法会导致死锁</p>\n<p>我们需要保证：</p>\n<ul>\n<li>最多允许 4 个哲学家同时坐在桌子上</li>\n<li>只有两只筷子都可用的时候才允许一个哲学家拿起他们（必须在临界区内拿起）</li>\n<li>使用非对称解决方法\n<ul>\n<li>奇数哲学家先拿起左边的筷子，然后拿起右边的筷子，而偶数哲学家则相反</li>\n</ul>\n</li>\n</ul>\n<p>但是<strong>还是不能解决</strong>饥饿的问题</p>\n<h3 id=\"管程-monitors\"><a class=\"anchor\" href=\"#管程-monitors\">#</a> 管程 Monitors</h3>\n<p>使用信号量还是可能导致错误，或者调用顺序一旦不被遵守，那么就会出现死锁，因此需要管程，monitor</p>\n<h4 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h4>\n<p>管程类型提供了一组由程序员定义的、在管程内互斥的操作。</p>\n<p>管程类型的表示不能直接为各个进程所使用，在管程内定义的子程序只能访问位于管程内那些局部声明和变量形式参数，局部变量只能被局部子程序访问。</p>\n<p>管程结构确保一次<strong>只有一个进程</strong> 能在管程内活动， 但是还需一些额外的同步机制，由条件 (condition) 结构来提供。</p>\n<p>Copy</p>\n<pre><code>condition x, y;\nx.wait(); // 调用操作的进程会被挂起\nx.signal(); // 重新启动一个悬挂的进程，如果没有，那么就没有任何操作（与信号量不同）\n</code></pre>\n<p>管程的语法</p>\n<p>Copy</p>\n<pre><code>monitor monitor name &#123;\n    // shared variable declarations\n    procedure P1 (...) &#123;\n        ...\n    &#125;\n    procedure P2 (...) &#123;\n        ...\n    &#125;\n    ...\n    procedure Pn (...) &#123;\n        ...\n    &#125;\n    initalization code (...) &#123;\n        ...\n    &#125;\n&#125;\n</code></pre>\n<p>当操作 <code>x.signal()</code>  被进程 P 调用时， Q 被唤醒， 进程 Q 等待直到 P 离开管程，或者等待另一个条件，然后再执行。</p>\n<p>在并行 Pascal 中，当进程 P 执行操作 <code>signal()</code>  时，它会立即离开管程，因此进程 Q 会立刻重新执行。</p>\n<h4 id=\"哲学家进餐问题的管程解决方案\"><a class=\"anchor\" href=\"#哲学家进餐问题的管程解决方案\">#</a> 哲学家进餐问题的管程解决方案</h4>\n<p>需要区分哲学家三种状态，引入数据结构</p>\n<pre><code>enum &#123;THINKING, HUNGRY, EATING&#125; state[5];\n</code></pre>\n<p>哲学家只有再其两个邻居不在进餐的时候才能将 <code>state[i]</code>  设置为 <code>eating</code></p>\n<p>还需要声明 <code>condition self[5];</code></p>\n<p>其中哲学家 <code>i</code>  在饥饿且又不能拿到需要筷子时可以延迟自己。</p>\n<p>Copy</p>\n<pre><code>monitor db &#123;\n    enum &#123;THINKING, HUNGRY, EATING&#125; state[5];\n    condition self[5];\n\n    void pickup(int i) &#123;\n        state[i] = HUNGRY;\n        test(i);\n        if (state[i] != EATING) &#123;\n            self[i].wait();\n        &#125;\n    &#125;\n\n    void putdown(int i) &#123;\n\t\tstate[i] = THINGKING;\n    \ttest((i + 4) % 5);\n    \ttest((i + 1) % 5)；\n    &#125;\n\n    void test(int i) &#123;\n        if ((state[(i + 4) % 5] != EATING) &amp;&amp;\n           (state[i] == HUNGRY) &amp;&amp;\n            (state[(i + 1) % 5] != EATING)) &#123;\n            state[i] = EATING;\n            self[i].signal();\n        &#125;\n    &#125;\n\n    initialization_code() &#123;\n        for (int i = 0; i &lt; 5; i++) &#123;\n            state[i] = THINKING;\n        &#125;\n    &#125;\n&#125;\n\n// 当哲学家i需要进餐\ndp.pickup(i);\neat();\ndp.putdown(i);\n</code></pre>\n<p>这样就可以保证相邻两个哲学家不会同时进餐，并且在哲学家进餐完毕会<strong>唤醒</strong>左右两个哲学家（如果他们正在等待并且已经可以开始吃），这样就<strong>不会出现死锁</strong>，但是还是有<strong>可能饿死</strong>。</p>\n<h4 id=\"基于信号量的管程实现\"><a class=\"anchor\" href=\"#基于信号量的管程实现\">#</a> 基于信号量的管程实现</h4>\n<p>对于每个管程，都有一个信号量 <code>mutex = 1</code> ， 进程在进入管程之前必须执行 <code>wait(mutex)</code> ， 离开管程之和必须执行 <code>signal(mutex)</code></p>\n<p>因为信号进程必须等待，直到重新启动的进程离开或等待，因此引入了信号量 <code>next = 0</code>  以供信号进程挂起自己，然后提供一个整数变量 <code>next_count</code>  对挂起的进程数量进行计数</p>\n<p>Copy</p>\n<pre><code>wait(mutex); // 保证这个管程只有一个在运行\n...\nif (next_count &gt; 0) &#123;\n\tsignal(next); // 唤醒下一个\n&#125; else &#123;\n    signal(mutex);\n&#125;\n</code></pre>\n<p>实现条件变量（引入信号量 <code>x_sem</code>  和整数变量 <code>x_count</code> ）：</p>\n<p>条件变量的两个操作：</p>\n<ul>\n<li><code>x.wait()</code> ： 调用操作的进程被挂起，调用管程的其他程序（有的话）</li>\n<li><code>x.signal()</code> ：恢复调用 <code>x.wait()</code>  的进程</li>\n</ul>\n<p>Copy</p>\n<pre><code>// x.wait()\nx_count++;\nif (next_count &gt; 0) &#123;\n    signal(next);\n&#125; else &#123;\n    signal(mutex);\n&#125;\nwait(x_sem);\nx_count--;\n... // 进行操作\n// signal(next); ???\n\n// x.signal()\nif (x_count &gt; 0) &#123;\n    next_count++;\n    signal(x_sem);\n    wait(next);\n    next_count--;\n&#125;\n</code></pre>\n<h4 id=\"管程内的进程重启\"><a class=\"anchor\" href=\"#管程内的进程重启\">#</a> 管程内的进程重启</h4>\n<p>简单的解决方案时使用 FCFS 顺序，但是很多情况下可以使用<strong>条件等待</strong>构造  <code>x.wait(c)</code> <br />\n c 为整数，称为<strong>优先级</strong>， 会与悬挂进程的名称一起存储，当执行 <code>x.signal()</code>  最小优先级的程序会被启动。</p>\n<p>管程不能正常运行的情况：</p>\n<ul>\n<li>一个进程在没有先获得资源访问权限就访问资源</li>\n<li>一个进程在获得资源访问权限之后就不释放资源</li>\n<li>一个进程视图释放一个从来没有请求的资源</li>\n<li>一个进程可能请求同一资源两次（中间没有释放资源）</li>\n</ul>\n<h3 id=\"同步实例\"><a class=\"anchor\" href=\"#同步实例\">#</a> 同步实例</h3>\n<h4 id=\"pthread-同步\"><a class=\"anchor\" href=\"#pthread-同步\">#</a> Pthread 同步</h4>\n<p>Pthread API 为线程同步提供：</p>\n<ul>\n<li>互斥锁（Pthread 的基本同步技术，保护临界区代码）</li>\n<li>条件变量</li>\n</ul>\n<p>不可移植的扩展：</p>\n<ul>\n<li>自旋锁</li>\n<li>读写锁</li>\n</ul>\n<h3 id=\"原子事务\"><a class=\"anchor\" href=\"#原子事务\">#</a> 原子事务</h3>\n<p>这一部分在数据库管理原理与设计系统的事务部分有详细介绍</p>\n<h2 id=\"第-7-章-死锁\"><a class=\"anchor\" href=\"#第-7-章-死锁\">#</a> 第 7 章 死锁</h2>\n<h3 id=\"系统模型\"><a class=\"anchor\" href=\"#系统模型\">#</a> 系统模型</h3>\n<p>系统拥有一定数量的资源，分布在若干竞争进程之间。资源可以分成多种类型，每种类型有一定数量的实例。</p>\n<p>同类型的资源：一个进程申请某个资源类型的一个实例，同类的任何实例都可以满足要求，那么就是相同的。</p>\n<p>进程使用资源的<strong>流程</strong>:</p>\n<ul>\n<li>申请：如果不被允许，那么就必须等待，直到允许</li>\n<li>使用</li>\n<li>释放</li>\n</ul>\n<p>当一组进程中的每个进程都在等待一个事件，而这个事件只能由这一组进程的另一进程引起，那么这组进程就处于死锁状态</p>\n<h3 id=\"死锁特征\"><a class=\"anchor\" href=\"#死锁特征\">#</a> 死锁特征</h3>\n<h4 id=\"必要条件\"><a class=\"anchor\" href=\"#必要条件\">#</a> 必要条件</h4>\n<ul>\n<li>互斥 Mutual exclusion： 至少有一个资源处于非共享模式。</li>\n<li>占有并等待 Hold and wait：一个进程必须占有至少一个资源，并等待另一资源（被其他进程占有）</li>\n<li>非抢占 No preemption： 资源不能被抢占，只能等待自动释放</li>\n<li>循环等待 Circular wait：一组等待进程 P0,P1,..,PnP0,P1,..,Pn 一个进程的等待资源被下一个进程占用</li>\n</ul>\n<p>四个条件必须<strong>同时满足</strong>才会出现死锁。循环等待意味者占有并等，这四个条件并不是完全独立。</p>\n<h4 id=\"资源分配图\"><a class=\"anchor\" href=\"#资源分配图\">#</a> 资源分配图</h4>\n<p>Resource-Allocation Graph</p>\n<p>节点类型：</p>\n<ul>\n<li>系统活动进程的集合（圆形）</li>\n<li>系统所有资源类型的集合（一个矩形表示一类资源，里面的点表示资源）</li>\n</ul>\n<p>边：</p>\n<ul>\n<li>申请边：进程指向资源</li>\n<li>分配边：资源指向进程</li>\n</ul>\n<p>如果分配图没有环，那么系统就没有进程死锁。如果有，那么就<strong>可能</strong>存在死锁</p>\n<p>如果<strong>每个资源类型刚好有一个实例</strong>，那么<strong>有环</strong>就意味着出现了死锁。</p>\n<h3 id=\"死锁处理方法\"><a class=\"anchor\" href=\"#死锁处理方法\">#</a> 死锁处理方法</h3>\n<ul>\n<li>使用协议预防或避免死锁</li>\n<li>允许系统进入死锁状态，然后检测它，并加以恢复</li>\n<li>忽视这个问题，认为死锁不可能发生</li>\n</ul>\n<p>然而绝大多数系统使用第三种方法，这就需要我们自己处理死锁。</p>\n<p>死锁预防， deadlock prevention ： 确保至少一个必要条件不成立，通过限制如果申请资源的方法来预防</p>\n<p>死锁避免， deadlock avoidance： 操作系统事先得到有关进程申请资源和使用资源的额外信息，然后确定对于一个申请是否应该等待。</p>\n<h3 id=\"死锁预防\"><a class=\"anchor\" href=\"#死锁预防\">#</a> 死锁预防</h3>\n<p>只要确保至少一个必要条件不成立。</p>\n<h4 id=\"互斥\"><a class=\"anchor\" href=\"#互斥\">#</a> 互斥</h4>\n<p>使用共享资源，比如只读文件，不过有些资源本身就是非共享的。</p>\n<h4 id=\"占有并等待\"><a class=\"anchor\" href=\"#占有并等待\">#</a> 占有并等待</h4>\n<p>保证当一个进程申请一个资源时，他<strong>不能占有其他资源</strong>。</p>\n<ul>\n<li>在每个进程执行前申请并获得<strong>所有</strong>的资源。</li>\n<li>运行进程在没有资源时才能申请资源，也就是在申请更多资源时候<strong>必须释放当前资源</strong></li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>资源利用率 (resource utilization) 可能比较低</li>\n<li>可能发生饥饿</li>\n</ul>\n<h4 id=\"非抢占\"><a class=\"anchor\" href=\"#非抢占\">#</a> 非抢占</h4>\n<p>使用协议：如果一个进程占有资源并申请另一个<strong>不能立即分配</strong>的资源，那么其现已分配的资源<strong>都可以被抢占</strong>。也就是说这些资源被隐式释放了。当进程获得其原有资源和所申请的新资源时，才能重新执行。</p>\n<p>适用于<strong>状态可以保存和恢复的资源</strong>，如 CPU 寄存器，内存，但不适用于打印机和磁带驱动器。</p>\n<h4 id=\"循环等待\"><a class=\"anchor\" href=\"#循环等待\">#</a> 循环等待</h4>\n<p>对所有资源类型进行完全排序，并<strong>按递增顺序</strong>申请资源。</p>\n<p>使用协议：</p>\n<blockquote>\n<p>每个进程只按递增顺序申请资源，如果需要同一资源类型的多个实例，那么必须同时申请。</p>\n<p>当一个进程需要前面的资源时，必须<strong>释放后面</strong>的资源。</p>\n</blockquote>\n<p>这样一来，循环等待就不可能成立。</p>\n<p>我们可以使用锁顺序验证器，检测是否可能出现死锁</p>\n<h3 id=\"死锁避免\"><a class=\"anchor\" href=\"#死锁避免\">#</a> 死锁避免</h3>\n<p>使用死锁预防会带来<strong>低设备使用率和系统吞吐率</strong></p>\n<p>因此我们可以获得以后如何申请资源的附加信息，然后决定进程是否因申请而等待。</p>\n<p>每次申请要求系统考虑现有可用资源，现已分配给每个进程的资源和每个进程将来申请与释放的资源，以决定当前申请是否满足或必须等待，从而避免死锁发生的可能性。</p>\n<p>最简单的模型：要求每个进程说明他们可能需要的每种资源实例的最大需求，构造一个算法确保系统绝不会进入死锁状态</p>\n<p><strong>死锁避免</strong> (deadlock-avoidance) 算法动态地检测<strong>资源分配状态</strong>以确保循环等待条件不可能成立。</p>\n<p>资源分配状态由以下数据决定：</p>\n<ul>\n<li>可用资源</li>\n<li>已分配资源</li>\n<li>进程最大需求</li>\n</ul>\n<h4 id=\"安全状态\"><a class=\"anchor\" href=\"#安全状态\">#</a> 安全状态</h4>\n<p>安全：系统能按某个顺序为每个进程分配资源（不超过其最大值）并能避免死锁</p>\n<p>也就是：存在一个<strong>安全序列</strong></p>\n<p>安全序列：</p>\n<p>对于每个进程，进程仍然可以申请的资源数小于当前可用资源加上序列前面的资源所占用的资源。</p>\n<p>不安全状态<strong>可能</strong>导致死锁</p>\n<p>避免算法的思想：简单地确保系统<strong>始终</strong>处于<strong>安全状态</strong></p>\n<h4 id=\"资源分配图算法\"><a class=\"anchor\" href=\"#资源分配图算法\">#</a> 资源分配图算法</h4>\n<p>引入一个需求边：表示某个进程在将来每个时刻申请某个资源（用虚线表示）</p>\n<p>当进程申请资源的时候，需求边就变成申请边</p>\n<p>当进程释放资源的时候，申请边就变成需求边</p>\n<p>只有当需求边变成申请边的时候<strong>没有环</strong>，才允许申请。</p>\n<p>不适用于每种资源由<strong>多个实例</strong>的资源分配系统</p>\n<h4 id=\"银行家算法\"><a class=\"anchor\" href=\"#银行家算法\">#</a> 银行家算法</h4>\n<p>对于每种资源有多个实例的资源分配系统。</p>\n<p>当新进程进入系统，必须说明其可能需要的<strong>最大资源实例数</strong>。当用户申请一组资源时，系统必须确定这些资源的分配是否仍会使系统处于安全状态，如果是，就分配资源，否则，必须等待直到某个其他进程释放足够资源为止。</p>\n<p>定义以下数据结构</p>\n<ul>\n<li>Available：表示每种资源的现有实例数量</li>\n<li>Max： 表示每个进程的最大需求</li>\n<li>Allocation： 每个进程限制所分配的各种资源类型的实例数量</li>\n<li>Need：每个进程还需要的剩余资源</li>\n</ul>\n<p>Need[i,j]=Max[i,j]−Allocation[i,j]Need[i,j]=Max[i,j]−Allocation[i,j]</p>\n<h5 id=\"安全性算法\"><a class=\"anchor\" href=\"#安全性算法\">#</a> 安全性算法</h5>\n<p>确定计算机系统是否处于安全状态</p>\n<ul>\n<li>定义变量 <code>Work = Available， finish[i] = false;</code></li>\n<li>查找满足  <code>finish[i] = false &amp;&amp; Needi &lt;= Work</code>  的 <code>i</code>  ， 如果没有，就跳转到第 4 步</li>\n<li><code>Work += Allocation; finish[i] = true</code> , 返回第 2 步</li>\n<li>如果所有的 <code>i</code>  满足 <code>finish[i] = true</code>  则系统安全</li>\n</ul>\n<p>一共需要 m×n2m×n2 的操作</p>\n<h5 id=\"资源请求算法\"><a class=\"anchor\" href=\"#资源请求算法\">#</a> 资源请求算法</h5>\n<ul>\n<li>如果 Requsett≤NeediRequsett≤Needi 跳到第二步，否则出错</li>\n<li>如果 Requsett≤AvailableRequsett≤Available 跳到第三部，否则需要等待</li>\n<li>如果可以分配，那么修改状态\n<ul>\n<li>Available=Available−RequestiAvailable=Available−Requesti</li>\n<li>Allocationi=Allocationi+RequsetiAllocationi=Allocationi+Requseti</li>\n<li>Needi=Needi−RequestiNeedi=Needi−Requesti</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"死锁检测\"><a class=\"anchor\" href=\"#死锁检测\">#</a> 死锁检测</h3>\n<ul>\n<li>允许系统进入死锁状态</li>\n<li>检查系统状态从而确定是否出现锁的算法</li>\n<li>从死锁状态恢复的算法</li>\n</ul>\n<h4 id=\"每种资源类型只有单个实例\"><a class=\"anchor\" href=\"#每种资源类型只有单个实例\">#</a> 每种资源类型只有单个实例</h4>\n<p>等待图：从资源分配图中，删除所有资源类型节点， 合并适当边。</p>\n<p>当且仅当等待图中有一个环，系统存在死锁。</p>\n<h4 id=\"每种资源类型可有多个实例\"><a class=\"anchor\" href=\"#每种资源类型可有多个实例\">#</a> 每种资源类型可有多个实例</h4>\n<p>类似于银行家算法，只有有一个不满足就是处于死锁状态</p>\n<h4 id=\"应用检测算法\"><a class=\"anchor\" href=\"#应用检测算法\">#</a> 应用检测算法</h4>\n<p>何时调用检测算法，取决于</p>\n<ul>\n<li>死锁可能发生频率</li>\n<li>死锁发生时受影响进程的数量</li>\n</ul>\n<p>如果进程发生死锁，就应该经常调用检测算法。</p>\n<h3 id=\"死锁恢复\"><a class=\"anchor\" href=\"#死锁恢复\">#</a> 死锁恢复</h3>\n<ul>\n<li>终止一个或多个进程</li>\n<li>从一个或多个死锁进程那里抢占一个或多个资源</li>\n</ul>\n<h4 id=\"进程终止-2\"><a class=\"anchor\" href=\"#进程终止-2\">#</a> 进程终止</h4>\n<ul>\n<li>终止所有死锁进程</li>\n<li>一次只终止一个，直到取消死锁循环为止（开销较大），应该终止代价最小的进程，判断因素：\n<ul>\n<li>进程优先级</li>\n<li>进程计算了多久，还需多久</li>\n<li>使用了多少，什么类型的资源</li>\n<li>需要多少资源能完成</li>\n<li>多少进程需要被中止</li>\n<li>进程是交互的还是批处理</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"资源抢占\"><a class=\"anchor\" href=\"#资源抢占\">#</a> 资源抢占</h4>\n<ul>\n<li>选择一个牺牲品（代价最小化）</li>\n<li>回滚\n<ul>\n<li>完全回滚： 终止进程并重新执行</li>\n<li>回滚到足够打破死锁</li>\n</ul>\n</li>\n<li>饥饿\n<ul>\n<li>确保一个进程只能有限地被选择为牺牲品</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>三种处理死锁的方法:</p>\n<ul>\n<li>使用一些协议来预防或避免死锁，确保系统不会进入死锁状态</li>\n<li>允许系统进入死锁状态，检测死锁，并恢复</li>\n<li>忽略这个问题</li>\n</ul>\n<p>当且仅当 4 个必要条件同时成立才会发生死锁， 确保则 4 个必要条件不成立可以预防死锁</p>\n<p>死锁避免算法比预防算法要求低</p>\n<p>检测到死锁，系统通过终止某些死锁进程或抢占某些死锁进程的资源来从死锁中恢复</p>\n<p>抢占时需要考虑： 选择一个牺牲品、回滚和饥饿</p>\n<h1 id=\"第三部分-内存管理\"><a class=\"anchor\" href=\"#第三部分-内存管理\">#</a> 第三部分 内存管理</h1>\n<h2 id=\"第-8-章-内存管理\"><a class=\"anchor\" href=\"#第-8-章-内存管理\">#</a> 第 8 章 内存管理</h2>\n<h3 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h3>\n<ul>\n<li>基本硬件概述</li>\n<li>符号内存地址到实际物理地址的绑定</li>\n<li>逻辑地址与物理地址的差别</li>\n<li>动态装载</li>\n<li>动态链接代码及共享库</li>\n</ul>\n<h4 id=\"基本硬件\"><a class=\"anchor\" href=\"#基本硬件\">#</a> 基本硬件</h4>\n<p>CPU 在使用数据前必须先把数据移到内存中</p>\n<p>然而 CPU 访问内存通常需要多个时钟周期，内存访问频繁，经常需要暂停 (stall)，因此加入了高速缓存 (cache)</p>\n<p>内存需要确保操作系统不被用户进程访问，可通过硬件实现。</p>\n<p>确保每个进程都有独立的内存空间，需要确定进程可访问的合法地址的范围，并确保进程只访问其合法地址。通过基地址寄存器和界限地址寄存器实现。</p>\n<ul>\n<li>基地址寄存器 base register：最小的合法物理内存地址</li>\n<li>界限地址寄存器 limit register： 范围的大小</li>\n</ul>\n<p>内存空间保护：通过 CPU 硬件对用户模式所产生的每一个地址与寄存器的地址进行比较。当用户模式下执行的程序试图访问非自己的内存，就会当成错误处理。</p>\n<p>只有操作系统在内核模式下才能修改这两个寄存器</p>\n<h4 id=\"地址绑定\"><a class=\"anchor\" href=\"#地址绑定\">#</a> 地址绑定</h4>\n<p>输入队列 (input queue)： 在磁盘上等待调入内存以执行的进程。</p>\n<ul>\n<li>\n<p>编译时 (compile time): 在编译时就知道进程在内存中驻留地址，生成绝对代码。如 DOS 的 COM 程序</p>\n</li>\n<li>\n<p>加载时 (load time)：可重定位代码 (relocatable code)， 绑定会延迟到加载时 [</p>\n<p>静态地址重定位</p>\n<p>]</p>\n<ul>\n<li>无须硬件支持</li>\n<li>重定位以后不能在内存中移动</li>\n<li>要求存储空间是连续的</li>\n</ul>\n</li>\n<li>\n<p>执行时 (execution time)：进程可以在执行时从一个内存段移到另一个内存段，绑定延迟到执行时执行，绝大多数操作系统采用的方法（需要硬件支持，mmu）[<strong>动态地址重定位</strong>]</p>\n</li>\n</ul>\n<h4 id=\"逻辑地址空间与物理地址空间\"><a class=\"anchor\" href=\"#逻辑地址空间与物理地址空间\">#</a> 逻辑地址空间与物理地址空间</h4>\n<p>逻辑地址 (logical address)： CPU 所生成的地址（也称虚拟地址）</p>\n<p>物理地址 (physical address)：内存单元所看到的地址（加载到内存地址寄存器 (memory-address register) 中的地址）</p>\n<p>编译和加载时绑定方法中：逻辑地址 = 物理地址</p>\n<p>执行时地址绑定：逻辑地址！= 物理地址</p>\n<p><strong>逻辑地址空间</strong> (logical address space)：由程序生成的所有逻辑地址的集合</p>\n<p><strong>物理地址空间</strong> (physical address space)：逻辑地址相对应的所有物理地址的集合</p>\n<p>内存管理单元 (memory-management unit, MMU)： 管理运行时从虚拟地址到物理地址的映射。</p>\n<p>基地址寄存器作为重定位寄存器 (relocation register)， 用户进程所生成的地址在交送内存之前，都将加上重定位寄存器的值。</p>\n<p>用户程序处理逻辑地址，内存映射硬件将逻辑地址转变为物理地址。</p>\n<h4 id=\"动态加载\"><a class=\"anchor\" href=\"#动态加载\">#</a> 动态加载</h4>\n<p>一个子程序只有在调用时才被加载。</p>\n<p>优点：</p>\n<ul>\n<li>不用的子程序不会被加载。</li>\n<li>更好的内存占用</li>\n<li>不需要操作系统的特殊支持</li>\n</ul>\n<p>覆盖技术：</p>\n<p>先后调入程序段到同一内存的空间</p>\n<h4 id=\"动态链接与共享库\"><a class=\"anchor\" href=\"#动态链接与共享库\">#</a> 动态链接与共享库</h4>\n<p>静态链接，由加载程序合并到二进制程序镜像中</p>\n<p>动态链接：</p>\n<ul>\n<li>装入时链接\n<ul>\n<li>使用动态库导入表</li>\n</ul>\n</li>\n<li>运行时链接\n<ul>\n<li>使用 API 装入动态库</li>\n<li>优点：\n<ul>\n<li>共享</li>\n<li>部分装入</li>\n<li>便于局部代码修改</li>\n<li>便于运行环境适应</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>链接开销</li>\n<li>管理开销</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>被链接的共享代码称为动态链接库 (DLL, Dynamic-Link Library) 或共享库 (shared library)</p>\n<p>二进制镜像对每个库程序的应用都有个存根 (stub)， 用于指出如果定位适当的内存驻留库程序，如果程序不在内存如何装入内存。</p>\n<p>优点： 占用体积小， 方便更新。</p>\n<h3 id=\"交换\"><a class=\"anchor\" href=\"#交换\">#</a> 交换</h3>\n<p>进程暂时从内存中交换 (swap) 到备份存储 (backing store) 上，当需要再次执行时调回到内存中。</p>\n<p>备份存储 (backing store)：快速大容量的存储设备，可以直接访问</p>\n<p>滚出和滚入：内存管理器交换出低优先级的进程， 装入高优先级进程</p>\n<p>交换时间的主要部分是传输时间</p>\n<p>总传输时间与内存交换量成正比。</p>\n<h3 id=\"连续内存分配\"><a class=\"anchor\" href=\"#连续内存分配\">#</a> 连续内存分配</h3>\n<p>contiguous memory allocation</p>\n<p>内存通常分为两个部分：</p>\n<ul>\n<li>预留给操作系统的低地址部分（含有中断向量表）</li>\n<li>用户进程的高地址部分</li>\n</ul>\n<h4 id=\"内存映射与保护\"><a class=\"anchor\" href=\"#内存映射与保护\">#</a> 内存映射与保护</h4>\n<p>通常使用重定位寄存器和界限地址寄存器实现</p>\n<p>重定位寄存器含有最小的物理地址值</p>\n<p>界限地址寄存器含有逻辑地址的范围值</p>\n<p>MMU 动态地将逻辑地址加上重定位寄存器的值映射为物理地址，再移交给内存单元</p>\n<p>重定位机制为操作系统提供了灵活性，可以动态改变操作系统大小（驱动的加载）</p>\n<h4 id=\"内存分配\"><a class=\"anchor\" href=\"#内存分配\">#</a> 内存分配</h4>\n<p><strong>多分区方法</strong>：将内存分为多个固定大小的分区 (partition)，每个分区只能容纳一个进程</p>\n<p>当一个分区空闲，就从输入队列中选择一个进程，调入到空闲分区</p>\n<p><strong>可变分区</strong>：使用一个表记录哪些内存可用和已占用。一大块可用内存称为<strong>孔 (hole)</strong></p>\n<p>动态存储分配问题：</p>\n<p>常用方法： 首次适应 (frist-fit)、最佳适应 (best-fit)、最差适应 (worst-fit)</p>\n<ul>\n<li>首次适应 First-fit： 分配第一个足够大孔，查找可以从头开始，也可以从上次首次适应结束时开始，一旦找到足够大的空闲孔，就可以停止</li>\n<li>最佳适应 Best-fit： 分配最小足够大的孔。必须查找整个列表，可以产生最小剩余孔</li>\n<li>最差适应 Worst-fit： 分配最大的孔。必须查找整个列表，可以产生最大剩余孔。</li>\n</ul>\n<p>首次适应和最佳适应的执行时间和利用空间都好于最差适应。首次适应方法最快。最差适应可以预留较大的孔。</p>\n<h4 id=\"碎片\"><a class=\"anchor\" href=\"#碎片\">#</a> 碎片</h4>\n<p>首次适应和最佳适应都会导致<strong>外部碎片问题</strong> (当所有总的可用内存之和可以满足请求，但不连续)</p>\n<p>**50%** 规则： 对采用首次适应方法，不管使用什么优化，假定由 N 个可分配块， 那么可能由 0.5N 个外部碎片，及 1/3 的内存可能不能使用</p>\n<p><strong>内部碎片</strong>：在分配块内的空间</p>\n<p>解决外部碎片的一个方法： 紧缩 (compaction)</p>\n<p>移动内存的内容，以便所有空闲空间合并成一整块。紧缩仅在重定位是<strong>动态并在运行时</strong>可采用。</p>\n<p>最简单的合并算法：简单地将所有进程移到内存的一段，而将所有的孔移动到内存的另一端， 以生成一个大的空闲块。这种方案<strong>开销较大</strong></p>\n<p>另一个解决方法：允许物理地址空间为非连续。</p>\n<h3 id=\"分页\"><a class=\"anchor\" href=\"#分页\">#</a> 分页</h3>\n<p>paging， 分页内存管理方案允许进程的物理地址空间可以时非连续的。</p>\n<h4 id=\"基本方法\"><a class=\"anchor\" href=\"#基本方法\">#</a> 基本方法</h4>\n<p>将物理内存分为固定大小的块，称为帧 (frame)， 将逻辑内存页分为同样大小的块， 称为页 (page)</p>\n<p>当需要执行进程时， 其页从备份存储中调入到可用的内存帧中。</p>\n<p>硬件支持：</p>\n<p>由 CPU 生成的每个地址分为两个部分，<strong>页号</strong> (p) 和<strong>页偏移</strong> (d)。 页号作为页表中的索引。页表包含每页所在物理内存的基地址，与页偏移组合形成物理地址。</p>\n<p>分页没有外部碎片，但是还是有内部碎片。</p>\n<p>分页的一个重要的特点时用户视角的内存和实际的物理内存的分离。</p>\n<p>帧表 (frame table) 中， 保存着物理存你的分配细节， 每个条目对应一个帧。</p>\n<p>分页增加的<strong>切换时间</strong>。</p>\n<h4 id=\"硬件支持\"><a class=\"anchor\" href=\"#硬件支持\">#</a> 硬件支持</h4>\n<p>页表的硬件实现，最简单的方法:</p>\n<p>将页表作为一组专用寄存器来实现。</p>\n<p>当页表比较大的时候，将页表放在<strong>内存</strong>中，</p>\n<p>** 页表基寄存器 (page-table base register, PTBR)** 指向页表</p>\n<p>** 页表长度寄存器 (Page-table length register, PRLR)** 表明页表的大小。</p>\n<p>不过需要两次内存访问， 内存访问速度减半。</p>\n<p>标准解决方案： 使用小但是专业且快速的硬件缓冲，称为<strong>转换表缓冲区 (translation look-aside buffer, TLB</strong>, 是关联的快速内存，由键（标签）和值组成。</p>\n<p>不过 TLB 中条目数不多，只包括页表中的一小部分，如果页码不再 TLB 中 (TLB 失效)，那么就需要访问页表，然后把页号和帧号存到 TLB 中，如果 TLB 已满， 就是用最少使用替换 (LRU) 或随机替换。并且允许有些条目固定下来。</p>\n<p>TLB 中还保存<strong>地址空间标识符 (address-space identifier, ASID</strong> , 可用来唯一标识进程，为其提供地址空间保护。保证当前运行进程的 ASIO 与虚拟页中 ASID 相匹配，如果不匹配就失效处理。如果不支持 ASID， 那么上下文切换的时候，TLB 就需要被冲刷 (flushed) 或删除。</p>\n<p>页号在 TLB 中被查找到的百分比称为<strong>命中率</strong></p>\n<p>有效访问时间 Effective Access Time（EAT）= 访问内存时间 _ 命中率 + （1 - 命中率）_ （访问页面 + 访问内存时间）</p>\n<h4 id=\"保护\"><a class=\"anchor\" href=\"#保护\">#</a> 保护</h4>\n<p>分页环境下， 内存保护是通过每个帧相关的保护位（保存在页表中）来实现的。</p>\n<p>使用一个位来定义一个页是可读写还是只读的</p>\n<p>使用<strong>有效位和无效位</strong>可以捕捉到非法地址</p>\n<h4 id=\"共享页\"><a class=\"anchor\" href=\"#共享页\">#</a> 共享页</h4>\n<p>分页的优点之一在于可以共享公共代码</p>\n<h3 id=\"页表结构\"><a class=\"anchor\" href=\"#页表结构\">#</a> 页表结构</h3>\n<h4 id=\"层次页表\"><a class=\"anchor\" href=\"#层次页表\">#</a> 层次页表</h4>\n<p>对于非常大的页表，可以将其划分为更小部分</p>\n<p>划分方法一： 两级分页算法，将页表再分页。逻辑地址由 {P1, P2, d} 组成， 也称为<strong>向前映射页表 (forward-mapped page table)</strong></p>\n<h4 id=\"哈希页表\"><a class=\"anchor\" href=\"#哈希页表\">#</a> 哈希页表</h4>\n<p>处理超过 32 位的地址空间常用哈希页表， 并以虚拟页码作为哈希值。</p>\n<p>哈希表中每个元素由 3 个域:</p>\n<ul>\n<li>虚拟页码</li>\n<li>所映射的帧号</li>\n<li>链表中下一个元素的指针</li>\n</ul>\n<p>变种： <strong>群集页表</strong> (clustered page table)， 适合 64 位，对于稀疏地址空间特别有用</p>\n<p>每一条目包括多页，一个页表条目可以存储多个物理页帧的映射。</p>\n<h4 id=\"反向页表\"><a class=\"anchor\" href=\"#反向页表\">#</a> 反向页表</h4>\n<p>通常情况下， 每个进程都有一个相关页表。页表是按照虚拟地址排序的，操作系统计算出对应条目在页表中的位置，并可以直接使用该值。那样就存在一个缺点：每个页表可能有很多项，可能会消耗大量的物理内存，却仅仅用于跟踪物理内存如何使用。</p>\n<p>反向页表，inverted page table， 对于每个真正的内存页或帧才有一个条目。每个条目包括保存在真正内存位置的页的虚拟地址以及拥有该页的进程的信息。</p>\n<p>这种方案减少了存储每个页表所需要的内存空间，但是增加了查找页表所需要的时间。</p>\n<p>反向页表按物理地址排序， 而查找是根据虚拟地址，因此可能需要查找整个表来寻求匹配。可以使用哈希页表 + TLB 来优化。</p>\n<p>而且反向页表实现共享内存比较困难，不能实现被映射到一个物理地址多个虚拟地址。</p>\n<h3 id=\"分段\"><a class=\"anchor\" href=\"#分段\">#</a> 分段</h3>\n<p>分页管理内存的问题：用户视角的内存和实际物理内存的分离。</p>\n<h4 id=\"基本方法-2\"><a class=\"anchor\" href=\"#基本方法-2\">#</a> 基本方法</h4>\n<p>分段 (segmentation) 是支持用户视角的内存管理方案。逻辑地址空间是由一组段组成的。每个段都有名称和长度。地址指定了段名称和段内偏移。</p>\n<p>用户通过段名称和偏移来指定地址。</p>\n<h4 id=\"硬件\"><a class=\"anchor\" href=\"#硬件\">#</a> 硬件</h4>\n<p>段表 (segment table) 实现将二维的用户定义定制映射为一维的物理地址。段表的每个条目都有<strong>段基地址（STBR）和段界限 (STLR)</strong>。段基地址包含该段在内存中开始的物理地址，段界限指定该段的长度。</p>\n<p>逻辑地址由：段号 s 和段内偏移 d 组成。</p>\n<p>MULTICS 系统通过<strong>分页</strong>来解决外部碎片和冗长搜索时间的问题。</p>\n<p>段表条目不包含段的基地址，而是包含此段的页表的基地址。</p>\n<h2 id=\"第-9-章-虚拟内存\"><a class=\"anchor\" href=\"#第-9-章-虚拟内存\">#</a> 第 9 章 虚拟内存</h2>\n<h3 id=\"背景-2\"><a class=\"anchor\" href=\"#背景-2\">#</a> 背景</h3>\n<p>能够执行只有部分在内存中的程序的好处：</p>\n<ul>\n<li>程序不再受现有的物理内存空间的限制，用户可以为一个巨大的虚拟地址空间编写程序，简化了变成工作量</li>\n<li>每个用户程序使用了更少物理内存，更多的程序可以同时运行，增加了 CPU 使用率。</li>\n<li>载入或交换每个用户程序到内存内所需的 I/O 变少。</li>\n</ul>\n<p>虚拟内存 (virtual memory) 将用户逻辑内存与物理内存分开。</p>\n<p>进程的虚拟地址空间就是进程如何在内存中存放的逻辑 (或虚拟) 视图</p>\n<p>随着动态内存的分配，对可以向上生长，随着子程序的不断调用，栈可以向下生长，堆栈之间的巨大空白空间为虚拟地址的一部分。称为稀地址空间。</p>\n<p>虚拟内存也允许文件和内存通过共享页而为两个或多个进程所共享。优点：</p>\n<ul>\n<li>将共享对象映射到虚拟地址空间，系统库可为多个进程所共享</li>\n<li>虚拟内存允许进程共享内存</li>\n<li>允许在用系统调用 <code>fork</code>  创建进程期间共享页，从而加快进程的创建</li>\n</ul>\n<h3 id=\"按需调页\"><a class=\"anchor\" href=\"#按需调页\">#</a> 按需调页</h3>\n<p>demand paging, 在需要的时时候才调入相应的页。</p>\n<p>好处:</p>\n<ul>\n<li>更少的 I/O</li>\n<li>更少的内存需求</li>\n<li>更快的响应</li>\n<li>更多的用户</li>\n</ul>\n<p>按需调用类似于使用交换的分页系统，进程驻留在第二季存储器上。使用懒惰交换 (lazy swapper)</p>\n<p>区别：</p>\n<ul>\n<li>交换对整个进程进程操作</li>\n<li>调页程序 (paper)，只对进程的单个页进程操作。</li>\n</ul>\n<h4 id=\"基本概念-2\"><a class=\"anchor\" href=\"#基本概念-2\">#</a> 基本概念</h4>\n<p>换入进程时，调页程序推测在该进程再次换出之前会用到哪些页。把必须的页调入进程，避免了读入不使用的页，减少了交换时间和所需物理内存空间。</p>\n<p>使用 ** 有效 - 无效位 (valid0invalid bit)** 区分哪些页在内存里。</p>\n<p>当进程视图访问尚未调入到内存的页， 就会产生<strong>页错误陷阱 (page-fault trap)</strong>。</p>\n<p>处理错误的程序：</p>\n<ul>\n<li>检查进程的内部页表，以确定该引用是合法还是非法的地址访问</li>\n<li>如果引用非法，那么就中止进程。如果引用有效但是尚未调入页面，那么现在调入</li>\n<li>找到一个空闲帧\n<ul>\n<li>如果没有空闲帧，使用页面置换</li>\n</ul>\n</li>\n<li>调度一个磁盘操作，一般从所需要的页调入刚分配的帧</li>\n<li>当磁盘读操作完成后， 修改进程的内部表和页表，以表示该页已经在内存中。</li>\n<li>重新开始因陷阱而中断的指令。</li>\n</ul>\n<p><strong>纯粹按需调页 (pure demand paging)</strong></p>\n<p>一开始所有的页都不在内存中，只有在需要时才将页调入内存。</p>\n<p>程序应具有<strong>局部引用 (locality of reference)</strong>，才能使得按需调页性能较为合理。</p>\n<p>支持按需调页的硬件:</p>\n<ul>\n<li>页表：通过有效 - 无效位或保护位的特定值，将条目设为无效</li>\n<li>次级存储器：保护不再内存中的页。称为<strong>交换空间 (swap space)</strong></li>\n</ul>\n<p>请求调页的关键要求：在页错误后重新执行指令。</p>\n<p>主要困难：一个指令可能改变多个不同的位置或者源和目的块由重叠。当指令执行到一半的时候，页错误后不能简单地再次执行该指令。</p>\n<p>解决方案：</p>\n<ul>\n<li>微码计算并试图访问两块的两端，先检测是否有页错误再执行移动。</li>\n<li>使用临时寄存器来保存覆盖位置的值</li>\n</ul>\n<h4 id=\"按需调页的性能\"><a class=\"anchor\" href=\"#按需调页的性能\">#</a> 按需调页的性能</h4>\n<p>有效访问时间 = (1−p)×ma (内存访问时间)+p× 页错误时间</p>\n<p>主要页错误处理时间：</p>\n<ul>\n<li>处理页错误中断</li>\n<li>读入页</li>\n<li>重新启动进程</li>\n</ul>\n<p>按需调页的另一个重要方面是交换空间的处理和使用。如果进程开始将整个文件镜像复制到交换空间，并从交换重建执行按页调度，效果会更好。也可以从文件系统中按需调页到交换空间。</p>\n<h3 id=\"写时复制\"><a class=\"anchor\" href=\"#写时复制\">#</a> 写时复制</h3>\n<p>Copy-on-Write, COW</p>\n<p>这种方法允许父进程与子进程开始时共享同一页面。这些页面标记为写时复制页， 即如果任何一个进程需要对页进行写操作，那么就创建一个共享页的副本</p>\n<p>从空闲缓冲池分配空闲页，用<strong>按需填零 (zero-fill-on-demand)</strong> (在分配前先填 0，清除以前的内容) 分配页。</p>\n<p><code>vfork()</code> ：将父进程挂起， 子进程使用父进程的地址空间。</p>\n<h3 id=\"页面置换\"><a class=\"anchor\" href=\"#页面置换\">#</a> 页面置换</h3>\n<p>如果增加了多道程序，那么会过度分配 (over-allocating)</p>\n<p>操作系统可以交换出一个进程，释放其所有帧，降低多道程序的基本。</p>\n<h4 id=\"基本页置换\"><a class=\"anchor\" href=\"#基本页置换\">#</a> 基本页置换</h4>\n<ul>\n<li>查找所需页在页面上的位置</li>\n<li>查找一个空闲帧\n<ul>\n<li>如果有空闲帧，使用它</li>\n<li>如果没有，那么就使用页置换算法选择一个<strong>牺牲帧 (victim frame)</strong></li>\n<li>将牺牲帧写入磁盘，改变页表和帧表</li>\n</ul>\n</li>\n<li>将所需页读入新的空闲帧，改变页表和帧表</li>\n<li>重启用户进程</li>\n</ul>\n<p>可以通过 ** 修改位 (modify bit)<strong> 或</strong>脏位 (dirty bit)** 以降低额外开销。以决定牺牲帧是否需要写到磁盘上去。</p>\n<p>需要<strong>帧分配算法 (frame-allocation algorithm)<strong> 和</strong>页置换算法 (page-replacement algorithm)</strong></p>\n<p>置换算法：通常使用最小页错误率的算法</p>\n<h4 id=\"fifo-页置换\"><a class=\"anchor\" href=\"#fifo-页置换\">#</a> FIFO 页置换</h4>\n<p>最简单的页置换方法。</p>\n<p><strong>Belady 异常 (Belady’s anomaly)</strong>：对有的页置换算法，页错误率可能会随着所分配的帧数的<strong>增加而增加</strong>。</p>\n<p>FIFO 算法容易实现，但是所替代的页可能包含一个以前初始化并且不断使用常用变量。</p>\n<h4 id=\"最优置换\"><a class=\"anchor\" href=\"#最优置换\">#</a> 最优置换</h4>\n<p>optimal page-replacement algorithm</p>\n<p>搜索所产生的<strong>页错误率是最低的</strong>，且绝没有 Belady 异常问题。</p>\n<p>称为 OPT 或 MIN，置换<strong>最长时间不会使用</strong>的页。</p>\n<p>难点：需要引用串的未来知识。</p>\n<h4 id=\"lru-页置换\"><a class=\"anchor\" href=\"#lru-页置换\">#</a> LRU 页置换</h4>\n<p>最近最少使用算法 (least-recently-used (LRU) algorithm)</p>\n<p>LRU 选择<strong>最长时间没有使用的页</strong>来置换。</p>\n<p>实现方法：</p>\n<ul>\n<li>计数器：为每个页表项关联一个使用时间域，并为 CPU 增加一个逻辑时钟或计数器。每次内存引用，计数器都增加，并且时钟寄存器内容会被复制到相应页所对应页表项的使用时间域内。置换具有最小时间的页。每次都需要搜索页表并且写入内存，页表改变页需要保持时间。</li>\n<li>栈：每引用一个页，就该页从栈中删除并放到顶部。</li>\n</ul>\n<p>没有 Belady 异常，和最优置换属于同一类算法 (栈算法)</p>\n<p>如果每次引用都需要中断，就使得内存引用慢至少 10 倍，因此需要硬件支持。</p>\n<h4 id=\"近似-lru-页置换\"><a class=\"anchor\" href=\"#近似-lru-页置换\">#</a> 近似 LRU 页置换</h4>\n<p>LRU Approximation Algorithms</p>\n<p>使用引用位</p>\n<h5 id=\"附加引用位算法\"><a class=\"anchor\" href=\"#附加引用位算法\">#</a> 附加引用位算法</h5>\n<p>为位于内存内的每个表中的页保留一个 8 位的字节，再规定时间间隔内，将引用位转移到 8 位字节的高位，然后其他位右移。8 位字节的无符号整数<strong>最小值</strong>的页为 LRU 页，可以被置换。</p>\n<p>如果历史位降为 0，就是<strong>第二次机会页置换算法 (second-chance page-replacement algorithm)</strong></p>\n<h5 id=\"二次机会算法\"><a class=\"anchor\" href=\"#二次机会算法\">#</a> 二次机会算法</h5>\n<p>基本算法还是 FIFO 算法，当引用位为 1 时，给该页第二次机会，并将引用位清零。</p>\n<p>如果所有位被设置为 1，那就是 FIFO 置换</p>\n<p>一种实现方法就是使用循环队列。</p>\n<h5 id=\"增强型二次机会算法\"><a class=\"anchor\" href=\"#增强型二次机会算法\">#</a> 增强型二次机会算法</h5>\n<p>使用引用位和修改位作为有序对</p>\n<ul>\n<li>(0, 0): 用于置换最佳页</li>\n<li>(0, 1): 最近没有使用但是修改过，不是很好</li>\n<li>(1, 0): 最近使用过但是没有修改，可能很快被使用</li>\n<li>(1, 1)</li>\n</ul>\n<p>检查页的类型，置换最低非空类中的页。</p>\n<p>给<strong>修改过的页</strong>更高的级别，降低所需 I/O</p>\n<h4 id=\"基于计数的页置换\"><a class=\"anchor\" href=\"#基于计数的页置换\">#</a> 基于计数的页置换</h4>\n<h5 id=\"最不经常使用页置换算法\"><a class=\"anchor\" href=\"#最不经常使用页置换算法\">#</a> 最不经常使用页置换算法</h5>\n<p>least frequently used(LFU) page-replacement algorithm</p>\n<p>置换计数最小的页，并且定期将次数寄存器有移，<strong>指数衰减</strong>平均使用次数</p>\n<h5 id=\"最常使用页支援算法\"><a class=\"anchor\" href=\"#最常使用页支援算法\">#</a> 最常使用页支援算法</h5>\n<p>most frequently used(MFU)page-replacement-algorithm</p>\n<p>具有最小次数可能刚刚调进来，还没有使用。</p>\n<h4 id=\"页缓冲算法\"><a class=\"anchor\" href=\"#页缓冲算法\">#</a> 页缓冲算法</h4>\n<p>系统通常保留一个空闲帧缓冲池，无需等待牺牲帧写出，就可以尽可能快地重启。</p>\n<p>或者保留一个空闲帧池，发生页错误时可以先搜索空闲帧池，此时不需要 I/O</p>\n<h4 id=\"应用程序与页置换\"><a class=\"anchor\" href=\"#应用程序与页置换\">#</a> 应用程序与页置换</h4>\n<p>有的操作系统允许特殊程序将磁盘作为逻辑块数组使用，不需要通过文件系统，称为<strong>生磁盘 (raw disk)</strong> ，对数组的 I/O 称为<strong>生 I/O</strong></p>\n<p>应用程序可以使用适合自己的置换模式。</p>\n<h3 id=\"帧分配\"><a class=\"anchor\" href=\"#帧分配\">#</a> 帧分配</h3>\n<h4 id=\"帧的最少数量\"><a class=\"anchor\" href=\"#帧的最少数量\">#</a> 帧的最少数量</h4>\n<p>帧分配策略受到的限制:</p>\n<ul>\n<li>所分配的帧不能超过可用帧的数量</li>\n<li>必须分配至少最少数量的帧\n<ul>\n<li>性能</li>\n<li>必须有足够的帧来容纳所有单个指令所引用的页</li>\n</ul>\n</li>\n</ul>\n<p>每个进程帧的最少数量是由体系结构决定，而最大数量是由物理内存的数量来决定的。</p>\n<h4 id=\"分配算法\"><a class=\"anchor\" href=\"#分配算法\">#</a> 分配算法</h4>\n<ul>\n<li>固定分配 fixed allocation\n<ul>\n<li>平均分配 (equal allocation)： n 个进程之间分配 m 帧， 每个进程 mnmn 帧</li>\n<li>比例分配 (Proportional allocation)：根据进程大小，将可用内存分配给每个进程。</li>\n</ul>\n</li>\n<li>优先级分配 priority allocation\n<ul>\n<li>一开始使用比例分配</li>\n<li>如果进程发生页错误，可以从低优先级的进程选择帧置换</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"全局分配与局部分配\"><a class=\"anchor\" href=\"#全局分配与局部分配\">#</a> 全局分配与局部分配</h4>\n<p>全局置换：从所有帧集合中选择一个置换帧（问题：进程不能控制其页错误率，但是具有更好的系统吞吐量，可以使用其他进程不常用的内存）</p>\n<p>局部置换：从自己分配帧中进行选择</p>\n<h3 id=\"系统颠簸\"><a class=\"anchor\" href=\"#系统颠簸\">#</a> 系统颠簸</h3>\n<p>Thrashing， 进程没有足够的页，发生频繁的页调度行为，在换页上用的时间要多于执行时间，这个进程就在颠簸</p>\n<h4 id=\"系统颠簸的原因\"><a class=\"anchor\" href=\"#系统颠簸的原因\">#</a> 系统颠簸的原因</h4>\n<p>颠簸导致严重的性能问题</p>\n<p>当 CPU 使用率比较低的时候，CPU 调度程序就会增加多道程序的程度，就会引起更多的页错误。当继续增加多道程序的程度，就会出现系统颠簸，系统吞吐量陡降，页错误增加，有效内存访问时间增加。</p>\n<p>局部置换算法（或优先置换算法）可以限制系统颠簸。但是即使没有颠簸，也会增加其有效访问时间。</p>\n<p>工作集合策略研究一个进程实际使用多少帧，定义了进程执行的<strong>局部模型（locality model）</strong></p>\n<p>局部模型说明当进程执行时，从一个局部移到另一个局部。局部是一个进程使用页的集合。一个程序通常由多个不同局部组成。</p>\n<p>如果分配的帧数小于现有的局部大小，系统就会颠簸。</p>\n<h4 id=\"工作集合模型\"><a class=\"anchor\" href=\"#工作集合模型\">#</a> 工作集合模型</h4>\n<p>working-set model，是基于局部性假设的。</p>\n<p>最近引用的页集合称为<strong>工作集合 (working set)</strong></p>\n<p>工作集合窗口 (working-set window)</p>\n<ul>\n<li>如果太小则不能包含整个局部</li>\n<li>如果太大可能包含多个局部</li>\n<li>如果为无穷大，那么就为进程执行所接触的所有页的集合</li>\n</ul>\n<p>总的帧需求量 = 每个进程工作集合的和</p>\n<p>如果总需求大于可用帧的数量，那么有的进程就得不到足够的帧，系统就会出现颠簸。</p>\n<p>工作集合策略：系统跟踪每个进程的工作集合，并为进程分配大于其工作集合的帧数。</p>\n<ul>\n<li>有空闲帧：启动另一进程</li>\n<li>所有工作集合之和大于总的可用帧数：暂停一个进程</li>\n</ul>\n<p>防止了颠簸，并尽可能提高多道程序程序，优化了 CPU 使用率</p>\n<p>困难：跟踪工作集合。</p>\n<p>使用中断和引用位（历史位），判断是否在工作集合。</p>\n<h4 id=\"页错误频率\"><a class=\"anchor\" href=\"#页错误频率\">#</a> 页错误频率</h4>\n<p>page-fault frequency, PFF</p>\n<p>防止颠簸更为直接的方法。</p>\n<p>通过页错误频率判断是否需要帧。</p>\n<p>如果实际错误率低，那么就放弃一些帧</p>\n<p>如果实际错误率高，那么就获得一些帧</p>\n<h3 id=\"内存映射文件\"><a class=\"anchor\" href=\"#内存映射文件\">#</a> 内存映射文件</h3>\n<p>将文件 I/O 作为普通内存访问，称为文件的内存映射 (memory mapping)</p>\n<p>开始的文件访问按普通的请求页面调度来进行，会产生页错误。</p>\n<p>简化了文件访问和使用</p>\n<p>允许多个进程将同一文件映射到各自的虚拟内存中，以允许<strong>数据共享</strong></p>\n<h3 id=\"内核内存的分配\"><a class=\"anchor\" href=\"#内核内存的分配\">#</a> 内核内存的分配</h3>\n<p>内核内存分配通常是从空闲内存池中获取的，而不是从满足普通用户模式进程的内存链表中获取。</p>\n<ul>\n<li>内核需要为不同大小的数据结构分配内存</li>\n<li>用户进程所分配的页不必要在连续的内存，而有的硬件需要</li>\n</ul>\n<h3 id=\"其他考虑\"><a class=\"anchor\" href=\"#其他考虑\">#</a> 其他考虑</h3>\n<h4 id=\"预调页\"><a class=\"anchor\" href=\"#预调页\">#</a> 预调页</h4>\n<p>prepaging</p>\n<p>试图阻止大量的初始调页。</p>\n<p>预调页成本应该小于处理相应页错误的成本</p>\n<h4 id=\"页大小\"><a class=\"anchor\" href=\"#页大小\">#</a> 页大小</h4>\n<p>总的来说趋向大的页</p>\n<p>内部碎片和局部性需要小页</p>\n<p>表大小和 I/O 时间需要大页</p>\n<h4 id=\"tlb-范围\"><a class=\"anchor\" href=\"#tlb-范围\">#</a> TLB 范围</h4>\n<p>TLB 命中率 hit ratio：通过 TLB 而不是页表进行的虚拟地址转换的百分比</p>\n<p>增加 TLB 条数可以增加命中率</p>\n<p>TLB 范围：通过 TLB 可以访问的内存量，等于 TLB 条数和页大小的积</p>\n<p>可以通过增加页的大小或者提供多种页大小增加 TLB 范围</p>\n<h4 id=\"反向页表-2\"><a class=\"anchor\" href=\"#反向页表-2\">#</a> 反向页表</h4>\n<p>可以降低为了跟踪虚拟地址到物理地址转换所需的物理内存的数量</p>\n<h4 id=\"程序结构\"><a class=\"anchor\" href=\"#程序结构\">#</a> 程序结构</h4>\n<p>数据结构和程序结构的仔细选择可以增加局部性，避免过多的页错误</p>\n<p>编译器和载入器对调页也有重要影响</p>\n<h4 id=\"io-互锁\"><a class=\"anchor\" href=\"#io-互锁\">#</a> I/O 互锁</h4>\n<p>I/O Interlock</p>\n<p>有时需要允许有些页在内存中被锁住（当需要对用户的内存进行 I/O 时）</p>\n<p>解决方法：</p>\n<ul>\n<li>不对用户内存进行 I/O，在系统内存和 I/O 设备之间进行，会带来高开销</li>\n<li>允许页锁在内存中，每个帧有一个锁住位</li>\n</ul>\n<h1 id=\"第四部分-存储管理\"><a class=\"anchor\" href=\"#第四部分-存储管理\">#</a> 第四部分 存储管理</h1>\n<h2 id=\"第-10-章-文件系统接口\"><a class=\"anchor\" href=\"#第-10-章-文件系统接口\">#</a> 第 10 章 文件系统接口</h2>\n<p>文件系统的组成：</p>\n<ul>\n<li>文件（存储相关数据）</li>\n<li>目录结构（组织系统内的文件并体哦概念股有关文件的信息）</li>\n</ul>\n<h3 id=\"文件概念\"><a class=\"anchor\" href=\"#文件概念\">#</a> 文件概念</h3>\n<p>记录在外存上的相关信息具有名称的集合</p>\n<p>连续的逻辑地址空间</p>\n<p>类型：</p>\n<ul>\n<li>数据</li>\n<li>程序</li>\n</ul>\n<p>文件结构：</p>\n<ul>\n<li>二进制</li>\n<li>简单的记录结构\n<ul>\n<li>线性</li>\n<li>定长</li>\n<li>可变长度</li>\n</ul>\n</li>\n<li>复杂的结构\n<ul>\n<li>格式化的文档</li>\n<li>动态加载的文件</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"文件属性\"><a class=\"anchor\" href=\"#文件属性\">#</a> 文件属性</h4>\n<p>通常包括属性：</p>\n<ul>\n<li>名称 Name</li>\n<li>标识符 Identifier</li>\n<li>类型 Type</li>\n<li>位置 Location</li>\n<li>大小 Size</li>\n<li>保护 Protection</li>\n<li>时间、日期和用户标识 Time, data and user identification</li>\n</ul>\n<p>文件信息保存在目录结构中。</p>\n<h4 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h4>\n<ul>\n<li>创建文件 Create：\n<ul>\n<li>为文件在文件系统中找到空间</li>\n<li>在目录中创建一个条目</li>\n</ul>\n</li>\n<li>写文件 Write</li>\n<li>读文件 Read</li>\n<li>在文件内重定位 Reposition within file</li>\n<li>删除文件 Delete</li>\n<li>截短文件 Truncate：\n<ul>\n<li>删除内容但保留属性</li>\n</ul>\n</li>\n</ul>\n<p>系统维护一个包含所有打开文件的信息表 (打开文件表， open-file table)</p>\n<p>打开文件的信息：</p>\n<ul>\n<li>文件指针</li>\n<li>文件打开计数器</li>\n<li>文件磁盘位置</li>\n<li>访问权限</li>\n</ul>\n<p>文件还有加锁机制</p>\n<ul>\n<li>强制 Mandatory：系统阻止其他进程访问已加锁的文件</li>\n<li>建议 Advisory：在访问文件之前需要取得锁</li>\n</ul>\n<h4 id=\"文件类型\"><a class=\"anchor\" href=\"#文件类型\">#</a> 文件类型</h4>\n<p>UNIX 系统采用幻数 (magic number)(保存在文件的开始部分) 大致表明文件类型。也可以根据扩展名。</p>\n<h4 id=\"文件结构\"><a class=\"anchor\" href=\"#文件结构\">#</a> 文件结构</h4>\n<p>用于表示文件的内部结构</p>\n<h4 id=\"内部文件结构\"><a class=\"anchor\" href=\"#内部文件结构\">#</a> 内部文件结构</h4>\n<p>一般会将若干个逻辑记录打包，再放入物理记录。</p>\n<h3 id=\"访问方法\"><a class=\"anchor\" href=\"#访问方法\">#</a> 访问方法</h3>\n<h4 id=\"顺序访问\"><a class=\"anchor\" href=\"#顺序访问\">#</a> 顺序访问</h4>\n<p>文件信息按顺序，一个记录接着一个记录低加以处理</p>\n<p>适用于顺序访问设备和随机访问设备</p>\n<h4 id=\"直接访问\"><a class=\"anchor\" href=\"#直接访问\">#</a> 直接访问</h4>\n<p>文件由固定长度的逻辑记录组成，以允许程序按任意顺序进行快速读写。常用于访问大量信息（数据库）</p>\n<h4 id=\"其他访问方式\"><a class=\"anchor\" href=\"#其他访问方式\">#</a> 其他访问方式</h4>\n<p>通常涉及创建文件索引，索引包括各块的指针。</p>\n<h3 id=\"目录结构\"><a class=\"anchor\" href=\"#目录结构\">#</a> 目录结构</h3>\n<h4 id=\"存储结构-2\"><a class=\"anchor\" href=\"#存储结构-2\">#</a> 存储结构</h4>\n<p>磁盘可以整体地用于一个文件系统，也可以每一个分区创建一个文件系统，也可以多个磁盘创建一个分区。</p>\n<p>一个分区分为目录和文件</p>\n<h4 id=\"目录概述\"><a class=\"anchor\" href=\"#目录概述\">#</a> 目录概述</h4>\n<p>目录可以看作符号表，他能将文件名称转换成目录条目。</p>\n<p>目录的操作：</p>\n<ul>\n<li>搜索文件</li>\n<li>创建文件</li>\n<li>删除文件</li>\n<li>遍历目录</li>\n<li>重命名文件</li>\n<li>跟踪文件系统</li>\n</ul>\n<p>目标:</p>\n<ul>\n<li>效率： 快速定位文件</li>\n<li>命名：\n<ul>\n<li>两个用户对于不同的文件可以有相同的名字</li>\n<li>相同的文件可以有不同的名字</li>\n</ul>\n</li>\n<li>分组</li>\n<li>多用户系统的共享</li>\n</ul>\n<h4 id=\"单层结构目录\"><a class=\"anchor\" href=\"#单层结构目录\">#</a> 单层结构目录</h4>\n<p>最简单的目录结构，所有文件都包含在同一目录，便于理解和支持。</p>\n<h4 id=\"双重结构目录\"><a class=\"anchor\" href=\"#双重结构目录\">#</a> 双重结构目录</h4>\n<p>主文件目录 (master file directory, MFD)</p>\n<p>为每个用户创建独立目录（user file directory, UFD）</p>\n<p>对用户进行了隔离，解决了名称冲突的问题</p>\n<p>缺点：用户需要某个任务上进行合作和访问其他文件的要求，还有系统文件的共享</p>\n<p>解决方法：修改搜索步骤，设置一个搜索路径（包括系统文件）</p>\n<h4 id=\"树状结构目录\"><a class=\"anchor\" href=\"#树状结构目录\">#</a> 树状结构目录</h4>\n<p>将目录结构扩展为任意高度的树</p>\n<p>目录包括一组文件和子目录</p>\n<p>路径名：绝对路径和相对路径</p>\n<ul>\n<li>绝对路径名：从根开始并给出路径上的目录名直到所指定的文件</li>\n<li>当前目录名：从当前目录开始定义路径</li>\n</ul>\n<p>用户初始当前目录在用户进程开始或者用户登陆时指定</p>\n<p>允许用户自定义自己的子目录结构，按一定结构组织文件</p>\n<p>还能访问其他用户的路径</p>\n<h4 id=\"无环图目录\"><a class=\"anchor\" href=\"#无环图目录\">#</a> 无环图目录</h4>\n<p>树状结构禁止共享文件和目录，无环图 (acyclic graph) 允许共享子目录和文件。</p>\n<p>无环图是树状结构的扩展</p>\n<p>实现共享文件和目录的方法：</p>\n<ul>\n<li>创建一个称为链接的新目录条目（特殊的类型或目录条目格式），实际上是另一文件或目录的指针。</li>\n<li>重复所有共享文件的信息，修改文件时需要维护一致性。</li>\n</ul>\n<p>存在的问题：</p>\n<ul>\n<li>一个文件可以有多个绝对路径名。对于遍历操作需要注意重复。</li>\n<li>删除会留下悬挂指针指向不再存在的文件</li>\n</ul>\n<p>对于链接，一般的做法为，如果原文件被删除，其符号链接并不删除。</p>\n<p>删除的另一方法：保留文件直到删除其所有引用为止。需要为每个文件保留一个引用列表或计数。</p>\n<h4 id=\"通用图目录\"><a class=\"anchor\" href=\"#通用图目录\">#</a> 通用图目录</h4>\n<p>当树状结构目录增加链接时，树状结构就会被破坏，产生简单的图结构。（可能存在环）</p>\n<p>问题：</p>\n<ul>\n<li>遍历可能会死循环或者多重遍历</li>\n<li>无法确定什么时候可以删除</li>\n</ul>\n<p>避免多次搜索同一部分的解决方法：</p>\n<ul>\n<li>限制搜索时访问目录次数</li>\n<li>遍历目录时避开链接</li>\n</ul>\n<p>当存在自我引用时候，引用计数不可能为 0，因此需要垃圾收集，但是极为费时。</p>\n<p><strong>垃圾收集方案</strong>：遍历整个文件系统，并标记所有可访问的空间，第二次遍历将没有标记的收集到空闲空间链表上。（标记方法可以确保只进行一次遍历）</p>\n<p>如何使得无环：</p>\n<ul>\n<li>只允许链接到文件</li>\n<li>垃圾回收</li>\n<li>新建链接得时候检测环</li>\n</ul>\n<h3 id=\"文件系统挂载\"><a class=\"anchor\" href=\"#文件系统挂载\">#</a> 文件系统挂载</h3>\n<p>文件系统在被系统上的进程使用之前必须挂载 (mount)</p>\n<p>挂载步骤：</p>\n<ul>\n<li>确定<strong>挂载点</strong> (mount point)， 通常为空目录</li>\n<li>验证设备上是否存在有效文件系统（通过驱动读取目录验证）</li>\n</ul>\n<p>不同系统的结果：</p>\n<ul>\n<li>不允许在包含文件目录下挂载\n<ul>\n<li>或使已存在的文件不可见，直到文件系统被卸载</li>\n</ul>\n</li>\n<li>允许多次重复挂载\n<ul>\n<li>或只允许挂载一次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件共享\"><a class=\"anchor\" href=\"#文件共享\">#</a> 文件共享</h3>\n<h4 id=\"多用户\"><a class=\"anchor\" href=\"#多用户\">#</a> 多用户</h4>\n<p>绝大多数多用户系统采用文件（或目录）拥有者（或用户）和组的概念。</p>\n<p>拥有着：目录最高控制权的用户，可以改变属性和授权访问。</p>\n<p>组：对文件拥有相同权限的用户子集。</p>\n<p>拥有者 ID 和组 ID 于文件属性一起保存</p>\n<h4 id=\"远程文件系统\"><a class=\"anchor\" href=\"#远程文件系统\">#</a> 远程文件系统</h4>\n<p>远程文件共享方式：</p>\n<ul>\n<li>通过程序（如 ftp）实现文件的人工传输\n<ul>\n<li>匿名或验证访问</li>\n</ul>\n</li>\n<li>分布式文件系统 (DFS)，远程目录可本机直接访问\n<ul>\n<li>紧密结合</li>\n</ul>\n</li>\n<li>万维网，使用浏览器访问\n<ul>\n<li>几乎总是匿名</li>\n</ul>\n</li>\n</ul>\n<p><strong>客户机 - 服务器模型</strong></p>\n<ul>\n<li>服务器可以服务多个客户端</li>\n<li>验证一般不太安全，可能会被欺骗</li>\n<li>UNIX 的网络文件系统 NFS</li>\n<li>Windows 的标准协议 CIFS</li>\n</ul>\n<p><strong>分布式信息系统</strong></p>\n<p>也称分布式命名服务 distributed naming services</p>\n<p>提供用于远程计算所需信息的同一访问，域名系统 (DNS) 为整个 Internet 提供了主机名称到网络地址的转换</p>\n<p><strong>故障模式</strong></p>\n<p>恢复故障需要在客户机和服务器之间一定的状态信息</p>\n<p>无状态的 NFS 在每个请求包含了所有信息，恢复很简单但是不安全</p>\n<h4 id=\"一致性语义\"><a class=\"anchor\" href=\"#一致性语义\">#</a> 一致性语义</h4>\n<p>consistency semantics</p>\n<p>是评估文件系统对文件共享支持的一个重要准则</p>\n<p>规定了一个用户所修改的数据何时对另一用户可见。</p>\n<p>在 <code>open()</code>  和 <code>close()</code>  操作之间的一系列访问称为文件会话</p>\n<p>一致性语义：</p>\n<ul>\n<li>UNIX 语义\n<ul>\n<li>一个文件于单个物理映射相关联，是互斥资源</li>\n<li>一个用户对文件的修改可以理解被其他用户看到</li>\n<li>允许多用户共享文件指针</li>\n</ul>\n</li>\n<li>会话语义（AFS）\n<ul>\n<li>一个文件同时可与多个物理映射暂时相关联，允许并发读写</li>\n<li>一个用户对文件的写不能立即被其他用户看到</li>\n<li>一旦文件关系，对其的修改只能被以后打开的会话看到</li>\n</ul>\n</li>\n<li>不可修改共享文件语义\n<ul>\n<li>只能读</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"保护-2\"><a class=\"anchor\" href=\"#保护-2\">#</a> 保护</h3>\n<p>使信息不受物理损坏（可靠性）和非法访问（保护）</p>\n<p>可靠性由文件备份提供。</p>\n<p>保护有多种方法。</p>\n<h4 id=\"访问类型\"><a class=\"anchor\" href=\"#访问类型\">#</a> 访问类型</h4>\n<p>如果系统允许对其他用户文件进行访问，那么就需要文件保护</p>\n<p>控制访问 controlled access</p>\n<p>控制的操作类型:</p>\n<ul>\n<li>读</li>\n<li>写</li>\n<li>执行</li>\n<li>添加</li>\n<li>删除</li>\n<li>列表清单</li>\n</ul>\n<h4 id=\"访问控制\"><a class=\"anchor\" href=\"#访问控制\">#</a> 访问控制</h4>\n<p>解决保护问题的常用方法：根据用户身份进行控制</p>\n<p>实现基于身份访问的普通方法：增加一个访问控制列表（access-control list，ACL），给定每个用户名及其允许的访问类型</p>\n<p>缺点：</p>\n<ul>\n<li>当不知道用户列表时，创建列表会比较麻烦</li>\n<li>目录条目必须可变大小，不利于空间管理</li>\n</ul>\n<p>改进：</p>\n<p>为拥有着、组、其他创建访问列表</p>\n<p>三种访问模式：</p>\n<ul>\n<li>Read</li>\n<li>Write</li>\n<li>Execute</li>\n</ul>\n<p>三种用户类型：</p>\n<ul>\n<li>Owner access</li>\n<li>Group access</li>\n<li>Public access</li>\n</ul>\n<h4 id=\"其他保护方式\"><a class=\"anchor\" href=\"#其他保护方式\">#</a> 其他保护方式</h4>\n<p>为每个文件加上密码</p>\n<h2 id=\"第-11-章-文件系统的实现\"><a class=\"anchor\" href=\"#第-11-章-文件系统的实现\">#</a> 第 11 章 文件系统的实现</h2>\n<h3 id=\"文件系统结构\"><a class=\"anchor\" href=\"#文件系统结构\">#</a> 文件系统结构</h3>\n<p>磁盘的特点：</p>\n<ul>\n<li>可以原地重写</li>\n<li>可以直接访问磁盘上任意一块信息</li>\n</ul>\n<p>文件系统的设计问题：</p>\n<ul>\n<li>如何定义文件系统对用户的接口</li>\n<li>创建数据结构和算法将逻辑文件系统映射到物理外存设备</li>\n</ul>\n<p>分层设计的文件系统：</p>\n<ul>\n<li>应用程序</li>\n<li>逻辑文件系统\n<ul>\n<li>管理元数据（文件系统的所有结构数据，不包括实际数据）</li>\n<li>根据符号文件名管理目录结构，提供文件组织模块信息</li>\n<li>通过<strong>文件控制块</strong>（file control block，FCB，包括文件的信息）维护文件结构</li>\n<li>负责保护和安全</li>\n</ul>\n</li>\n<li>文件组织系统\n<ul>\n<li>将逻辑块（簇）地址转换成物理块地址</li>\n<li><strong>空闲空间管理器</strong>，跟踪未分配的块并根据要求提供文件组织模块</li>\n</ul>\n</li>\n<li>基本文件系统\n<ul>\n<li>向驱动发送一般命令，对磁盘上<strong>物理块</strong>进行读写</li>\n</ul>\n</li>\n<li>I/O 控制\n<ul>\n<li>最底层</li>\n<li>由设备驱动程序（翻译器、控制硬件控制器）和中断处理程序组成</li>\n<li>实现内存与磁盘之间信息传输</li>\n</ul>\n</li>\n<li>设备</li>\n</ul>\n<h3 id=\"文件系统实现\"><a class=\"anchor\" href=\"#文件系统实现\">#</a> 文件系统实现</h3>\n<h4 id=\"概述-2\"><a class=\"anchor\" href=\"#概述-2\">#</a> 概述</h4>\n<p>引导控制块 (boot control block)：</p>\n<ul>\n<li>包括系统从该卷引导操作系统所需要的信息</li>\n<li>UFS 中的<strong>引导块 (boot block)</strong></li>\n<li>NTFS 中的<strong>分区引导扇区 (partition boot sector)</strong></li>\n</ul>\n<p>卷控制块 (volume control block)</p>\n<ul>\n<li>包括卷（或分区）的详细信息</li>\n<li>UFS 中的<strong>超级块 (superblock)</strong></li>\n<li>NTFS 中的<strong>主控文件表 (Master File Table)</strong></li>\n</ul>\n<p>目录结构</p>\n<ul>\n<li>组织文件</li>\n<li>UFS 包含文件名、相关索引节点 (index) 号</li>\n<li>NTFS 存储在 MFT 中</li>\n</ul>\n<p>FCB</p>\n<ul>\n<li>文件的详细信息</li>\n<li>UFS 中的索引节点 (inode)</li>\n<li>NTFS 在 MFT 中</li>\n</ul>\n<p>内存内信息</p>\n<ul>\n<li>管理文件系统、通过缓冲提高性能</li>\n<li>包括\n<ul>\n<li>安装表：所有安装卷的信息</li>\n<li>目录结构缓存，保存近来访问的目录信息（或指针）</li>\n<li>系统范围内打开文件表 (system-wide open-file table)：每个打开文件 FCB 副本和其他信息</li>\n<li>单个进程的打开文件表 (pre-process open-file table)：指向系统范围打开文件表的指针</li>\n</ul>\n</li>\n</ul>\n<p>访问打开文件表的索引：</p>\n<ul>\n<li>UNIX 的<strong>文件描述符 (file descriptor)</strong></li>\n<li>Windows 的<strong>文件句柄 (file handle)</strong></li>\n</ul>\n<p>大多数系统在内存保留了打开文件的所有信息（除了实际数据块）</p>\n<h4 id=\"分区与安装\"><a class=\"anchor\" href=\"#分区与安装\">#</a> 分区与安装</h4>\n<p>分区：</p>\n<ul>\n<li>raw，生的，原始的，没有文件系统</li>\n<li>cooked，熟的，含有文件系统</li>\n</ul>\n<p>生分区（raw disk）：</p>\n<ul>\n<li>UNIX 交换空间</li>\n<li>数据库</li>\n<li>RAID 磁盘系统</li>\n</ul>\n<p><strong>根分区</strong> (root partition): 包括操作系统内核或其他系统文件，引导时装入内存</p>\n<p>Windows 将卷装入到独立名称空间中，用字母和冒号表示</p>\n<p>UNIX 将文件系统装在任何目录上</p>\n<h4 id=\"虚拟文件系统\"><a class=\"anchor\" href=\"#虚拟文件系统\">#</a> 虚拟文件系统</h4>\n<p>Virtual File System， VFS</p>\n<p>文件系统实现包括三个主要层次：</p>\n<ul>\n<li>第一层为文件系统接口</li>\n<li>第二层为虚拟文件系统 (VFS) 层\n<ul>\n<li>定义一个清晰的<strong>接口</strong>，将文件系统的通用操作和具体实现分开</li>\n<li>提供在网络上唯一标识一个文件的机制</li>\n<li>VFS 可以区分本地 / 远程、不同文件系统类型的不同本地文件</li>\n</ul>\n</li>\n<li>第三层是不同的文件系统</li>\n</ul>\n<p>Linux 中 VFS 的主要对象类型:</p>\n<ul>\n<li>索引节点对象 (inode object)，表示一个单独的文件</li>\n<li>文件对象 (file object)，表示一个打开的文件</li>\n<li>超级块对象 (superblock object)，表示整个文件系统</li>\n<li>目录条目对象 (dentary object)，表示一个单独的目录条目</li>\n</ul>\n<h3 id=\"目录实现\"><a class=\"anchor\" href=\"#目录实现\">#</a> 目录实现</h3>\n<h4 id=\"线性列表\"><a class=\"anchor\" href=\"#线性列表\">#</a> 线性列表</h4>\n<p>使用存储文件名和数据块指针的线性列表</p>\n<p>编程简单</p>\n<p>缺点：</p>\n<ul>\n<li>运行费时</li>\n<li>查找文件需要线性搜索</li>\n</ul>\n<h4 id=\"哈希表\"><a class=\"anchor\" href=\"#哈希表\">#</a> 哈希表</h4>\n<p>根据文件名得到一个值，并返回一个指向线性列表中元素的指针</p>\n<p>可以使用 chained-overflow 哈希表</p>\n<h3 id=\"分配方式\"><a class=\"anchor\" href=\"#分配方式\">#</a> 分配方式</h3>\n<h4 id=\"连续分配\"><a class=\"anchor\" href=\"#连续分配\">#</a> 连续分配</h4>\n<p>Contiguous Allocation</p>\n<p>每个文件在磁盘上占有一组连续的块</p>\n<p>优点：</p>\n<ul>\n<li>简单，只需要开始位置和长度</li>\n<li>支持随机访问</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>浪费空间</li>\n<li>文件不能增长（使用扩展，但是存在外部和内部碎片问题）</li>\n<li>难以为新文件找到空间（使用动态存储分配）</li>\n<li>存在外部碎片（可以通过合并解决，需要停机操作）</li>\n</ul>\n<h4 id=\"链接分配\"><a class=\"anchor\" href=\"#链接分配\">#</a> 链接分配</h4>\n<p>解决了连续分配的所有问题。磁盘块分布在磁盘的任何地方。</p>\n<p>目录包括文件第一块指针和最后一块的指针</p>\n<p>缺点：</p>\n<ul>\n<li>只能有效地用于文件的顺序访问，<strong>不能有效支持文件的直接访问</strong></li>\n<li>指针需要空间</li>\n<li>可靠性（可能导致错误指针）</li>\n<li>文件可能分散到很多柱面，寻道时间、次数增加</li>\n</ul>\n<p>解决方法：</p>\n<ul>\n<li>多个块组成簇，按簇分配而不是按块分配（增加了内部碎片）</li>\n</ul>\n<p>变种：FAT，文件分配表</p>\n<p>每个卷开始用于存储该 FAT，采用缓存，改善了随机访问时间。</p>\n<h4 id=\"索引分配\"><a class=\"anchor\" href=\"#索引分配\">#</a> 索引分配</h4>\n<p>通过把所有指针放在一起，使用索引块（磁盘块地址的数组）</p>\n<p><strong>支持直接访问</strong>，没有外部碎片。</p>\n<p>缺点：浪费空间（索引块需要占用一块）</p>\n<p>索引块大小问题：</p>\n<ul>\n<li>链接方案 ：将多个索引块链接起来</li>\n<li>多层索引：用第一层索引块指向一组第二层索引块。</li>\n<li>组合方案：UFS 中，前 12 个指向直接块，最后三个指向间接块\n<ul>\n<li>第一个为一级间接块，为索引块，包含数据块的地址</li>\n<li>第二个为二级间接块，包括一级索引块的地址</li>\n<li>第三个为三级间接块</li>\n<li>如果块大小为 4K，那么不超过 48K 的文件就可以直接访问</li>\n</ul>\n</li>\n</ul>\n<p>Linux 下目录结构</p>\n<p>基本文件目录 (BFD),  <code>i</code>  节点表，存储地址</p>\n<p>主目录 (MFD) 存储文件名和对应 BFD 中的 ID</p>\n<p>SFD 也是一样</p>\n<p>优点：</p>\n<ul>\n<li>便于共享</li>\n<li>检索速度快，减少了访问磁盘的次数</li>\n</ul>\n<p>Linux 文件卷存储结构</p>\n<ul>\n<li>引导块 - 超级块（文件资源表， 专用块） - 索引节点块（<strong>基本文件目录，BFD</strong>） - 数据块</li>\n</ul>\n<h3 id=\"空闲空间管理\"><a class=\"anchor\" href=\"#空闲空间管理\">#</a> 空闲空间管理</h3>\n<p>为了记录空闲磁盘空间，系统需要维护一个<strong>空闲空间链表 (free-space list)</strong></p>\n<p>它记录了所有空闲磁盘空间（未分配给文件或目录的空间）</p>\n<h4 id=\"位向量\"><a class=\"anchor\" href=\"#位向量\">#</a> 位向量</h4>\n<p>空闲空间表通常实现为<strong>位图</strong>或<strong>位向量</strong></p>\n<p>优点：</p>\n<ul>\n<li>查找第一个空闲块和连续空闲块简单高效</li>\n</ul>\n<p>需要位向量存在内存中才有高效率，因此需要额外的空间</p>\n<p>多次分配和回收可以集中起来写盘</p>\n<h4 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h4>\n<p>将所有空闲磁盘块用链表连接起来，将第一空闲块支持保存在磁盘特殊位置和内存中。</p>\n<p>缺点：遍历整个表时，效率不高，需要大量 I/O</p>\n<p>每一次分配和回收都需要 I/O</p>\n<h4 id=\"组\"><a class=\"anchor\" href=\"#组\">#</a> 组</h4>\n<p>将 n 个空闲块地址存在第一个空闲块中，大量空闲块地址可以很快找到</p>\n<p><strong>成组链接法</strong>：</p>\n<p>每一组的第一个块存储上一个组所有块的块号</p>\n<p>一个超级块存储最后一个组的所有块的块号。</p>\n<p>分配：用一个堆栈保存一组的所有块号，从栈顶开始分配，直到最后一个块（存储着下一组的块号），再次读磁盘，把这个块存储的块号填充到栈中。</p>\n<p>回收：入栈、当栈满了就写到一个磁盘块中，然后再压仅栈里</p>\n<p>可以做到一个组才读一次磁盘。</p>\n<h4 id=\"计数\"><a class=\"anchor\" href=\"#计数\">#</a> 计数</h4>\n<p>空闲空间表包括每个条目的磁盘地址和数量</p>\n<h3 id=\"效率与性能\"><a class=\"anchor\" href=\"#效率与性能\">#</a> 效率与性能</h3>\n<h4 id=\"效率\"><a class=\"anchor\" href=\"#效率\">#</a> 效率</h4>\n<p>磁盘空间的有效使用主要取决于所使用的<strong>磁盘分配</strong>和<strong>目录管理算法</strong>。</p>\n<h4 id=\"性能\"><a class=\"anchor\" href=\"#性能\">#</a> 性能</h4>\n<ul>\n<li>缓存\n<ul>\n<li>板载高速缓存：可以同时存储整个磁道，使用缓存存储经常使用的数据块</li>\n<li>页面缓存：使用虚拟内存技术，存储文件数据</li>\n</ul>\n</li>\n<li>优化顺序访问\n<ul>\n<li>马上释放 free-behind：在请求下一页的时候，马上从缓存删除上一页</li>\n<li>预读 read-ahead：所请求的页和之后一些页可一起读入并缓存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"恢复\"><a class=\"anchor\" href=\"#恢复\">#</a> 恢复</h3>\n<h4 id=\"一致性检查\"><a class=\"anchor\" href=\"#一致性检查\">#</a> 一致性检查</h4>\n<p>将目录结构数据与磁盘数据块相比较，并试图纠正所发现的不一致</p>\n<h4 id=\"备份和恢复\"><a class=\"anchor\" href=\"#备份和恢复\">#</a> 备份和恢复</h4>\n<p>利用系统程序将磁盘数据备份到另一存储设备</p>\n<p>一开始使用 完全备份 (full backup)</p>\n<p>然后使用 增量备份 (incremental backup)</p>\n<h3 id=\"基于日志结构的文件系统\"><a class=\"anchor\" href=\"#基于日志结构的文件系统\">#</a> 基于日志结构的文件系统</h3>\n<p>所有元数据都按顺序写到日志上。</p>\n<p>执行一个特殊任务的一组操作称为<strong>事务</strong> (transaction)。</p>\n<p>使用环形缓冲，写到空间末尾的时候，从头开始写</p>\n<p>当系统崩溃时候，可以利用日志进行恢复</p>\n<h3 id=\"nfs\"><a class=\"anchor\" href=\"#nfs\">#</a> NFS</h3>\n<p>Network File System</p>\n<p>用于通过局域网访问远程文件的软件系统的实现和规范</p>\n<p>将一组互连工作站作为具有独立文件系统的机器组合</p>\n<p>在访问远程目录之前需要先安装 (mount)</p>\n<p>NFS 设计目标之一：允许不同机器、操作系统和网络结构的异构环境中工作。</p>\n<p>在两种独立实现接口之间采用基于外部数据表示 (XDR) 的 RPC</p>\n<h4 id=\"安装协议\"><a class=\"anchor\" href=\"#安装协议\">#</a> 安装协议</h4>\n<p>mount protocol</p>\n<p>在客户机和服务器之间建立初始逻辑连接</p>\n<p>服务器维护一个输出列表 (export list)，列出哪些本地文件系统允许输出安装，并允许安装他们的机器名称</p>\n<h4 id=\"nfs-协议\"><a class=\"anchor\" href=\"#nfs-协议\">#</a> NFS 协议</h4>\n<ul>\n<li>搜索目录内文件</li>\n<li>读一组目录条目</li>\n<li>操作链接和目录</li>\n<li>访问文件属性</li>\n<li>读和写文件</li>\n</ul>\n<p>NFS 服务器是无状态的</p>\n<h4 id=\"路径名转换\"><a class=\"anchor\" href=\"#路径名转换\">#</a> 路径名转换</h4>\n<p>把路径名解析为独立的目录条目或组成部分</p>\n<h4 id=\"远程操作\"><a class=\"anchor\" href=\"#远程操作\">#</a> 远程操作</h4>\n<p>除了 <code>open</code>  和 <code>cloase</code> ，在普通 UNIX 文件操作系统调用和 NFS 协议 RPC 之间，有着一对一的对应关系</p>\n<p>NFS 实际采用了缓冲和缓存技术以提高性能</p>\n<ul>\n<li>文件属性（索引节点信息）缓存</li>\n<li>文件块缓存</li>\n</ul>\n<h2 id=\"第-12-章-大容量存储器的结构\"><a class=\"anchor\" href=\"#第-12-章-大容量存储器的结构\">#</a> 第 12 章 大容量存储器的结构</h2>\n<h3 id=\"大容量存储器结构简介\"><a class=\"anchor\" href=\"#大容量存储器结构简介\">#</a> 大容量存储器结构简介</h3>\n<h4 id=\"磁盘\"><a class=\"anchor\" href=\"#磁盘\">#</a> 磁盘</h4>\n<p>磁盘为现代计算机系统提供了大容量的内存</p>\n<p>读写头 “飞行” 于每个磁盘片的表面之上。</p>\n<p>磁头与<strong>磁臂</strong> (disk arm) 相连，磁臂能将所有磁头作为一个整体一起移动。</p>\n<p>磁盘片的表面被逻辑划分为圆形<strong>磁道</strong> (track)</p>\n<p>磁道进一步划分为<strong>扇区</strong> (sector)</p>\n<p>同一磁臂位置的磁道集合形成了<strong>柱面</strong> (cylinder)</p>\n<p>每个磁盘驱动器有数千个同心柱面，每个磁道有数百个扇区</p>\n<p><strong>传输速率</strong> (transfer rate)：驱动器和计算机之间的数据传输速率</p>\n<p>** 定位时间 (positioning time)/ 随机访问时间 (random access time)** 由两部分组成：</p>\n<ul>\n<li><strong>寻道时间</strong> (seek time)：移动磁臂到说要的柱面所需的时间（主要）</li>\n<li>** 旋转等待时间 (**rotational latency)：等待所要的扇区旋转到磁臂下所需时间</li>\n</ul>\n<p><strong>磁头碰撞</strong> (head crash) 会损坏磁盘表面，不能修复。</p>\n<p>磁盘驱动器通过一组 I/O 总线 (I/O bus) 和计算机相连，总线包括：</p>\n<ul>\n<li>EIDE: enhanced integrated drive electronics</li>\n<li>ATA: advanced technology attachment</li>\n<li>串行 ATA: serial ATA, SATA</li>\n<li>USB: universal serial bus</li>\n<li>FC: fiber channel</li>\n<li>SCSI 总线</li>\n</ul>\n<p>控制器 (controller) 处理总线上的输出传输：</p>\n<ul>\n<li>主机控制器 (host controller) 是计算机上位于总线末端的控制器</li>\n<li>磁盘控制器 (disk controller) 是位于磁盘驱动器内的控制器</li>\n</ul>\n<h4 id=\"磁带\"><a class=\"anchor\" href=\"#磁带\">#</a> 磁带</h4>\n<p>太慢</p>\n<p>磁带绕在轴上，向前转后向后转并经过读写头。</p>\n<h3 id=\"磁盘结构\"><a class=\"anchor\" href=\"#磁盘结构\">#</a> 磁盘结构</h3>\n<p>现代磁盘驱动器可以看作一个一位的<strong>逻辑块</strong>的数组，逻辑块是最小的传输单位。</p>\n<p>对使用常量线性速度 (constant linear velocity, CLV) 的介质，每个磁道的位密度是相同的</p>\n<p>驱动器会增加速度保持磁头读写数据速率恒定</p>\n<p>或者</p>\n<p>使用恒定圆角速度 (constant angular velocity, CAV), 内磁道到外磁道的位密度要不断降低</p>\n<h3 id=\"磁盘附属\"><a class=\"anchor\" href=\"#磁盘附属\">#</a> 磁盘附属</h3>\n<p>访问磁盘存储的方式：</p>\n<ul>\n<li>I/O 端口 (或主机附属存储 host-attached storage, HAS)</li>\n<li>分布式文件系统的远程主机 (网络附属存储 network-attached storage,NAS)</li>\n</ul>\n<h4 id=\"主机附属存储\"><a class=\"anchor\" href=\"#主机附属存储\">#</a> 主机附属存储</h4>\n<p>通过本地 I/O 访问存储</p>\n<p>复杂的 I/O 结构：</p>\n<ul>\n<li>SCSI\n<ul>\n<li>一根总线支持 16 个设备</li>\n<li>包括主机的一个控制卡 (SCSI 引导器)</li>\n<li>15 个存储设备 (SCSI 目标)</li>\n<li>每个 SCSI 目标有访问 8 个逻辑单元的能力</li>\n</ul>\n</li>\n<li>FC\n<ul>\n<li>高速串行结构</li>\n<li>存储区域网络 (SAN) 的基础</li>\n<li>裁定循环 (FC-AL)：可以访问 126 个设备</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"网络附属存储\"><a class=\"anchor\" href=\"#网络附属存储\">#</a> 网络附属存储</h4>\n<p>NAS 是数据网络中远程访问的专用存储系统</p>\n<p>缺点：存储 I/O 操作需要使用数据网络的带宽，增加了网络通讯延迟</p>\n<h4 id=\"存储区域网络\"><a class=\"anchor\" href=\"#存储区域网络\">#</a> 存储区域网络</h4>\n<p>storage area network，SAN</p>\n<p>是服务器与存储单元之间的私有网络</p>\n<p>优势：灵活性</p>\n<h3 id=\"磁盘调度\"><a class=\"anchor\" href=\"#磁盘调度\">#</a> 磁盘调度</h3>\n<p>磁盘带宽：所传递的总的字节数除以从服务请求开始到最后传递结束的时间</p>\n<h4 id=\"fcfs-调度\"><a class=\"anchor\" href=\"#fcfs-调度\">#</a> FCFS 调度</h4>\n<p>先来先服务算法</p>\n<p>特定：公平</p>\n<h4 id=\"sstf-调度\"><a class=\"anchor\" href=\"#sstf-调度\">#</a> SSTF 调度</h4>\n<p>最短寻到时间优先算法 shortest-seek-time-first</p>\n<p>选择距当前磁头位置最短寻道时间的请求来处理</p>\n<p>基本上是一种最短作业优先 (SJF) 调度，可能导致一些请求得不到服务，而且不是最优的</p>\n<h4 id=\"scan-调度\"><a class=\"anchor\" href=\"#scan-调度\">#</a> SCAN 调度</h4>\n<p>磁臂从磁盘的一端向另一端移动，同时当磁头移过每个柱面时，处理位于该柱面上的服务请求。当到达另一端时，磁头改变移动方向，处理继续</p>\n<p>有时称为电梯算法 (elevator algorithm)</p>\n<h4 id=\"c-scan-调度\"><a class=\"anchor\" href=\"#c-scan-调度\">#</a> C-SCAN 调度</h4>\n<p>SCAN 的变种，提供更为均匀的等待时间</p>\n<p>当磁头移到另一端的时候，立刻返回到磁盘开始，返回时候不处理请求</p>\n<h4 id=\"look-调度\"><a class=\"anchor\" href=\"#look-调度\">#</a> LOOK 调度</h4>\n<p>类似于 SCAN，但是磁头只移动到一个方向的最远请求</p>\n<p>C-LOOK 返回也是只是返回到最远，不是 0</p>\n<h4 id=\"磁盘调度算法的选择\"><a class=\"anchor\" href=\"#磁盘调度算法的选择\">#</a> 磁盘调度算法的选择</h4>\n<p>SSTF: 普通而常见， 性能比 FCFS 好</p>\n<p>SCAN 和 C-SCAN 对于磁盘负荷较大的系统会执行得更好，不可能产生饿死</p>\n<p>性能主要依赖于请求的数量和类型。</p>\n<p>磁盘服务请求很大程度上受文件分配方法所影响，连续分配会产生相近的请求，而链接或索引文件会产生大量的磁头移动</p>\n<p>目录和索引页也很重要</p>\n<h3 id=\"磁盘管理\"><a class=\"anchor\" href=\"#磁盘管理\">#</a> 磁盘管理</h3>\n<h4 id=\"磁盘格式化\"><a class=\"anchor\" href=\"#磁盘格式化\">#</a> 磁盘格式化</h4>\n<p>低级格式化：为磁盘每个扇区采用特别的数据结构</p>\n<p>逻辑格式化：创建文件系统</p>\n<h4 id=\"引导块\"><a class=\"anchor\" href=\"#引导块\">#</a> 引导块</h4>\n<p>自举程序保存正在磁盘的启动块中，位于磁盘的固定位置</p>\n<h4 id=\"坏块\"><a class=\"anchor\" href=\"#坏块\">#</a> 坏块</h4>\n<p>磁盘控制器使用备用块逻辑低替换坏块，称为扇区备用 (sector sparing) 或转寄 (forwarding)</p>\n<p>每个柱面都留有少量的备用块，还有备用柱面，防止系统的磁盘调度算法无效</p>\n<p>还能采用扇区滑动 (sector slipping) 来替换坏扇区，所有扇区向某个方向偏移</p>\n<h3 id=\"交换空间管理\"><a class=\"anchor\" href=\"#交换空间管理\">#</a> 交换空间管理</h3>\n<p>交换空间为虚拟内存提供最佳吞吐量</p>\n<h4 id=\"交换空间的使用\"><a class=\"anchor\" href=\"#交换空间的使用\">#</a> 交换空间的使用</h4>\n<ul>\n<li>可以保存整个进程映像</li>\n<li>可以保存内存中的页</li>\n</ul>\n<h4 id=\"交换空间的位置\"><a class=\"anchor\" href=\"#交换空间的位置\">#</a> 交换空间的位置</h4>\n<ul>\n<li>普通文件系统\n<ul>\n<li>简单，但是效率低</li>\n<li>遍历目录需要过多磁盘访问（可以缓存在物理内存中）</li>\n</ul>\n</li>\n<li>一个独立的生磁盘分区上</li>\n</ul>\n<h3 id=\"raid-结构\"><a class=\"anchor\" href=\"#raid-结构\">#</a> RAID 结构</h3>\n<h4 id=\"通过冗余改善可靠性\"><a class=\"anchor\" href=\"#通过冗余改善可靠性\">#</a> 通过冗余改善可靠性</h4>\n<p>镜像 (mirroring) 是最为简单和昂贵的引入冗余的方法：复制每个磁盘</p>\n<h4 id=\"通过并行处理改善性能\"><a class=\"anchor\" href=\"#通过并行处理改善性能\">#</a> 通过并行处理改善性能</h4>\n<p>数据分散：</p>\n<ul>\n<li>位级分散：在多个磁盘上分散每个字节的各个位，\n<ul>\n<li>每次范围可以同时读 8 倍的数据</li>\n<li>支持数量为 8 的倍数或者能除以 8 的数量的磁盘</li>\n</ul>\n</li>\n<li>块级分散：一个文件的块分散在多个磁盘</li>\n</ul>\n<p>通过负荷平衡，增加了多个小访问的吞吐量</p>\n<p>降低了大访问的响应时间</p>\n<h4 id=\"raid-级别\"><a class=\"anchor\" href=\"#raid-级别\">#</a> RAID 级别</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">RAID 档次</th>\n<th style=\"text-align:left\">最少硬盘</th>\n<th style=\"text-align:left\">最大容错</th>\n<th style=\"text-align:left\">可用容量</th>\n<th style=\"text-align:left\">读取性能</th>\n<th style=\"text-align:left\">写入性能</th>\n<th style=\"text-align:left\">安全性</th>\n<th style=\"text-align:left\">目的</th>\n<th style=\"text-align:left\">应用产业</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单一硬盘</td>\n<td style=\"text-align:left\">(引用)</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">无</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JBOD</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">无（同 RAID 0）</td>\n<td style=\"text-align:left\">增加容量</td>\n<td style=\"text-align:left\">个人（暂时）存储备份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">一个硬盘异常，全部硬盘都会异常</td>\n<td style=\"text-align:left\">追求最大容量、速度</td>\n<td style=\"text-align:left\">视频剪接缓存用途</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">n-1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">最高，一个正常即可</td>\n<td style=\"text-align:left\">追求最大安全性</td>\n<td style=\"text-align:left\">个人、企业备份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">n-1</td>\n<td style=\"text-align:left\">n-1</td>\n<td style=\"text-align:left\">n-1</td>\n<td style=\"text-align:left\">高</td>\n<td style=\"text-align:left\">追求最大容量、最小预算</td>\n<td style=\"text-align:left\">个人、企业备份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">n-2</td>\n<td style=\"text-align:left\">n-2</td>\n<td style=\"text-align:left\">n-2</td>\n<td style=\"text-align:left\">安全性较 RAID 5 高</td>\n<td style=\"text-align:left\">同 RAID 5，但较安全</td>\n<td style=\"text-align:left\">个人、企业备份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">n/2</td>\n<td style=\"text-align:left\">n/2</td>\n<td style=\"text-align:left\">n/2</td>\n<td style=\"text-align:left\">n/2</td>\n<td style=\"text-align:left\">安全性高，但在同一个子组群中不能出现两颗毁损硬盘</td>\n<td style=\"text-align:left\">综合 RAID 0/1 优点，理论速度较快</td>\n<td style=\"text-align:left\">大型数据库、服务器</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>RAID0\n<ul>\n<li>按块级别分散的磁盘阵列</li>\n<li>没有冗余</li>\n</ul>\n</li>\n<li>RAID1\n<ul>\n<li>磁盘镜像</li>\n</ul>\n</li>\n<li>RAID2\n<ul>\n<li>内存方式的差错<strong>纠正</strong>代码结构</li>\n<li>基于奇偶位的错误检测，系统每个字节都有一个相关的奇偶位。</li>\n<li>4 个磁盘需要 3 个额外磁盘</li>\n</ul>\n</li>\n<li>RAID3\n<ul>\n<li>位交织奇偶结构</li>\n<li>磁盘控制器可以检测一个扇区是否争取读取</li>\n<li>如果一个扇区损坏，那么知道是哪个扇区，通过计算其他磁盘扇区相应位的奇偶值可以得出损坏位是 0 或 1</li>\n<li>优点\n<ul>\n<li>只需要一个奇偶磁盘</li>\n<li>字节的读写分布在多个磁盘上，单个块的读和写是 RAID1 的 N 倍</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>计算和写奇偶开销导致写更慢</li>\n<li>可以使用非易失性随机存储器 (NVRAM)，在计算奇偶时存储块，缓存从控制器到磁盘的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>RAID4\n<ul>\n<li>块交织奇偶结构</li>\n<li>磁盘可以并行读，数据和奇偶也可以并行写</li>\n<li>小于块大小的数据的写必须访问数据所在块，修改数据后写回，相应奇偶块也要更新，称为<strong>读 - 改 - 写</strong>，单个写需要 4 次磁盘访问：两次读入旧块，两次写入新块</li>\n</ul>\n</li>\n<li>RAID5\n<ul>\n<li>块交织分布奇偶结构</li>\n<li>将数据奇偶分布在所有 N+1 块磁盘上，而不是单个磁盘上</li>\n<li>每一块，一个磁盘存储奇偶，其他存储数据</li>\n</ul>\n</li>\n<li>RAID6\n<ul>\n<li>P+Q 冗余方案</li>\n<li>保存额外的冗余信息防止多个磁盘出错</li>\n<li>使用差错纠正码，如 Read-Solomon 码</li>\n</ul>\n</li>\n<li>RAID0+1\n<ul>\n<li>先分散再镜像</li>\n</ul>\n</li>\n<li>RAID1+0\n<ul>\n<li>先镜像再分散</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"raid-级别的选择\"><a class=\"anchor\" href=\"#raid-级别的选择\">#</a> RAID 级别的选择</h4>\n<h4 id=\"扩展\"><a class=\"anchor\" href=\"#扩展\">#</a> 扩展</h4>\n<h4 id=\"raid-的问题\"><a class=\"anchor\" href=\"#raid-的问题\">#</a> RAID 的问题</h4>\n<h3 id=\"稳定存储实现\"><a class=\"anchor\" href=\"#稳定存储实现\">#</a> 稳定存储实现</h3>\n<h3 id=\"三级存储结构\"><a class=\"anchor\" href=\"#三级存储结构\">#</a> 三级存储结构</h3>\n<h4 id=\"三级存储设备\"><a class=\"anchor\" href=\"#三级存储设备\">#</a> 三级存储设备</h4>\n<h4 id=\"操作系统支持\"><a class=\"anchor\" href=\"#操作系统支持\">#</a> 操作系统支持</h4>\n<h4 id=\"性能-2\"><a class=\"anchor\" href=\"#性能-2\">#</a> 性能</h4>\n<h2 id=\"第-13-章-io-输入系统\"><a class=\"anchor\" href=\"#第-13-章-io-输入系统\">#</a> 第 13 章 I/O 输入系统</h2>\n<h3 id=\"概述-3\"><a class=\"anchor\" href=\"#概述-3\">#</a> 概述</h3>\n<h3 id=\"io-硬件\"><a class=\"anchor\" href=\"#io-硬件\">#</a> I/O 硬件</h3>\n<p>四种 I/O 方法：</p>\n<ul>\n<li>轮询</li>\n<li>中断</li>\n<li>DMA</li>\n<li>通道</li>\n</ul>\n<h4 id=\"轮询\"><a class=\"anchor\" href=\"#轮询\">#</a> 轮询</h4>\n<h4 id=\"中断-2\"><a class=\"anchor\" href=\"#中断-2\">#</a> 中断</h4>\n<p>中断与当前代码没有关系，异常与当前代码有关系</p>\n<p>CPU 在执行完每条指令之后，检测 IRL（中断请求线，Interrupt-request line），如果有来自控制器的中断请求信号，CPU 就保存当前状态并且跳转到内存固定位置的中断处理程序 (interrupt-controller)</p>\n<p>中断处理程序判断中断原因，进行必要的处理，重新恢复状态，最后执行中断返回 (return from interrupt) 指令以便使 CPU 返回中断前的执行状态</p>\n<p>过程:</p>\n<ul>\n<li>设备控制器通过 IRL 发送信号 raise 中断</li>\n<li>CPUcatch 中断并 dispatch 到 IC 中</li>\n<li>IC 通过处理设备请求来 clear 中断</li>\n</ul>\n<p>中断特征（由 IC 硬件提供）：</p>\n<ul>\n<li>在关键处理时， 可以延迟中断处理</li>\n<li>更有效地分发中断到合适中断处理程序</li>\n<li>多级中断，区分优先级</li>\n</ul>\n<p>优点：可以并行</p>\n<p>绝大多数 CPU 有两个中断请求线：</p>\n<ul>\n<li>非屏蔽中断：处理如不可恢复内存错误等事件</li>\n<li>可屏蔽中断：可以被设备控制器用于请求服务</li>\n</ul>\n<h4 id=\"直接内存访问\"><a class=\"anchor\" href=\"#直接内存访问\">#</a> 直接内存访问</h4>\n<p>DMA direct-memory access</p>\n<p>当 DMA 控制器抓住内存总线时， CPU 会暂时不能访问主内存。称为<strong>周期挪用 (cycle steal)</strong></p>\n<p>DVMA direct virtual-memory access 直接虚拟内存访问</p>\n<p>可以直接实现两个内存映射设备之间的传输，无需 CPU 的干涉或使用主内存。</p>\n<p>步骤:</p>\n<ul>\n<li>设备驱动器被告知传递磁盘数据到地址为 X 的缓冲区</li>\n<li>设备驱动器告诉磁盘控制器从磁盘传递 C 个字节到地址为 X 的缓冲区</li>\n<li>磁盘控制器初始化 DMA 传输</li>\n<li>磁盘控制器向 DMS 控制器发送每个字节</li>\n<li>DMA 控制器向缓冲器 X 传递字节，增加内存地址并减少 C 直到 C = 0</li>\n<li>当 C = 0 时，DMS 中断 CPU， 通知传输完毕。</li>\n</ul>\n<h4 id=\"通道\"><a class=\"anchor\" href=\"#通道\">#</a> 通道</h4>\n<p>一般用于服务器</p>\n<p>可以实现多个连续段直接传输</p>\n<h3 id=\"io-应用接口\"><a class=\"anchor\" href=\"#io-应用接口\">#</a> I/O 应用接口</h3>\n<p>设备驱动程序层的作用：为 I/O 子系统隐藏设备控制器之间的差异。</p>\n<ul>\n<li>数据传输模式\n<ul>\n<li>字符流设备： 按一个字节一个字节地传输，如 终端</li>\n<li>块设备：以块单位进行传输， 如磁盘</li>\n</ul>\n</li>\n<li>访问方法\n<ul>\n<li>顺序设备：按固定顺序来传输数据， 如调制解调器</li>\n<li>随机访问设备：让设备寻找到任意数据存储位置，如 CD-ROM</li>\n</ul>\n</li>\n<li>传输调度\n<ul>\n<li>同步：按一定响应时间来进行数据传输， 磁带</li>\n<li>异步：无规则或不可预测的响应时间，键盘</li>\n</ul>\n</li>\n<li>共享\n<ul>\n<li>共享：可以被多个进程或线程并发使用，如键盘</li>\n<li>专用：磁带</li>\n</ul>\n</li>\n<li>设备速度\n<ul>\n<li>延迟</li>\n<li>寻道时间</li>\n<li>传输速率</li>\n<li>操作之间的延迟</li>\n</ul>\n</li>\n<li>I/O 方向\n<ul>\n<li>读写， 磁盘</li>\n<li>只读， CD-ROM</li>\n<li>只写，图像控制器</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"块与字符设备\"><a class=\"anchor\" href=\"#块与字符设备\">#</a> 块与字符设备</h4>\n<h4 id=\"网络设备\"><a class=\"anchor\" href=\"#网络设备\">#</a> 网络设备</h4>\n<h4 id=\"阻塞和非阻塞-io\"><a class=\"anchor\" href=\"#阻塞和非阻塞-io\">#</a> 阻塞和非阻塞 I/O</h4>\n<p>阻塞 I/O：应用程序的执行被挂起，等到系统调用完成后，应用程序就移回运行队列，并在合适的时候继续执行，并能收到系统返回的值</p>\n<p>非阻塞 I/O：不会中止程序，马上返回任何可用的数据（等于或少于所要求的，或者为 0）</p>\n<p>异步：调用要求的传输会完整执行，返回完整的结果（将来的某个时间）。</p>\n<h3 id=\"io-内核子系统\"><a class=\"anchor\" href=\"#io-内核子系统\">#</a> I/O 内核子系统</h3>\n<h4 id=\"io-调度\"><a class=\"anchor\" href=\"#io-调度\">#</a> I/O 调度</h4>\n<h4 id=\"缓冲-2\"><a class=\"anchor\" href=\"#缓冲-2\">#</a> 缓冲</h4>\n<p>用来保存两个设备之间或在设备和应用程序之间所传输数据的内存区域。</p>\n<p>采用缓冲的理由：</p>\n<ul>\n<li>处理数据流的生产者与消费者之间的速度差异</li>\n<li>协调传输数据大小不一致的设备</li>\n<li>支持应用程序 I/O 的复制语义（保证要写入磁盘的数据是系统调用发生时候的版本）</li>\n</ul>\n<h4 id=\"高速缓存-2\"><a class=\"anchor\" href=\"#高速缓存-2\">#</a> 高速缓存</h4>\n<p>可以保留数据副本的高速存储器，访问要比原始数据访问高效</p>\n<p>有时缓冲区也可以用作高速缓存</p>\n<h4 id=\"假脱机与设备预留\"><a class=\"anchor\" href=\"#假脱机与设备预留\">#</a> 假脱机与设备预留</h4>\n<p>用来保存设备数据的缓冲区</p>\n<h4 id=\"错误处理\"><a class=\"anchor\" href=\"#错误处理\">#</a> 错误处理</h4>\n<h4 id=\"io-保护\"><a class=\"anchor\" href=\"#io-保护\">#</a> I/O 保护</h4>\n<h4 id=\"内核数据结构\"><a class=\"anchor\" href=\"#内核数据结构\">#</a> 内核数据结构</h4>\n<h4 id=\"内核-io-子系统总结\"><a class=\"anchor\" href=\"#内核-io-子系统总结\">#</a> 内核 I/O 子系统总结</h4>\n<h3 id=\"把-io-操作转化为硬件\"><a class=\"anchor\" href=\"#把-io-操作转化为硬件\">#</a> 把 I/O 操作转化为硬件</h3>\n<h3 id=\"流\"><a class=\"anchor\" href=\"#流\">#</a> 流</h3>\n<h3 id=\"性能-3\"><a class=\"anchor\" href=\"#性能-3\">#</a> 性能</h3>\n",
            "tags": [
                "期末",
                "操作系统"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "url": "https://zengshengli775.gitee.io/2021/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "title": "数据结构与算法基础",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"1数据结构概念\"><a class=\"anchor\" href=\"#1数据结构概念\">#</a> 1. 数据结构概念</h1>\n<h2 id=\"11数据结构相关概念\"><a class=\"anchor\" href=\"#11数据结构相关概念\">#</a> 1.1 数据结构相关概念</h2>\n<p>数据 – 程序的操作对象，用于描述客观事物。</p>\n<p>数据是一个抽象的概念，将其进行分类后得到程序设计语言中的类型。如：int，float，char 等等。</p>\n<p>数据元素：组成数据的基本单位。</p>\n<p>数据项：一个数据元素由若干数据项组成。</p>\n<p>数据对象 – 性质相同的数据元素的集合（比如：数组，链表）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明一个结构体类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MyTeacher</span>   <span class=\"token comment\">// 一种数据类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span>\tname<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span>\ttile<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span>\t\tage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span>\taddr<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MyTeacher</span>  t1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MyTeacher</span> tArray<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据项</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>addr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"addr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据项</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>tile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"addr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据项</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tt1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"12算法\"><a class=\"anchor\" href=\"#12算法\">#</a> 1.2 算法</h2>\n<p>算法是特定问题求解步骤的描述，在计算机中表现为<strong>指令的有限序列</strong>，算法是独立存在的一种解决问题的方法和思想。</p>\n<h3 id=\"算法特性\"><a class=\"anchor\" href=\"#算法特性\">#</a> 算法特性</h3>\n<p><strong>输入</strong>：算法具有 0 个或多个输入</p>\n<p><strong>输出</strong>：算法至少有 1 个或多个输出</p>\n<p><strong>有穷性</strong>：算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在接收的实际内完成</p>\n<p><strong>确定性</strong>：算法中的每一步都有确定的含义，不会出现二义性</p>\n<p><strong>可行性</strong>：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成。</p>\n<h4 id=\"大o表示法\"><a class=\"anchor\" href=\"#大o表示法\">#</a> 大 O 表示法</h4>\n<p>常见的时间复杂度</p>\n<table>\n<thead>\n<tr>\n<th>执行次数函数</th>\n<th>阶</th>\n<th>非正式术语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n</tr>\n<tr>\n<td>3n2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn 阶</td>\n</tr>\n<tr>\n<td>6n3+2n2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n</tr>\n<tr>\n<td>2n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n</tr>\n</tbody>\n</table>\n<p>n 常见的时间复杂度之间的关系</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111062216738.png\" alt=\"img\" /></p>\n<p>常用的时间复杂度所耗费的时间从小到大依次是：</p>\n<p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n2) &lt; O(n3) &lt; O(2n) &lt; O(n!) &lt; O(nn)</strong></p>\n<h1 id=\"2线性表\"><a class=\"anchor\" href=\"#2线性表\">#</a> 2. 线性表</h1>\n<h2 id=\"21线性表基本概念\"><a class=\"anchor\" href=\"#21线性表基本概念\">#</a> 2.1 线性表基本概念</h2>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p><strong>线性表是 **** 零个或者多个数据元素的有限序列</strong>。</p>\n<p><strong>特性:</strong></p>\n<ol>\n<li>数据元素之间是<strong>有顺序的.</strong></li>\n<li>数据元素个数是<strong>有限的.</strong></li>\n<li>数据元素的<strong>类型必须相同.</strong></li>\n</ol>\n<h3 id=\"数学定义\"><a class=\"anchor\" href=\"#数学定义\">#</a> 数学定义</h3>\n<p>线性表是具有相同类型的 n（ ≥ 0）个数据元素的有限序列（a0,a1, a2, …, an）</p>\n<p>ai 是表项，n 是表长度。</p>\n<h3 id=\"性质\"><a class=\"anchor\" href=\"#性质\">#</a> 性质</h3>\n<ul>\n<li>\n<p>a0 为线性表的第一个元素，只有一个后继。</p>\n</li>\n<li>\n<p>an 为线性表的最后一个元素，只有一个前驱。</p>\n</li>\n<li>\n<p>除 a0 和 an 外的其它元素 ai，既有前驱，又有后继。</p>\n</li>\n<li>\n<p>线性表能够逐项访问和顺序存取。</p>\n</li>\n</ul>\n<h3 id=\"线性表的操作\"><a class=\"anchor\" href=\"#线性表的操作\">#</a> 线性表的操作</h3>\n<ul>\n<li>\n<p>创建线性表</p>\n</li>\n<li>\n<p>销毁线性表</p>\n</li>\n<li>\n<p>清空线性表</p>\n</li>\n<li>\n<p>将元素插入线性表</p>\n</li>\n<li>\n<p>将元素从线性表中删除</p>\n</li>\n<li>\n<p>获取线性表中某个位置的元素</p>\n</li>\n<li>\n<p>获取线性表的长度</p>\n</li>\n</ul>\n<h3 id=\"线性表的抽象数据类型定义\"><a class=\"anchor\" href=\"#线性表的抽象数据类型定义\">#</a> 线性表的抽象数据类型定义：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT线性表（List）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>线性表的数据对象集合为<span class=\"token punctuation\">&#123;</span> a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> ……<span class=\"token punctuation\">,</span> an <span class=\"token punctuation\">&#125;</span>，每个元素的类型均为DataType。其中，除第一个元素a1外，每个元素有且只有一个直接前驱元素，除了最后一个元素an外，每个元素有且只有一个直接后继元素。数据元素之间的关系是一一对应的。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Operation（操作）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 初始化，建立一个空的线性表 L。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 若线性表为空，返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">ListEmpty</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 将线性表清空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">ClearList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 将线性表 L 中的第 i 个位置的元素返回给 e</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 在线性表 L 中的第 i 个位置插入新元素 e</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 删除线性表 L 中的第 i 个位置元素，并用 e 返回其值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 返回线性表 L 的元素个数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">ListLength</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 销毁线性表</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">DestroyList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"22线性表的顺序存储\"><a class=\"anchor\" href=\"#22线性表的顺序存储\">#</a> 2.2 线性表的顺序存储</h2>\n<p>线性表的顺序存储结构，指的是<strong>用一段地址连续的存储单元依次存储线性表的数据元素</strong>。</p>\n<p>线性表 （a1，a2，……，an）的顺序存储示意图如下：</p>\n<h3 id=\"image-20211107204709760\"><a class=\"anchor\" href=\"#image-20211107204709760\">#</a> <img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111072047011.png\" alt=\"image-20211107204709760\" /></h3>\n<h3 id=\"线性表顺序存储的设计与实现\"><a class=\"anchor\" href=\"#线性表顺序存储的设计与实现\">#</a> 线性表顺序存储的设计与实现</h3>\n<p><strong>操作要点:</strong></p>\n<p>插入元素算法</p>\n<ul>\n<li>\n<p>判断线性表是否合法</p>\n</li>\n<li>\n<p>判断插入位置是否合法</p>\n</li>\n<li>\n<p>把最后一个元素到插入位置的元素后移一个位置</p>\n</li>\n<li>\n<p>将新元素插入</p>\n</li>\n<li>\n<p>线性表长度加 1</p>\n</li>\n</ul>\n<p>获取元素操作</p>\n<ul>\n<li>\n<p>判断线性表是否合法</p>\n</li>\n<li>\n<p>判断位置是否合法</p>\n</li>\n<li>\n<p>直接通过数组下标的方式获取元素</p>\n</li>\n</ul>\n<p>删除元素算法</p>\n<ul>\n<li>\n<p>判断线性表是否合法</p>\n</li>\n<li>\n<p>判断删除位置是否合法</p>\n</li>\n<li>\n<p>将元素取出</p>\n</li>\n<li>\n<p>将删除位置后的元素分别向前移动一个位置</p>\n</li>\n<li>\n<p>线性表长度减 1</p>\n</li>\n</ul>\n<p><strong>链表顺序存储插入算法和删除算法:</strong></p>\n<ul>\n<li>元素的插入</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111062227359.png\" alt=\"image-20211106222701287\" /></p>\n<ul>\n<li>元素的删除</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202111062225990.png\" alt=\"img\" /></p>\n<p><strong>注意:</strong> <strong>链表的容量和链表的长度是两个不同的概念</strong></p>\n<h3 id=\"优点和缺点\"><a class=\"anchor\" href=\"#优点和缺点\">#</a> 优点和缺点</h3>\n<p><strong>优点：</strong></p>\n<ul>\n<li>无需为线性表中的逻辑关系增加额外的空间。</li>\n<li>可以快速的获取表中合法位置的元素。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>插入和删除操作需要移动大量元素。</li>\n<li>当线性表长度变化较大的时候，难以确定存储空间的容量。</li>\n</ul>\n<h3 id=\"动态数组\"><a class=\"anchor\" href=\"#动态数组\">#</a> <strong>动态数组</strong></h3>\n<h4 id=\"01-动态数组c\"><a class=\"anchor\" href=\"#01-动态数组c\">#</a> 01 动态数组.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"DynamicArray.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 初始化动态数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tDynamic_Array<span class=\"token operator\">*</span> myArray <span class=\"token operator\">=</span> <span class=\"token function\">Init_Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 打印容量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组容量:%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Capacity_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组大小:%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Size_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 插入元素</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">PushBack_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组容量:%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Capacity_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组大小:%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Size_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">Print_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">RemoveByPos_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">RemoveByValue_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">Print_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 查找 5 个位置</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token function\">Find_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5查找到:pos:%d %d\\n\"</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> <span class=\"token function\">At_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">FreeSpace_Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"dynamicarrayc\"><a class=\"anchor\" href=\"#dynamicarrayc\">#</a> DynamicArray.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"DynamicArray.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 动态数组的初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Dynamic_Array<span class=\"token operator\">*</span> <span class=\"token function\">Init_Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 申请内存</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tDynamic_Array<span class=\"token operator\">*</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tmyArray<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tmyArray<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmyArray<span class=\"token operator\">-></span>pAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>myArray<span class=\"token operator\">-></span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> myArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PushBack_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 判断空间是否足够</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> arr<span class=\"token operator\">-></span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 第一步 申请一块更大的内存空间 新空间是旧空间的 2 倍</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> newSpace <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> arr<span class=\"token operator\">-></span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 第二步 拷贝数据到新的空间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>newSpace<span class=\"token punctuation\">,</span>arr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">,</span>arr<span class=\"token operator\">-></span>capacity <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 第三步 释放旧空间的内存</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 更新容量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tarr<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> arr<span class=\"token operator\">-></span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tarr<span class=\"token operator\">-></span>pAddr <span class=\"token operator\">=</span> newSpace<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 插入新元素</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tarr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">[</span>arr<span class=\"token operator\">-></span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tarr<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 根据位置删除</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByPos_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 判断位置是否有效</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">>=</span> arr<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 删除元素</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tarr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tarr<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 根据值删除 value 第一次出现的位置</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByValue_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 找到值的位置</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token function\">Find_Array</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 根据位置删除</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">RemoveByPos_Array</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 找到值的位置</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\tpos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">return</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>arr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">// 释放动态数组的内存</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token operator\">-></span>pAddr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\">// 清空数组</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token comment\">//pAddr -> 空间</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\tarr<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">// 获得动态数组容量</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Capacity_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token keyword\">return</span> arr<span class=\"token operator\">-></span>capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\">// 获得动态数据当前元素个数</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> arr<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">// 根据位置获得某个位置元素</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">At_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">return</span> arr<span class=\"token operator\">-></span>pAddr<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"dynamicarrayh\"><a class=\"anchor\" href=\"#dynamicarrayh\">#</a> DynamicArray.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">DYNAMIC_ARRAY_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DYNAMIC_ARRAY_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 动态增长内存，策略 将存放数据的内存放到那？堆上</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 动态数组 如果 5 个元素 申请内存 拷贝数据 释放内存 6 插入第七个？ </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 容量 capacity 表示我的这块内存空间一共可以存放多少元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//size 概念 记录当前数组中具体的元素个数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 动态数组的结构体定义完了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DYNAMICARRAY</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pAddr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存放数据的地址</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前有多少个元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 容量，我容器当前最大能容纳多少元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Dynamic_Array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 写一系列的相关对 DYNAMICARRAY 结构体操作的函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Dynamic_Array<span class=\"token operator\">*</span> <span class=\"token function\">Init_Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PushBack_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 根据位置删除</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByPos_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 根据值删除</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByValue_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 释放动态数组的内存</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 清空数组</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 获得动态数组容量</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Capacity_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 获得动态数据当前元素个数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 根据位置获得某个位置元素</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">At_Array</span><span class=\"token punctuation\">(</span>Dynamic_Array<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"23线性表的链式存储\"><a class=\"anchor\" href=\"#23线性表的链式存储\">#</a> 2.3 线性表的链式存储</h2>\n<h3 id=\"基本概念-2\"><a class=\"anchor\" href=\"#基本概念-2\">#</a> 基本概念</h3>\n<h4 id=\"链式存储定义\"><a class=\"anchor\" href=\"#链式存储定义\">#</a> 链式存储定义</h4>\n<p>为了表示每个数据元素与其直接后继元素之间的逻辑关系，每个元素除了存储本身的信息外，还需要存储指示其直接后继的信息。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021432912.png\" alt=\"img\" /></p>\n<h4 id=\"单链表\"><a class=\"anchor\" href=\"#单链表\">#</a> 单链表</h4>\n<p>n 线性表的链式存储结构中，每个节点中只包含一个指针域，这样的链表叫单链表。</p>\n<p>n 通过每个节点的指针域将线性表的数据元素按其逻辑次序链接在一起（如图）。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021432922.png\" alt=\"img\" /></p>\n<h4 id=\"概念解释\"><a class=\"anchor\" href=\"#概念解释\">#</a> 概念解释：</h4>\n<p><strong>n 表头结点</strong></p>\n<p>链表中的第一个结点，包含指向第一个数据元素的指针以及链表自身的一些信息</p>\n<p><strong>n 数据结点</strong></p>\n<p>链表中代表数据元素的结点，包含指向下一个数据元素的指针和数据元素的信息</p>\n<p><strong>n 尾结点</strong></p>\n<p>链表中的最后一个数据结点，其下一元素指针为空，表示无后继。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021439921.png\" alt=\"image-20211202143942867\" /></p>\n<h3 id=\"设计与实现\"><a class=\"anchor\" href=\"#设计与实现\">#</a> 设计与实现</h3>\n<h4 id=\"插入操作\"><a class=\"anchor\" href=\"#插入操作\">#</a> <strong>插入操作</strong></h4>\n<p><strong><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021434085.png\" alt=\"img\" /></strong></p>\n<p><strong>node-&gt;next = current-&gt;next;</strong></p>\n<p><strong>current-&gt;next = node;</strong></p>\n<h4 id=\"删除操作\"><a class=\"anchor\" href=\"#删除操作\">#</a> <strong>删除操作</strong></h4>\n<p><strong><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021434095.png\" alt=\"img\" /></strong></p>\n<p><strong>current-&gt;next = ret-&gt;next</strong></p>\n<p><strong>free(ret-&gt;next)</strong></p>\n<h3 id=\"链表技术领域推演能力提高\"><a class=\"anchor\" href=\"#链表技术领域推演能力提高\">#</a> 链表技术领域推演 (能力提高)</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021436727.png\" alt=\"image-20211202143656684\" /></p>\n<h3 id=\"单向链表\"><a class=\"anchor\" href=\"#单向链表\">#</a> 单向链表</h3>\n<h4 id=\"02-单向链表c\"><a class=\"anchor\" href=\"#02-单向链表c\">#</a> 02 单向链表.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"LinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 自定义数据类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PERSON</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 打印函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MyPrint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d Score:%d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>age<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 创建链表</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tLinkList<span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> <span class=\"token function\">Init_LinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tPerson p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tPerson p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tPerson p3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tPerson p4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tPerson p5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"eee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 数据插入链表</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">Print_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> MyPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 删除 3</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">RemoveByPos_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">Print_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> MyPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 返回第一个结点</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----查找结果------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t Person<span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Front_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d Score:%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> ret<span class=\"token operator\">-></span>age<span class=\"token punctuation\">,</span> ret<span class=\"token operator\">-></span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 销毁链表</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">FreeSpace_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linklistc\"><a class=\"anchor\" href=\"#linklistc\">#</a> LinkList.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"LinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LinkList<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLinkList<span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tlist<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 头结点 是不保存数据信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tlist<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tlist<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tlist<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 指定位置插入</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 友好的处理，pos 越界 </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">></span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tpos <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 创建新的结点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 找结点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 新结点入链表</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tlist<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 删除指定位置的值</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByPos_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">>=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 查找删除结点的前一个结点</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 缓存删除的结点</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pDel <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pDel<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 释放删除结点的内存</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pDel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tlist<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 获得链表的长度</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">// 遍历查找</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pCurrent<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">// 返回第一个结点</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Front_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">// 打印链表结点</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> PRINTLINKNODE print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">// 释放链表内存</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token comment\">// 缓存下一个结点</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\tLinkNode<span class=\"token operator\">*</span> pNext <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token comment\">// 释放链表内存</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\tlist<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linklisth\"><a class=\"anchor\" href=\"#linklisth\">#</a> LinkList.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LINKLIST_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINKLIST_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 链表结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向任何类型的数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 链表结构体</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKLIST</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 需要容量吗？没有容量的概念</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 打印函数指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PRINTLINKNODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>LinkList<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 指定位置插入</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 删除指定位置的值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByPos_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 获得链表的长度</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 返回第一个结点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Front_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 打印链表结点</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> PRINTLINKNODE print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 释放链表内存</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h3 id=\"企业链表\"><a class=\"anchor\" href=\"#企业链表\">#</a> 企业链表</h3>\n<h4 id=\"03-企业链表\"><a class=\"anchor\" href=\"#03-企业链表\">#</a> 03 企业链表</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"LinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PERSON</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLinkNode node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MyPrint</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPerson<span class=\"token operator\">*</span>  p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">MyCompare</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span> node1<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>p2<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> p1<span class=\"token operator\">-></span>age <span class=\"token operator\">==</span> p2<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 创建链表</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tLinkList<span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> <span class=\"token function\">Init_LinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tPerson p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">,</span> p5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p5<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"eee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tp1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tp2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tp3<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tp4<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tp5<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 将结点插入链表</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">Print_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> MyPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 删除结点</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">Remove_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">Print_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> MyPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tPerson findP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>findP<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tfindP<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token function\">Find_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>findP<span class=\"token punctuation\">,</span> MyCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"位置:%d\\n\"</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 释放链表内存</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">FreeSpace_LinkList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linklistc-2\"><a class=\"anchor\" href=\"#linklistc-2\">#</a> LinkList.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"LinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LinkList<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLinkList<span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tlist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tlist<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">></span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tpos <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 查找插入位置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 插入新节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tdata<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tlist<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Remove_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">>=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 删除结点</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tlist<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 赋值指针变量</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\tflag <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// 返回链表大小</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> PRINTNODE print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">// 释放链表内存</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linklisth-2\"><a class=\"anchor\" href=\"#linklisth-2\">#</a> LinkList.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LINKLIST_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINKLIST_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 链表小结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 链表结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKLIST</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tLinkNode head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 遍历函数指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PRINTNODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 比较函数指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>COMPARENODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>LinkList<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Insert_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Remove_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 返回链表大小</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> PRINTNODE print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 释放链表内存</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"24循环链表\"><a class=\"anchor\" href=\"#24循环链表\">#</a> 2.4 循环链表</h2>\n<h3 id=\"循环链表基本概念\"><a class=\"anchor\" href=\"#循环链表基本概念\">#</a> 循环链表基本概念</h3>\n<p>链表中最后一个结点的<span class=\"exturl\" data-url=\"aHR0cDovL2JhaWtlLmJhaWR1LmNvbS92aWV3LzE1OTQxNy5odG0=\">指针</span>域指向<span class=\"exturl\" data-url=\"aHR0cDovL2JhaWtlLmJhaWR1LmNvbS92aWV3LzU0OTQ5Ny5odG0=\">头结点</span>，整个链表形成一个环。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021631315.png\" alt=\"image-20211202163112131\" /></p>\n<h3 id=\"循环链表设计与实现\"><a class=\"anchor\" href=\"#循环链表设计与实现\">#</a> 循环链表设计与实现</h3>\n<h4 id=\"插入元素分析\"><a class=\"anchor\" href=\"#插入元素分析\">#</a> <strong>插入元素分析</strong></h4>\n<p><strong>普通插入元素（和单链表是一样的）</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021631560.png\" alt=\"img\" /></p>\n<p><strong>尾插法（和单链表是一样的，单链表的写法支持尾插法)</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021632226.png\" alt=\"img\" /></p>\n<p>分析：最后一个结点的 next 指针指向新添加的结点，新结点的 next 指向第一个结点。</p>\n<p><strong>头插法</strong></p>\n<p>分析：</p>\n<p>新节点指向当前的第一个结点</p>\n<p>尾结点指向新节点</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021631014.png\" alt=\"img\" /></p>\n<p><strong>第一次插入结点</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021631030.png\" alt=\"img\" /></p>\n<p>尾节点指针指向第一个数据节点（即自己指向自己）</p>\n<h4 id=\"删除结点分析\"><a class=\"anchor\" href=\"#删除结点分析\">#</a> <strong>删除结点分析</strong></h4>\n<p><strong>删除普通结点</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021631031.png\" alt=\"img\" /></p>\n<p><strong>删除头结点</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112021635517.png\" alt=\"img\" /></p>\n<p>更新 head 结点，并且尾结点重新连接新的头结点</p>\n<h3 id=\"循环链表\"><a class=\"anchor\" href=\"#循环链表\">#</a> 循环链表</h3>\n<h4 id=\"04循环链表c\"><a class=\"anchor\" href=\"#04循环链表c\">#</a> 04 循环链表.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"CircleLinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PERSON</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCircleLinkNode node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MyPrint</span><span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d Score:%d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>age<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">MyCompare</span><span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span> data1<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>p2<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> p1<span class=\"token operator\">-></span>age <span class=\"token operator\">==</span> p2<span class=\"token operator\">-></span>age<span class=\"token operator\">&amp;&amp;</span> p1<span class=\"token operator\">-></span>score <span class=\"token operator\">==</span> p2<span class=\"token operator\">-></span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> CIRCLELINKLIST_TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> CIRCLELINKLIST_FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 创建循环链表</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tCircleLinkList<span class=\"token operator\">*</span> clist <span class=\"token operator\">=</span> <span class=\"token function\">Init_CircleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tPerson p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">,</span> p5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p5<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"eee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tp1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tp2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tp3<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tp4<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tp5<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tp1<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tp2<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tp3<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tp4<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tp5<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 数据入链表</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">Print_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> MyPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tPerson pDel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pDel<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tpDel<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tpDel<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 根据值删除</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">RemoveByValue_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pDel<span class=\"token punctuation\">,</span> MyCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">Print_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> MyPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">FreeSpace_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"circlelinklistc\"><a class=\"anchor\" href=\"#circlelinklistc\">#</a> CircleLinkList.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"CircleLinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CircleLinkList<span class=\"token operator\">*</span> <span class=\"token function\">Init_CircleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tCircleLinkList<span class=\"token operator\">*</span> clist <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tclist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tclist<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> clist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 插入函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">></span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpos <span class=\"token operator\">=</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 根据位置查找结点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 新数据入链表</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tdata<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tclist<span class=\"token operator\">-></span>size <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 获得第一个元素</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>CircleLinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Front_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 根据位置删除</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByPos_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">>=</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 根据 pos 找结点</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 缓存当前结点的下一个结点</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pNext <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pNext<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tclist<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 根据值去删除</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByValue_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">// 这个是循环链表</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pPrev <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> pPrev<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CIRCLELINKLIST_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\tpPrev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\tclist<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\tpPrev <span class=\"token operator\">=</span> pCurrent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pPrev<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 获得链表的长度</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">return</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsEmpty_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> CIRCLELINKLIST_TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token keyword\">return</span> CIRCLELINKLIST_FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CIRCLELINKLIST_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\tflag <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">// 打印节点</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> PRINTNODE print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"circlelinklisth\"><a class=\"anchor\" href=\"#circlelinklisth\">#</a> CircleLinkList.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CIRCLELINKLIST</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CIRCLELINKLIST</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 链表的小结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CIRCLELINKNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CIRCLELINKNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CircleLinkNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 链表结构体</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CIRCLELINKLIST</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tCircleLinkNode head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CircleLinkList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 编写针对链表结构体操作的 API 函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CIRCLELINKLIST_TRUE</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CIRCLELINKLIST_FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 比较回调</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>COMPARENODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 打印回调</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PRINTNODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>CircleLinkList<span class=\"token operator\">*</span> <span class=\"token function\">Init_CircleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 插入函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 获得第一个元素</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>CircleLinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Front_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 根据位置删除</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByPos_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 根据值去删除</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByValue_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 获得链表的长度</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsEmpty_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 打印节点</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> PRINTNODE print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h3 id=\"循环链表应用约瑟夫问题\"><a class=\"anchor\" href=\"#循环链表应用约瑟夫问题\">#</a> 循环链表应用 (约瑟夫问题)</h3>\n<p>** 例题：**n 个人围成一个圆圈，首先第 1 个人从 1 开始一个人一个人顺时针报数，报到第 m 个人，令其出列。然后再从下一 个人开始从 1 顺时针报数，报到第 m 个人，再令其出列，…，如此下去，求出列顺序。</p>\n<p><strong>假设：</strong> m = 8，n=3</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112052110332.png\" alt=\"img\" /></p>\n<h4 id=\"05约瑟夫问题c\"><a class=\"anchor\" href=\"#05约瑟夫问题c\">#</a> 05 约瑟夫问题.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CircleLinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M</span> <span class=\"token expression\"><span class=\"token number\">8</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">3</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MYNUM</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tCircleLinkNode node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span>MyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MyPrint</span><span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tMyNum<span class=\"token operator\">*</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">MyCompare</span><span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span> data1<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tMyNum<span class=\"token operator\">*</span> num1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tMyNum<span class=\"token operator\">*</span> num2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> num2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> CIRCLELINKLIST_TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> CIRCLELINKLIST_FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 创建循环链表</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tCircleLinkList<span class=\"token operator\">*</span> clist <span class=\"token operator\">=</span> <span class=\"token function\">Init_CircleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 链表插入数据</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tMyNum num<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">Print_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> MyPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tMyNum<span class=\"token operator\">*</span> temNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pCurrent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> temNum<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token comment\">// 缓存待删除结点的下一个结点</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tCircleLinkNode<span class=\"token operator\">*</span> pNext <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">// 根据值删除</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token function\">RemoveByValue_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">,</span> pCurrent<span class=\"token punctuation\">,</span> MyCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\tpCurrent <span class=\"token operator\">=</span> pNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\tindex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\tMyNum<span class=\"token operator\">*</span> tempNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Front_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>tempNum<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">// 释放链表内存</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">FreeSpace_CircleLinkList</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"circlelinklisc\"><a class=\"anchor\" href=\"#circlelinklisc\">#</a> CircleLinkLis.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"CircleLinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CircleLinkList<span class=\"token operator\">*</span> <span class=\"token function\">Init_CircleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCircleLinkList<span class=\"token operator\">*</span> clist <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tclist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tclist<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> clist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 插入函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">></span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tpos <span class=\"token operator\">=</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 根据位置查找结点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 新数据入链表</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tdata<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tclist<span class=\"token operator\">-></span>size <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 获得第一个元素</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>CircleLinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Front_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// 根据位置删除</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByPos_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">>=</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 根据 pos 找结点</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">// 缓存当前结点的下一个结点</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pNext <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pNext<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tclist<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">// 根据值去删除</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByValue_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">// 这个是循环链表</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pPrev <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> pPrev<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CIRCLELINKLIST_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\tpPrev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\tclist<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tpPrev <span class=\"token operator\">=</span> pCurrent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pPrev<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">// 获得链表的长度</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">return</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsEmpty_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> CIRCLELINKLIST_TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">return</span> CIRCLELINKLIST_FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CIRCLELINKLIST_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\tflag <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token comment\">// 打印节点</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> PRINTNODE print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token comment\">// 辅助指针变量</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\tCircleLinkNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> clist<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>clist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"circlelinklish\"><a class=\"anchor\" href=\"#circlelinklish\">#</a> CircleLinkLis.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CIRCLELINKLIST</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CIRCLELINKLIST</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 链表的小结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CIRCLELINKNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CIRCLELINKNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CircleLinkNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 链表结构体</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CIRCLELINKLIST</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tCircleLinkNode head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CircleLinkList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 编写针对链表结构体操作的 API 函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CIRCLELINKLIST_TRUE</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CIRCLELINKLIST_FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 比较回调</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>COMPARENODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 打印回调</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PRINTNODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CircleLinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>CircleLinkList<span class=\"token operator\">*</span> <span class=\"token function\">Init_CircleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 插入函数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Insert_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 获得第一个元素</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>CircleLinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Front_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 根据位置删除</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByPos_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 根据值去删除</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveByValue_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 获得链表的长度</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsEmpty_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> CircleLinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> COMPARENODE compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 打印节点</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Print_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">,</span> PRINTNODE print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_CircleLinkList</span><span class=\"token punctuation\">(</span>CircleLinkList<span class=\"token operator\">*</span> clist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"25双向链表\"><a class=\"anchor\" href=\"#25双向链表\">#</a> 2.5 双向链表</h2>\n<h3 id=\"双向链表基本概念\"><a class=\"anchor\" href=\"#双向链表基本概念\">#</a> 双向链表基本概念</h3>\n<p><strong>请思考</strong>： 为什么<strong>需要</strong>双向链表？</p>\n<p>n 单链表的结点都只有一个指向下一个结点的指针</p>\n<p>n 单链表的数据元素无法直接访问其前驱元素</p>\n<p>n <strong>逆序访问单链表</strong>中的元素是极其<strong>耗时</strong>的操作！（如图）</p>\n<p>l 双向链表的定义</p>\n<p>在单链表的结点中增加一个指向其前驱的 pre 指针。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112052152159.png\" alt=\"img\" /></p>\n<h3 id=\"双向链表设计与实现\"><a class=\"anchor\" href=\"#双向链表设计与实现\">#</a> 双向链表设计与实现</h3>\n<h4 id=\"插入操作-2\"><a class=\"anchor\" href=\"#插入操作-2\">#</a> 插入操作</h4>\n<h5 id=\"在普通位置插入节点\"><a class=\"anchor\" href=\"#在普通位置插入节点\">#</a> 在普通位置插入节点</h5>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112052152757.png\" alt=\"img\" /></p>\n<p><strong>current-&gt;next = node;</strong></p>\n<p><strong>node-&gt;next = next;</strong></p>\n<p><strong>next-&gt;pre = node;</strong></p>\n<p><strong>node-&gt;pre = current;</strong></p>\n<h5 id=\"在空链表中插入节点\"><a class=\"anchor\" href=\"#在空链表中插入节点\">#</a> <strong>在空链表中插入节点</strong></h5>\n<p><strong><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112052153956.png\" alt=\"img\" /></strong></p>\n<p><strong>插入操作异常处理</strong></p>\n<p><strong>在空链表中插入新的元素</strong></p>\n<ul>\n<li><strong>空节点（NULL）没有前驱指针；</strong></li>\n<li><strong>新节点的前驱指针，需要指向 NULL；</strong></li>\n</ul>\n<h4 id=\"删除操作-2\"><a class=\"anchor\" href=\"#删除操作-2\">#</a> 删除操作</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112052152779.png\" alt=\"img\" /></p>\n<p><strong>current-&gt;next = next;</strong></p>\n<p><strong>next-&gt;pre = current;</strong></p>\n<p><strong>删除操作异常处理：当双向链表仅有一个节点的时候</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112052152785.png\" alt=\"img\" /></p>\n<p><strong>如果辅助指针变量 pNext == NULL，那么 pNext 是没有前驱操作的。空指针既没有前驱也没有后继。</strong></p>\n<h3 id=\"双向链表\"><a class=\"anchor\" href=\"#双向链表\">#</a> 双向链表</h3>\n<h4 id=\"06双向链表c\"><a class=\"anchor\" href=\"#06双向链表c\">#</a> 06 双向链表.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"DoubleLinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_TEAHCER</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Teacher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PrintNode</span><span class=\"token punctuation\">(</span>DoubleListNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tTeacher<span class=\"token operator\">*</span> teacher <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Teacher<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d\\n\"</span><span class=\"token punctuation\">,</span>teacher<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>teacher<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 测试双向链表函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 创建双向链表</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tDoubleLinkList<span class=\"token operator\">*</span> dlist <span class=\"token operator\">=</span> <span class=\"token function\">InitDoubleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tTeacher t1<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">,</span> t3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tt1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tt2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tt3<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 插入数据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">InsertDoubleLinkList</span><span class=\"token punctuation\">(</span>dlist<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">InsertDoubleLinkList</span><span class=\"token punctuation\">(</span>dlist<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">InsertDoubleLinkList</span><span class=\"token punctuation\">(</span>dlist<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 打印数据</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------正向遍历----------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">PrintDoubleListNode</span><span class=\"token punctuation\">(</span>dlist<span class=\"token punctuation\">,</span> PrintNode<span class=\"token punctuation\">,</span> DOUBLE_FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------逆序遍历----------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">PrintDoubleListNode</span><span class=\"token punctuation\">(</span>dlist<span class=\"token punctuation\">,</span> PrintNode<span class=\"token punctuation\">,</span>DOUBLE_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"doublelinklistc\"><a class=\"anchor\" href=\"#doublelinklistc\">#</a> DoubleLinkList.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"DoubleLinkList.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 双向链表初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DoubleLinkList<span class=\"token operator\">*</span> <span class=\"token function\">InitDoubleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tDoubleLinkList<span class=\"token operator\">*</span> dlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dlist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tdlist<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tdlist<span class=\"token operator\">-></span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tdlist<span class=\"token operator\">-></span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> dlist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 销毁双向链表</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DestroyDoubleLinkList</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 向链表中插入结点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">InsertDoubleLinkList</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 创建新的结点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tDoubleListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DoubleListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DoubleListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 第一次插入</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dlist<span class=\"token operator\">-></span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> dlist<span class=\"token operator\">-></span>rear <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>rear <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 初始化 head 结点前驱和后继结点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 初始化 rear 结点的前驱和后继结点</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>rear<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>rear<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 头插法</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tnewnode<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> dlist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 尾差法</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">>=</span> dlist<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>rear<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tnewnode<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> dlist<span class=\"token operator\">-></span>rear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>rear <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tdlist<span class=\"token operator\">-></span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 其他插入</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tDoubleListNode<span class=\"token operator\">*</span> pPrev <span class=\"token operator\">=</span> dlist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tDoubleListNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> pPrev<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tpPrev <span class=\"token operator\">=</span> pCurrent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> pPrev<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pCurrent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tpCurrent<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tpPrev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> pPrev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tdlist<span class=\"token operator\">-></span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">// 打印链表</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PrintDoubleListNode</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">,</span> PrintDoubleLinkListNode print<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> IsReverse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tDoubleListNode<span class=\"token operator\">*</span> pCurrent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">//true 表示 逆序遍历</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsReverse <span class=\"token operator\">==</span> DOUBLE_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> dlist<span class=\"token operator\">-></span>rear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tpCurrent <span class=\"token operator\">=</span> dlist<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCurrent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>pCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\tpCurrent <span class=\"token operator\">=</span> pCurrent<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">// 获得链表长度</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetLengthDoubleLinkList</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token keyword\">return</span> dlist<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">// 判断链表是否为空</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsEmptyDoubleLinkList</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">return</span> DOUBLE_TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"doublelinklisth\"><a class=\"anchor\" href=\"#doublelinklisth\">#</a> DoubleLinkList.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">DOUBLELINKLIST_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DOUBLELINKLIST_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DOUBLE_FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DOUBLE_TRUE</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 链表结点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DOUBLELISTNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DOUBLELISTNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DOUBLELISTNODE</span><span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DoubleListNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 头结点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DOUBLELINKLIST</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tDoubleListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首结点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tDoubleListNode<span class=\"token operator\">*</span> rear<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尾结点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 链表长度</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DoubleLinkList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 打印回调函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PrintDoubleLinkListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>DoubleListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 双向链表初始化</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>DoubleLinkList<span class=\"token operator\">*</span> <span class=\"token function\">InitDoubleLinkList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 销毁双向链表</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DestroyDoubleLinkList</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 向链表中插入结点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">InsertDoubleLinkList</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 打印链表</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PrintDoubleListNode</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">,</span> PrintDoubleLinkListNode<span class=\"token operator\">*</span> print<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> IsReverse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 获得链表长度</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetLengthDoubleLinkList</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 判断链表是否为空</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsEmptyDoubleLinkList</span><span class=\"token punctuation\">(</span>DoubleLinkList<span class=\"token operator\">*</span> dlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h1 id=\"3受限线性表\"><a class=\"anchor\" href=\"#3受限线性表\">#</a> 3. 受限线性表</h1>\n<h2 id=\"31栈stack\"><a class=\"anchor\" href=\"#31栈stack\">#</a> 3.1 栈 (Stack)</h2>\n<h3 id=\"栈的基本概念\"><a class=\"anchor\" href=\"#栈的基本概念\">#</a> 栈的基本概念</h3>\n<h4 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> <strong>概念：</strong></h4>\n<p>首先它是一个线性表，也就是说，栈元素具有线性关系，即前驱后继关系。只不过<strong>它是一种特殊的线性表</strong>而已。定义中说是在线性表的表尾进行插入和删除操作，这里表尾是指栈顶，而不是栈底。</p>\n<h4 id=\"特性\"><a class=\"anchor\" href=\"#特性\">#</a> <strong>特性</strong>:</h4>\n<p><strong>它的特殊之处在于限制了这个线性表的插入和删除的位置，它始终只在栈顶进行。这也就使得：栈底是固定的，最先进栈的只能在栈底。</strong></p>\n<h4 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> <strong>操作</strong>:</h4>\n<ul>\n<li>栈的插入操作，叫做进栈，也成压栈。类似子弹入弹夹（如下图所示）</li>\n<li>栈的删除操作，叫做出栈，也有的叫做弾栈，退栈。如同弹夹中的子弹出夹（如下图所示）</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112092229499.png\" alt=\"img\" /></p>\n<ul>\n<li>创建栈</li>\n<li>销毁栈</li>\n<li>清空栈</li>\n<li>进栈</li>\n<li>出栈</li>\n<li>获取栈顶元素</li>\n<li>获取栈的大小</li>\n</ul>\n<h4 id=\"栈的抽象数据类型\"><a class=\"anchor\" href=\"#栈的抽象数据类型\">#</a> <strong>栈的抽象数据类型</strong></h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT 栈（stack）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 通线性表。元素具有相同的类型，相邻的元素具有前驱和后继关系。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Operation</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// 初始化，建立一个空栈 S</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token function\">InitStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// 若栈存在，则销毁它</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token function\">DestroyStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// 将栈清空</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token function\">ClearStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">// 若栈为空则返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">// 若栈存在且非空，用 e 返回 S 的栈顶元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span>S，<span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">// 若栈 S 存在，插入新元素 e 到栈 S 中并成为其栈顶元素</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S，e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">// 删除栈 S 中的栈顶元素，并用 e 返回其值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> Pop（<span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token comment\">// 返回栈 S 的元素个数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token function\">StackLength</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>endADT</pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112092229507.png\" alt=\"img\" /></p>\n<h2 id=\"32栈的顺序存储\"><a class=\"anchor\" href=\"#32栈的顺序存储\">#</a> 3.2 栈的顺序存储</h2>\n<h3 id=\"基本概念-3\"><a class=\"anchor\" href=\"#基本概念-3\">#</a> <strong>基本概念</strong></h3>\n<p>栈的顺序存储结构简称顺序栈，它是运算受限制的顺序表。顺序栈的存储结构是：<strong>利用一组地址连续的的存储单元依次存放自栈底到栈顶的数据元素</strong>，同时附设指针 top 只是栈顶元素在顺序表中的位置。</p>\n<h3 id=\"设计与实现-2\"><a class=\"anchor\" href=\"#设计与实现-2\">#</a> <strong>设计与实现</strong></h3>\n<p><strong>因为栈是一种特殊的线性表，所以栈的顺序存储可以通过顺序线性表来实现。</strong></p>\n<h4 id=\"07栈的顺序存储c\"><a class=\"anchor\" href=\"#07栈的顺序存储c\">#</a> 07 栈的顺序存储.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"SeqStack.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PERSON</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tSeqStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token function\">Init_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPerson p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPerson p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPerson p3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPerson p4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tPerson p5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"eee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// 访问栈顶元素</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tPerson<span class=\"token operator\">*</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d\\n\"</span><span class=\"token punctuation\">,</span>person<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>person<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">// 弹出栈顶元素</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token function\">Pop_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">FreeSpace_SeqStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"seqstackc\"><a class=\"anchor\" href=\"#seqstackc\">#</a> SeqStack.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"SeqStack.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化栈</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SeqStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tSeqStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_SIZE<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tstack<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> MAX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tstack<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-></span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Top_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-></span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstack<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> SEQSTACK_TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">return</span> SEQSTACK_FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 返回栈中元素的个数</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stack<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tstack<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"seqstackh\"><a class=\"anchor\" href=\"#seqstackh\">#</a> SeqStack.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">SEQSTACK_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEQSTACK_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 数组去模拟栈的顺序存储</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEQSTACK_TRUE</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEQSTACK_FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SEQSTACK</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SeqStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 初始化栈</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>SeqStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Top_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 返回栈中元素的个数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"33栈的链式存储\"><a class=\"anchor\" href=\"#33栈的链式存储\">#</a> 3.3 栈的链式存储</h2>\n<h3 id=\"基本概念-4\"><a class=\"anchor\" href=\"#基本概念-4\">#</a> <strong>基本概念</strong></h3>\n<p>栈的链式存储结构简称链栈。</p>\n<p><strong>思考如下问题</strong>：</p>\n<p>栈只是栈顶来做插入和删除操作，栈顶放在链表的头部还是尾部呢？</p>\n<p>由于单链表有头指针，而栈顶指针也是必须的，那干嘛不让他俩合二为一呢，所以比较好的办法就是把栈顶放在单链表的头部。另外都已经有了栈顶在头部了，单链表中比较常用的头结点也就失去了意义，通常对于链栈来说，是不需要头结点的。</p>\n<h3 id=\"设计与实现-3\"><a class=\"anchor\" href=\"#设计与实现-3\">#</a> <strong>设计与实现</strong></h3>\n<p>链栈是一种特殊的线性表，链栈可以通过链式线性表来实现。</p>\n<h4 id=\"08栈的链式存储c\"><a class=\"anchor\" href=\"#08栈的链式存储c\">#</a> 08 栈的链式存储.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PERSON</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLinkNode node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPerson p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">,</span> p5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p5<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"eee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tp1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tp2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tp3<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tp4<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tp5<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 取出栈顶元素</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tPerson<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">// 弹出栈顶元素</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkstackc\"><a class=\"anchor\" href=\"#linkstackc\">#</a> LinkStack.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LinkStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tdata<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 第一个有效结点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pNext <span class=\"token operator\">=</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pNext<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>LinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 返回栈元素的个数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkstackh\"><a class=\"anchor\" href=\"#linkstackh\">#</a> LinkStack.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LINKSTACK_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINKSTACK_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 链式栈的结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 链式栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKSTACK</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLinkNode head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>LinkStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>LinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 返回栈元素的个数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"34栈的应用案例\"><a class=\"anchor\" href=\"#34栈的应用案例\">#</a> 3.4 栈的应用 (案例)</h2>\n<h3 id=\"案例1-就近匹配\"><a class=\"anchor\" href=\"#案例1-就近匹配\">#</a> <strong>案例 1: 就近匹配</strong></h3>\n<p>几乎所有的编译器都具有检测括号是否匹配的能力，那么如何实现编译器中的符号成对检测？如下字符串:</p>\n<p int=\"\" a[4][4];=\"\" int=\"\" (*p)[4];=\"\" p=\"\">#include &lt;stdio.h&gt; int main()</p>\n<p><strong>算法思路</strong></p>\n<ul>\n<li>从第一个字符开始扫描</li>\n<li>当遇见普通字符时忽略，</li>\n<li>当遇见左符号时压入栈中</li>\n<li>当遇见右符号时从栈中弹出栈顶符号，并进行匹配</li>\n<li>匹配成功：继续读入下一个字符</li>\n<li>匹配失败：立即停止，并报错</li>\n</ul>\n<p><strong>结束</strong>：</p>\n<ul>\n<li>成功：所有字符扫描完毕，且栈为空</li>\n<li>失败：匹配失败或所有字符扫描完毕但栈非空</li>\n</ul>\n<p><strong>总结</strong></p>\n<ul>\n<li><strong>当需要检测成对出现但又互不相邻的事物时可以使用栈 “后进先出” 的特性</strong></li>\n<li><strong>栈非常适合于需要 “就近匹配” 的场合</strong></li>\n</ul>\n<h4 id=\"01-栈的应用_就近匹配c\"><a class=\"anchor\" href=\"#01-栈的应用_就近匹配c\">#</a> 01 栈的应用_就近匹配.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MYCHAR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLinkNode node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pAddres<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>MyChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsLeft</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>MyChar<span class=\"token operator\">*</span> <span class=\"token function\">CreateMyChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tMyChar<span class=\"token operator\">*</span> mychar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tmychar<span class=\"token operator\">-></span>pAddres <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tmychar<span class=\"token operator\">-></span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> mychar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ShowError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"1+2+6(dsf)df)sflp(sdfs)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 创建栈容器</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">// 如果左括号 直接进栈</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsLeft</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateMyChar</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// 如果是右括号 从栈顶弹出元素 判断是不是左括号</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsRight</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\tMyChar<span class=\"token operator\">*</span> mychar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsLeft</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mychar<span class=\"token operator\">-></span>pAddres<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mychar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"右括号没有匹配的左括号:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t<span class=\"token function\">ShowError</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tMyChar<span class=\"token operator\">*</span> mychar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"左括号没有匹配的右括号:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token function\">ShowError</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> mychar<span class=\"token operator\">-></span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mychar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkstackc-2\"><a class=\"anchor\" href=\"#linkstackc-2\">#</a> LinkStack.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LinkStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tdata<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 第一个有效结点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pNext <span class=\"token operator\">=</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pNext<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>LinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 返回栈元素的个数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkstackh-2\"><a class=\"anchor\" href=\"#linkstackh-2\">#</a> LinkStack.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LINKSTACK_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINKSTACK_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 链式栈的结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 链式栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKSTACK</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLinkNode head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>LinkStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>LinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 返回栈元素的个数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h3 id=\"案例2中缀表达式和后缀表达式\"><a class=\"anchor\" href=\"#案例2中缀表达式和后缀表达式\">#</a> <strong>案例 2：中缀表达式和后缀表达式</strong></h3>\n<p><strong>后缀表达式</strong>（由波兰科学家在 20 世纪 50 年代提出）</p>\n<ul>\n<li><strong>将运算符放在数字后面 ===》 符合计算机运算</strong></li>\n<li>我们习惯的数学表达式叫做中缀表达式 ===》符合人类思考习惯</li>\n</ul>\n<p><strong>实例</strong></p>\n<ul>\n<li>\n<p>5 + 4 =&gt; 5 4 +</p>\n</li>\n<li>\n<p>1 + 2 * 3 =&gt; 1 2 3 * +</p>\n</li>\n<li>\n<p>8 + ( 3 – 1 ) * 5 =&gt; 8 3 1 – 5 * +</p>\n</li>\n</ul>\n<p><strong>中缀转后缀算法</strong>：</p>\n<p>遍历中缀表达式中的数字和符号：</p>\n<ul>\n<li>\n<p>对于数字：直接输出</p>\n</li>\n<li>\n<p>对于符号：</p>\n<ul>\n<li>\n<p>左括号：进栈</p>\n</li>\n<li>\n<p>运算符号：与栈顶符号进行优先级比较</p>\n<ul>\n<li>\n<p>若栈顶符号优先级低：此符号进栈</p>\n<p>（默认栈顶若是左括号，左括号优先级最低）</p>\n</li>\n<li>\n<p>若栈顶符号优先级不低：将栈顶符号弹出并输出，之后进栈</p>\n</li>\n</ul>\n</li>\n<li>\n<p>右括号：将栈顶符号弹出并输出，直到匹配左括号</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>遍历结束：将栈中的所有符号弹出并输出</p>\n<h4 id=\"中缀转后缀伪代码-priority\"><a class=\"anchor\" href=\"#中缀转后缀伪代码-priority\">#</a> <strong>中缀转后缀伪代码 priority</strong></h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t创建栈S；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ti<span class=\"token operator\">=</span> <span class=\"token number\">0</span>；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> ‘\\<span class=\"token number\">0</span>’<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> 为数字<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tOutput（exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> 为符号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>优先级 <span class=\"token operator\">&lt;=</span> 栈顶符号优先级<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\toutput（栈顶符号）；</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\tPop（S）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> 为左括号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> 为右括号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>栈顶符号不为左括号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\toutput（栈顶符号）；</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\tPop（S）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t从S中弹出左括号；</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t报错，停止循环；</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ‘\\<span class=\"token number\">0</span>’<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">output</span><span class=\"token punctuation\">(</span>栈顶符号<span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tPop（S）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"02-中转表达时转后缀表达式c\"><a class=\"anchor\" href=\"#02-中转表达时转后缀表达式c\">#</a> 02 中转表达时转后缀表达式.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 判断是否是数字</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 判断是不是左括号</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsLeft</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 判断是不是右括号</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 判断是不是运算符号</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsOperator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 返回运算符号优先级</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetPriority</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MYCHAR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tLinkNode node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span>MyChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 数字操作</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NumberOperate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 创建 MyChar</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>MyChar<span class=\"token operator\">*</span> <span class=\"token function\">CreateMyChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tMyChar<span class=\"token operator\">*</span> mychar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tmychar<span class=\"token operator\">-></span>p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">return</span> mychar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 左括号的操作</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LeftOperate</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateMyChar</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 右括号操作</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RightOperate</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 先判断栈中有没有元素</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tMyChar<span class=\"token operator\">*</span> mychar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">// 如果匹配到左括号</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsLeft</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mychar<span class=\"token operator\">-></span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mychar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mychar<span class=\"token operator\">-></span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token comment\">// 弹出</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mychar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 运算符号的操作</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">OperatorOperate</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token comment\">// 先取出栈顶符号</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\tMyChar<span class=\"token operator\">*</span> mychar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mychar <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateMyChar</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// 如果栈顶优先级低于当前字符的优先级 直接入栈</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetPriority</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mychar<span class=\"token operator\">-></span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">GetPriority</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateMyChar</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token comment\">//return;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token comment\">// 如果栈顶符号优先级不低</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\tMyChar<span class=\"token operator\">*</span> mychar2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果优先级低 当前符号入栈</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetPriority</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mychar2<span class=\"token operator\">-></span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">GetPriority</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateMyChar</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mychar2<span class=\"token operator\">-></span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token comment\">// 弹出</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t<span class=\"token comment\">// 释放</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mychar2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"8+(3-1)*5\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token comment\">// 如果是数字</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsNumber</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t<span class=\"token function\">NumberOperate</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token comment\">// 如果左括号 直接进栈</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsLeft</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t<span class=\"token function\">LeftOperate</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token comment\">// 如果是右括号</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsRight</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t<span class=\"token function\">RightOperate</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token comment\">// 如果是运算符号</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsOperator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t<span class=\"token function\">OperatorOperate</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\tMyChar<span class=\"token operator\">*</span> mychar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mychar<span class=\"token operator\">-></span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mychar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkstackc-3\"><a class=\"anchor\" href=\"#linkstackc-3\">#</a> LinkStack.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LinkStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tdata<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 第一个有效结点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pNext <span class=\"token operator\">=</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pNext<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>LinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 返回栈元素的个数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkstackh-3\"><a class=\"anchor\" href=\"#linkstackh-3\">#</a> LinkStack.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LINKSTACK_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINKSTACK_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 链式栈的结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 链式栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKSTACK</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLinkNode head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>LinkStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>LinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 返回栈元素的个数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<h3 id=\"案例3计算机如何基于后缀表达式计算\"><a class=\"anchor\" href=\"#案例3计算机如何基于后缀表达式计算\">#</a> <strong>案例 3：计算机如何基于后缀表达式计算</strong></h3>\n<p><strong>思考</strong></p>\n<p>计算机是如何基于后缀表达式计算的？</p>\n<p>例如：8 3 1 – 5 * +</p>\n<p><strong>计算规则</strong></p>\n<p>遍历后缀表达式中的数字和符号</p>\n<ul>\n<li>\n<p>对于数字：进栈</p>\n</li>\n<li>\n<p>对于符号：</p>\n<ul>\n<li>\n<p>从栈中弹出右操作数</p>\n</li>\n<li>\n<p>从栈中弹出左操作数</p>\n</li>\n<li>\n<p>根据符号进行运算</p>\n</li>\n<li>\n<p>将运算结果压入栈中</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>遍历结束：栈中的唯一数字为计算结果</p>\n<h4 id=\"代码实现伪代码-express\"><a class=\"anchor\" href=\"#代码实现伪代码-express\">#</a> <strong>代码实现（伪代码） express</strong></h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t创建栈；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> ‘\\<span class=\"token number\">0</span>’<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span>（exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>为数字）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tPush（S<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>为符号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">1.</span> 从栈顶弹出右操作数；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">2.</span> 从栈中弹出左操作数；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">3.</span> 根据符号进行运算；</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">4.</span> Push（stack， 结果）；</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t报错，停止循环；</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> exp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ‘\\<span class=\"token number\">0</span>’<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t栈中唯一的数字为运算结果；</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t返回结果；</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"03-根据后缀表达式求解c\"><a class=\"anchor\" href=\"#03-根据后缀表达式求解c\">#</a> 03 根据后缀表达式求解.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IsNumber2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MYNUM</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tLinkNode node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span>MyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Caculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> left <span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> left <span class=\"token operator\">/</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 后缀表达式</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"831-5*+\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">// 如果是数字 直接入栈</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsNumber2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\tMyNum<span class=\"token operator\">*</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tnum<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token comment\">// 先从栈中弹出右操作数</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tMyNum<span class=\"token operator\">*</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> rightNum <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取出左操作数</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tMyNum<span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> leftNum <span class=\"token operator\">=</span> left<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">Caculate</span><span class=\"token punctuation\">(</span>leftNum<span class=\"token punctuation\">,</span> rightNum<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token comment\">// 结果入栈</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\tMyNum<span class=\"token operator\">*</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\tnum<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tMyNum<span class=\"token operator\">*</span> num <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span>MyNum<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运算结果是:%d\\n\"</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">// 释放栈</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkstackc-4\"><a class=\"anchor\" href=\"#linkstackc-4\">#</a> LinkStack.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LinkStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tdata<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 第一个有效结点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tLinkNode<span class=\"token operator\">*</span> pNext <span class=\"token operator\">=</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pNext<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>LinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 返回栈元素的个数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tstack<span class=\"token operator\">-></span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tstack<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkstackh-4\"><a class=\"anchor\" href=\"#linkstackh-4\">#</a> LinkStack.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LINKSTACK_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINKSTACK_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 链式栈的结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKNODE</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 链式栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LINKSTACK</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLinkNode head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>LinkStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_LinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">,</span> LinkNode<span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 返回栈顶元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>LinkNode<span class=\"token operator\">*</span> <span class=\"token function\">Top_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 返回栈元素的个数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 销毁栈</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_LinkStack</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token operator\">*</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"35队列queue\"><a class=\"anchor\" href=\"#35队列queue\">#</a> 3.5 队列 (Queue)</h2>\n<h3 id=\"队列基本概念\"><a class=\"anchor\" href=\"#队列基本概念\">#</a> 队列基本概念</h3>\n<p>队列是一种特殊的受限制的线性表。</p>\n<p><strong>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</strong></p>\n<p>队列是一种先进先出的（First In First Out）的线性表，简称 FIFO。允许插入的一端为队尾，允许删除的一端为队头。队列不允许在中间部位进行操作！假设队列是 q=（a1，a2，……，an），那么 a1 就是队头元素，而 an 是队尾元素。这样我们就可以删除时，总是从 a1 开始，而插入时，总是在队列最后。这也比较符合我们通常生活中的习惯，排在第一个的优先出列，最后来的当然排在队伍最后。如下图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112112133488.png\" alt=\"img\" /></p>\n<h3 id=\"队列常用操作\"><a class=\"anchor\" href=\"#队列常用操作\">#</a> 队列常用操作</h3>\n<ul>\n<li>创建队列</li>\n<li>销毁队列</li>\n<li>清空队列</li>\n<li>进队列</li>\n<li>出队列</li>\n<li>获取队头元素</li>\n<li>获取队列的长度</li>\n</ul>\n<h3 id=\"队列的抽象数据类型\"><a class=\"anchor\" href=\"#队列的抽象数据类型\">#</a> <strong>队列的抽象数据类型</strong></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT 队列（Queue）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t通线性表。元素具有相同的类型，相邻元素具有前驱后继关系。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Operation</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 初始化操作，建立一个空队列 Q</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tInitQueue（<span class=\"token operator\">*</span>Q）；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 若队列 Q 存储，则销毁它。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DestroyQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 将队列 Q 清空</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">ClearQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 若队列为空则返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 若队列 Q 存在且非空，用 e 返回队列 Q 的队头元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">GetHead</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 若队列 Q 存在，插入新元素 e 到队列 Q 中并成为队尾元素。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 删除队列 Q 中的队头元素，并用 e 返回其值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 返回队列 Q 的元素个数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">QueueLength</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>endADT</pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112112135591.png\" alt=\"image-20211211213556278\" /></p>\n<h3 id=\"队列的顺序存储\"><a class=\"anchor\" href=\"#队列的顺序存储\">#</a> 队列的顺序存储</h3>\n<h4 id=\"基本概念-5\"><a class=\"anchor\" href=\"#基本概念-5\">#</a> 基本概念</h4>\n<p><strong>队列也是一种特殊的线性表；可以用线性表顺序存储来模拟队列。</strong></p>\n<h4 id=\"05-队列的顺序存储c\"><a class=\"anchor\" href=\"#05-队列的顺序存储c\">#</a> 05 队列的顺序存储.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"SeqQueue.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PERSON</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 创建队列</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tSeqQueue<span class=\"token operator\">*</span> queue <span class=\"token operator\">=</span> <span class=\"token function\">Init_SeqQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 创建数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPerson p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPerson p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPerson p3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPerson p4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tPerson p5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"eee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 数据入队列</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Push_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">Push_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">Push_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">Push_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">Push_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 输出队尾元素</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> backPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Back_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d\\n\"</span><span class=\"token punctuation\">,</span>backPerson<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>backPerson<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Size_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">// 取出队头元素</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tPerson<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">Front_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:%s Age:%d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 从队头弹出元素</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">Pop_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 销毁队列</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">FreeSpace_SeqQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"seqqueuec\"><a class=\"anchor\" href=\"#seqqueuec\">#</a> SeqQueue.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"SeqQueue.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SeqQueue<span class=\"token operator\">*</span> <span class=\"token function\">Init_SeqQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tSeqQueue<span class=\"token operator\">*</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_SIZE<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tqueue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tqueue<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 入队</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 数组左边当做队头</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> MAX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tqueue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>queue<span class=\"token operator\">-></span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tqueue<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 返回队头元素</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Front_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> queue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 出队</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 需要移动元素</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> queue<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tqueue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> queue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tqueue<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 返回队尾元素</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Back_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">return</span> queue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>queue<span class=\"token operator\">-></span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 返回大小</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">return</span> queue<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">// 清空队列</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tqueue<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"seqqueueh\"><a class=\"anchor\" href=\"#seqqueueh\">#</a> SeqQueue.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">SEQQUEUE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEQQUEUE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 顺序队列结构体</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SEQQUEUE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SeqQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>SeqQueue<span class=\"token operator\">*</span> <span class=\"token function\">Init_SeqQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 入队</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Push_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 返回队头元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Front_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 出队</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Pop_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 返回队尾元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Back_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 返回大小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Size_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 清空队列</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clear_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FreeSpace_SeqQueue</span><span class=\"token punctuation\">(</span>SeqQueue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h1 id=\"4树和二叉树\"><a class=\"anchor\" href=\"#4树和二叉树\">#</a> 4. 树和二叉树</h1>\n<h2 id=\"41树\"><a class=\"anchor\" href=\"#41树\">#</a> 4.1 树</h2>\n<h3 id=\"树的基本概念\"><a class=\"anchor\" href=\"#树的基本概念\">#</a> 树的基本概念</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121645903.png\" alt=\"img\" /></p>\n<ul>\n<li>树的定义：</li>\n</ul>\n<p>由一个或多个 (n≥0) 结点组成的有限集合 T，有且仅有一个结点称为根（root），当 n&gt;1 时，其余的结点分为<strong> m (m≥0) 个互不相交的有限集合</strong> T1,T2，…，Tm。每个集合本身又是棵树，被称作这个根的子树 。</p>\n<ul>\n<li>\n<p>树的结构特点</p>\n<ul>\n<li>\n<p>非线性结构，有一个直接前驱，但可能有多个直接后继（1:n）</p>\n</li>\n<li>\n<p>树的定义具有递归性，树中还有树。</p>\n</li>\n<li>\n<p>树可以为空，即节点个数为 0。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>若干术语</p>\n<ul>\n<li>根  即根结点 (没有前驱)</li>\n<li>叶子  即终端结点 (没有后继)</li>\n<li>森林  指 m 棵不相交的树的集合 (例如删除 A 后的子树个数)</li>\n<li>有序树  结点各子树从左至右有序，不能互换（左为第一）</li>\n<li>无序树  结点各子树可互换位置。</li>\n<li>双亲  即上层的那个结点 (直接前驱) parent</li>\n<li>孩子  即下层结点的子树 (直接后继) child</li>\n<li>兄弟  同一双亲下的同层结点（孩子之间互称兄弟）sibling</li>\n<li>堂兄弟  即双亲位于同一层的结点（但并非同一双亲）cousin</li>\n<li>祖先  即从根到该结点所经分支的所有结点</li>\n<li>子孙  即该结点下层子树中的任一结点</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121645888.png\" alt=\"img\" /></p>\n<ul>\n<li>结点  即树的数据元素</li>\n<li>结点的度  结点挂接的子树数（有几个直接后继就是几度）</li>\n<li>结点的层次  从根到该结点的层数（根结点算第一层）</li>\n<li>终端结点  即度为 0 的结点，即叶子</li>\n<li>分支结点  除树根以外的结点（也称为内部结点）</li>\n<li>树的度  所有结点度中的最大值（Max {各结点的度}）</li>\n<li>树的深度 (或高度)  指所有结点中最大的层数（Max {各结点的层次}）</li>\n</ul>\n<p>上图中的结点数＝ 13，树的度＝ 3，树的深度＝ 4</p>\n<h3 id=\"树的表示法\"><a class=\"anchor\" href=\"#树的表示法\">#</a> 树的表示法</h3>\n<h4 id=\"图形表示法\"><a class=\"anchor\" href=\"#图形表示法\">#</a> 图形表示法</h4>\n<p><strong>事物之间的逻辑关系</strong>可以通过数的形式很直观的表示出来，如下图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121646875.png\" alt=\"img\" /></p>\n<h4 id=\"广义表表示法\"><a class=\"anchor\" href=\"#广义表表示法\">#</a> 广义表表示法</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121647361.png\" alt=\"img\" /></p>\n<p>用广义表表示法表示上图：</p>\n<p>中国（河北（保定，石家庄），广东（广州，东莞），山东（青岛，济南））</p>\n<p><strong>根作为由子树森林组成的表的名字写在表的左边。</strong></p>\n<h4 id=\"左孩子右兄弟表示法\"><a class=\"anchor\" href=\"#左孩子右兄弟表示法\">#</a> 左孩子右兄弟表示法</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121646817.png\" alt=\"img\" /></p>\n<p>左孩子右兄弟表示法可以将一颗多叉树转化为一颗二叉树：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121646900.png\" alt=\"img\" /></p>\n<p>节点的结构：</p>\n<p>​    <img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121646907.png\" alt=\"img\" /></p>\n<p>节点有两个指针域，其中一个指针指向子节点，另一个指针指向其兄弟节点。</p>\n<h3 id=\"树的结构\"><a class=\"anchor\" href=\"#树的结构\">#</a> 树的结构</h3>\n<h4 id=\"树的逻辑结构\"><a class=\"anchor\" href=\"#树的逻辑结构\">#</a> 树的逻辑结构</h4>\n<p>树的逻辑结构特点：</p>\n<p>一对多（1:n），有多个直接后继（如家谱树、目录树等等），但只有一个根结点，且子树之间互不相交。</p>\n<h4 id=\"树的存储结构\"><a class=\"anchor\" href=\"#树的存储结构\">#</a> 树的存储结构</h4>\n<p>树的存储仍然有两种方式：</p>\n<ul>\n<li><strong>顺序存储</strong></li>\n</ul>\n<p><strong>可规定为</strong>：从上至下、从左至右将树的结点依次存入内存。</p>\n<p><strong>重大缺陷</strong>：复原<strong>困难</strong>（不能唯一复原就没有实用价值）。</p>\n<ul>\n<li><strong>链式存储</strong></li>\n</ul>\n<p><strong>可用多重链表</strong>：一个前趋指针，n 个后继指针。</p>\n<p><strong>细节问题</strong>：树中结点的结构类型样式该如何设计？</p>\n<p>​     即应该设计成 “等长” 还是 “不等长”？</p>\n<p><strong>缺点</strong>：等长结构太浪费（每个结点的度不一定相同）；</p>\n<p>不等长结构太复杂（要定义好多种结构类型）。</p>\n<p>以上两种存储方式都存在重大缺陷，应该如何解决呢？</p>\n<p>计算机实现各种不同进制的运算是通过先研究最简单、最有规律的二进制运算规律，然后设法把各种不同进制的运算转化二进制运算。树的存储也可以通过先研究最简单、最有规律的树，然后设法把一般的树转化为这种简单的树，这种树就是<strong>二叉树</strong>。</p>\n<h2 id=\"42二叉树\"><a class=\"anchor\" href=\"#42二叉树\">#</a> 4.2 二叉树</h2>\n<h3 id=\"二叉树基本概念\"><a class=\"anchor\" href=\"#二叉树基本概念\">#</a> 二叉树基本概念</h3>\n<p>Ø <strong>定义：</strong></p>\n<p>n（n≥0）个结点的有限集合，由一个根结点以及两棵互不相交的、分别称为左子树和右子树的二叉树组成 。</p>\n<p>Ø <strong>逻辑结构：</strong></p>\n<p>一对二（1：2）</p>\n<p>Ø <strong>基本特征:</strong></p>\n<p>n 每个结点最多只有两棵子树（<strong>不存在度大于 2 的结点</strong>）；</p>\n<p>n 左子树和右子树次序不能颠倒（<strong>有序树</strong>）。</p>\n<p>Ø <strong>基本形态:</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121648537.png\" alt=\"img\" /></p>\n<p>l <strong>问题：</strong></p>\n<p>具有 3 个结点的二叉树可能有几种不同形态？普通树呢？</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121648551.png\" alt=\"img\" /></p>\n<p>二叉树可以画出五种形态，但是普通的数只能有两种形态。</p>\n<p>l <strong>二叉树性质</strong></p>\n<p>n 性质 1: 在二叉树的第 i 层上至多有 2i-1 个结点（i&gt;0）</p>\n<p>n 性质 2: 深度为 k 的二叉树至多有 2k-1 个结点（k&gt;0）</p>\n<p>n 性质 3: 对于任何一棵二叉树，若度为 2 的结点数有 n2 个，则叶子数（n0）必定为 n2＋1 （即 n0=n2+1）</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121648558.gif\" alt=\"*\" /> 概念解释：</p>\n<p>² <strong>满二叉树</strong></p>\n<p>一棵深度为 k 且有 2k -1 个结点的二叉树。</p>\n<p>​    <strong>特点：每层都 “充满” 了结点</strong></p>\n<p>​              <strong><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121648564.png\" alt=\"img\" /></strong></p>\n<p>² <strong>完全二叉树</strong></p>\n<p>除最后一层外，每一层上的<a href=\"http://baike.baidu.com/view/47398.htm\"><strong>节点</strong></a>数均达到最大值；在最后一层上只缺少右边的若干<a href=\"http://baike.baidu.com/view/549491.htm\"><strong>结点</strong></a>。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121648570.png\" alt=\"img\" /></p>\n<p><strong>理解：k-1 层与满二叉树完全相同，第 k 层结点尽力靠左</strong></p>\n<p>n 性质 4: 具有 n 个结点的完全二叉树的深度必为<strong>ë<strong><strong>log2n</strong></strong>û****+1</strong></p>\n<p>n <strong>性质 5: 对完全二叉树，若从上至下、从左至右编号，则编号为 i 的结点，其左孩子编号必为 2i，其右孩子编号必为 2i＋1；其双亲的编号必为 i/2（i＝1 时为根，除外）</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121649949.png\" alt=\"img\" /></p>\n<p>使用此性质可以使用完全二叉树实现树的顺序存储。</p>\n<p>如果不是完全二叉树咋整？？？</p>\n<p>------ 将其转换成完全二叉树即可</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121648934.png\" alt=\"img\" /></p>\n<p><strong>缺点：①浪费空间；②插入、删除不便</strong></p>\n<h3 id=\"二叉树的表示\"><a class=\"anchor\" href=\"#二叉树的表示\">#</a> 二叉树的表示</h3>\n<p>Ø <strong>二叉链表示法</strong></p>\n<p>一般从根结点开始存储。相应地，访问树中结点时也只能从根开始。</p>\n<p>n <strong>存储结构</strong></p>\n<p><strong><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121649857.png\" alt=\"img\" /></strong></p>\n<p>n <strong>结点数据类型定义：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span>\t\tdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>BiTNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Ø <strong>三叉链表表示法</strong></p>\n<p>n <strong>存储结构</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121649338.png\" alt=\"img\" /></p>\n<p>每个节点有三个指针域，其中两个分别指向子节点（左孩子，右孩子），还有一共指针指向该节点的父节点。</p>\n<p>n <strong>节点数据类型定义</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 三叉链表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TriTNode</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 左右孩子指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TriTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TriTNode</span> <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span>TriTNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>TriTree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"二叉树的遍历\"><a class=\"anchor\" href=\"#二叉树的遍历\">#</a> 二叉树的遍历</h3>\n<p>Ø 遍历定义</p>\n<p>指按某条搜索路线<strong>遍访每个结点且不重复</strong>（又称周游）。</p>\n<p>Ø 遍历用途</p>\n<p>它是树结构插入、删除、修改、查找和排序运算的前提，是二叉树一切运算的基础和核心。</p>\n<p>Ø 遍历方法</p>\n<p>牢记一种约定，<strong>对每个结点的查看都是 “先左后右”</strong> 。</p>\n<p>限定先左后右，树的遍历有三种实现方案：</p>\n<p><strong>D</strong>LR         L<strong>D</strong>R        LR<strong>D</strong></p>\n<p><strong>先</strong> (<strong>根</strong>) 序遍历    <strong>中</strong> (<strong>根</strong>) 序遍历    <strong>后</strong> (<strong>根</strong>) 序遍历</p>\n<p>n <strong>DLR</strong> <strong>— 先序遍历，即先根再左再右</strong></p>\n<p>n <strong>LDR</strong> <strong>— 中序遍历，即先左再根再右</strong></p>\n<p>n <strong>LRD</strong> <strong>— 后序遍历，即先左再右再根</strong></p>\n<p><strong>注：“先、中、后” 的意思是指访问的结点 D 是先于子树出现还是后于子树出现。</strong></p>\n<p><strong>从递归的角度看，这三种算法是完全相同的，或者说这三种遍历算法的访问路径是相同的，只是访问结点的时机不同。</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121650744.png\" alt=\"img\" /></p>\n<p>​    从虚线的出发点到终点的路径上，每个结点经过 3 次。</p>\n<p>n <strong>第 1 次经过时访问＝先序遍历</strong></p>\n<p>n <strong>第 2 次经过时访问＝中序遍历</strong></p>\n<p>n <strong>第 3 次经过时访问＝后序遍历</strong></p>\n<p><strong>案例：</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202112121650751.png\" alt=\"img\" /></p>\n<h4 id=\"07-二叉树递归遍历\"><a class=\"anchor\" href=\"#07-二叉树递归遍历\">#</a> 07 二叉树递归遍历</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 二叉树结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BINARYNODE</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BINARYNODE</span><span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BINARYNODE</span><span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>BinaryNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 递归遍历</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Recursion</span><span class=\"token punctuation\">(</span>BinaryNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 再遍历左子树</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Recursion</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 再遍历右子树</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">Recursion</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 先访问根结点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> root<span class=\"token operator\">-></span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CresteBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 创建结点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tBinaryNode node1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tBinaryNode node2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tBinaryNode node3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tBinaryNode node4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tBinaryNode node5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tBinaryNode node6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tBinaryNode node7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tBinaryNode node8 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 建立结点关系</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tnode1<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tnode1<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tnode2<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tnode3<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tnode3<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tnode6<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tnode7<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 递归遍历</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">Recursion</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">CresteBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"08-二叉树非递归遍历\"><a class=\"anchor\" href=\"#08-二叉树非递归遍历\">#</a> 08 二叉树非递归遍历</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"LinkStack.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 二叉树结点 二叉链表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_PTNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_PTNode</span><span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_PTNode</span><span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>PTNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 递归遍历</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RecursionBiTree</span><span class=\"token punctuation\">(</span>PTNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//printf (\"% c\", root->ch); // 先序遍历</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">RecursionBiTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> root<span class=\"token operator\">-></span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">RecursionBiTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//printf (\"% c\", root->ch); // 后序遍历</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 非递归的方式遍历二叉树</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NonRecursion01</span><span class=\"token punctuation\">(</span>PTNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tLinkStack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span>  <span class=\"token function\">InitLinkStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tPTNode<span class=\"token operator\">*</span> pChild <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">PushLinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IsEmptyLinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> pChild <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pChild <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span>pChild<span class=\"token operator\">-></span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pChild <span class=\"token operator\">!=</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token function\">PushLinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> pChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tpChild <span class=\"token operator\">=</span> pChild<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IsEmptyLinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tpChild <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">TopLinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token function\">PopLinkStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\tpChild <span class=\"token operator\">=</span> pChild<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 创建结点</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tPTNode node1<span class=\"token punctuation\">,</span> node2<span class=\"token punctuation\">,</span> node3<span class=\"token punctuation\">,</span> node4<span class=\"token punctuation\">,</span> node5<span class=\"token punctuation\">,</span> node6<span class=\"token punctuation\">,</span> node7<span class=\"token punctuation\">,</span> node8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tnode1<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span> node1<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node1<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tnode2<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span> node2<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node2<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tnode3<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">;</span>\tnode3<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node3<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tnode4<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">;</span>\tnode4<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node4<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tnode5<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">;</span>\tnode5<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node5<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tnode6<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">;</span>\tnode6<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node6<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tnode7<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">;</span>\tnode7<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node7<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tnode8<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">;</span>\tnode8<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node8<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 建立结点关系</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tnode1<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tnode1<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tnode2<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tnode2<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tnode3<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tnode3<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tnode6<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tnode6<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tnode7<span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tnode7<span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token comment\">// 非递归前序遍历</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n非递归前序遍历:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">NonRecursion01</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"二叉树编程实践\"><a class=\"anchor\" href=\"#二叉树编程实践\">#</a> 二叉树编程实践</h3>\n<h4 id=\"案例1计算二叉树中叶子结点的数目\"><a class=\"anchor\" href=\"#案例1计算二叉树中叶子结点的数目\">#</a> <strong>案例 1：计算二叉树中叶子结点的数目</strong></h4>\n<p><strong>思想：</strong></p>\n<p>l 求根结点左子树的叶子结点个数，累计到 sum 中，求根结点右子树的叶子结点个数累计到 sum 中。</p>\n<p>l 若左子树还是树，重复步骤 1；若右子树还是树，重复步骤 1。</p>\n<p>l <strong>全局变量转成函数参数</strong></p>\n<p>l 可以按照先序、中序、后序方式计算叶子结点</p>\n<p><strong>三种遍历的本质思想强化：访问结点的路径都是一样的，计算结点的时机不同。</strong></p>\n<h4 id=\"案例2求二叉树的深度\"><a class=\"anchor\" href=\"#案例2求二叉树的深度\">#</a> <strong>案例 2：求二叉树的深度</strong></h4>\n<p><strong>思想：</strong></p>\n<p>l 求根结点左子树高度，根结点右子树高度，比较的子树最大高度，再 + 1。</p>\n<p>l 若左子树还是树，重复步骤 1；若右子树还是树，重复步骤 1。</p>\n<h4 id=\"案例3copy二叉树\"><a class=\"anchor\" href=\"#案例3copy二叉树\">#</a> <strong>案例 3：Copy 二叉树</strong></h4>\n<p><strong>思想：</strong></p>\n<p>l malloc 新结点，</p>\n<p>l 拷贝左子树，拷贝右子树，让新结点连接左子树，右子树。</p>\n<p>若左子树还是树，重复步骤 1、2；若右子树还是树，重复步骤 1、2。</p>\n<h3 id=\"二叉树的创建\"><a class=\"anchor\" href=\"#二叉树的创建\">#</a> 二叉树的创建</h3>\n",
            "tags": [
                "数据结构与算法",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/10/01/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/",
            "url": "https://zengshengli775.gitee.io/2021/10/01/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/",
            "title": "C++核心编程",
            "date_published": "2021-09-30T16:00:00.000Z",
            "content_html": "<h1 id=\"c核心编程\"><a class=\"anchor\" href=\"#c核心编程\">#</a> C++ 核心编程</h1>\n<p>本阶段主要针对 C++<mark> 面向对象</mark>编程技术做详细讲解，探讨 C++ 中的核心和精髓。</p>\n<h2 id=\"1-内存分区模型\"><a class=\"anchor\" href=\"#1-内存分区模型\">#</a> 1 内存分区模型</h2>\n<p>C++ 程序在执行时，将内存大方向划分为<strong> 4 个区域</strong></p>\n<ul>\n<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>\n<li>全局区：存放全局变量和静态变量以及常量</li>\n<li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li>\n<li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li>\n</ul>\n<p><strong>内存四区意义：</strong></p>\n<p>不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程</p>\n<h3 id=\"11-程序运行前\"><a class=\"anchor\" href=\"#11-程序运行前\">#</a> 1.1 程序运行前</h3>\n<p>​\t在程序编译后，生成了 exe 可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>\n<p>​\t<strong>代码区：</strong></p>\n<p>​\t\t存放 CPU 执行的机器指令</p>\n<p>​\t\t代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>\n<p>​\t\t代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>\n<p>​\t<strong>全局区：</strong></p>\n<p>​\t\t全局变量和静态变量存放在此.</p>\n<p>​\t\t全局区还包含了常量区，字符串常量和其他常量也存放在此.</p>\n<p>​\t\t<mark>该区域的数据在程序结束后由操作系统释放</mark>.</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> g_a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> g_b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 全局常量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c_g_a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c_g_b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 打印地址</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部变量a地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部变量b地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量g_a地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>g_a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局变量g_b地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>g_b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 静态变量</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> s_a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> s_b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"静态变量s_a地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>s_a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"静态变量s_b地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>s_b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符串常量地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token string\">\"hello world\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符串常量地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token string\">\"hello world1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局常量c_g_a地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>c_g_a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"全局常量c_g_b地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>c_g_b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c_l_a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c_l_b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部常量c_l_a地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>c_l_a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"局部常量c_l_b地址为： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>c_l_b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011058545.png\" alt=\"1545017602518\" /></p>\n<p>总结：</p>\n<ul>\n<li>C++ 中在程序运行前分为全局区和代码区</li>\n<li>代码区特点是共享和只读</li>\n<li>全局区中存放全局变量、静态变量、常量</li>\n<li>常量区中存放 const 修饰的全局常量  和 字符串常量</li>\n</ul>\n<h3 id=\"12-程序运行后\"><a class=\"anchor\" href=\"#12-程序运行后\">#</a> 1.2 程序运行后</h3>\n<p>​\t<strong>栈区：</strong></p>\n<p>​\t\t由编译器自动分配释放，存放函数的参数值，局部变量等</p>\n<p>​\t\t注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int * func()\n&#123;\n\tint a = 10;\n\treturn &amp;a;\n&#125;\n\nint main() &#123;\n\n\tint *p = func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>​\t<strong>堆区：</strong></p>\n<p>​\t\t由程序员分配释放，若程序员不释放，程序结束时由操作系统回收</p>\n<p>​\t\t在 C++ 中主要利用 new 在堆区开辟内存</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int* func()\n&#123;\n\tint* a = new int(10);\n\treturn a;\n&#125;\n\nint main() &#123;\n\n\tint *p = func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n    \n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<p>堆区数据由程序员管理开辟和释放</p>\n<p>堆区数据利用 new 关键字进行开辟内存</p>\n<h3 id=\"13-new操作符\"><a class=\"anchor\" href=\"#13-new操作符\">#</a> 1.3 new 操作符</h3>\n<p>​\tC++ 中利用<mark> new</mark> 操作符在堆区开辟数据</p>\n<p>​\t堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 <mark>delete</mark></p>\n<p>​\t语法： <code> new 数据类型</code></p>\n<p>​\t利用 new 创建的数据，会返回该数据对应的类型的指针</p>\n<p><strong>示例 1： 基本语法</strong></p>\n<pre><code class=\"language-c++\">int* func()\n&#123;\n\tint* a = new int(10);\n\treturn a;\n&#125;\n\nint main() &#123;\n\n\tint *p = func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\t//利用delete释放堆区数据\n\tdelete p;\n\n\t//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>示例 2：开辟数组</strong></p>\n<pre><code class=\"language-c++\">//堆区开辟数组\nint main() &#123;\n\n\tint* arr = new int[10];\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tarr[i] = i + 100;\n\t&#125;\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\t&#125;\n\t//释放数组 delete 后加 []\n\tdelete[] arr;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<h2 id=\"2-引用\"><a class=\"anchor\" href=\"#2-引用\">#</a> 2 引用</h2>\n<h3 id=\"21-引用的基本使用\"><a class=\"anchor\" href=\"#21-引用的基本使用\">#</a> 2.1 引用的基本使用</h3>\n<p>** 作用： ** 给变量起别名</p>\n<p><strong>语法：</strong>  <code>数据类型 &amp;别名 = 原名</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint &amp;b = a;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tb = 100;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"22-引用注意事项\"><a class=\"anchor\" href=\"#22-引用注意事项\">#</a> 2.2 引用注意事项</h3>\n<ul>\n<li>引用必须初始化</li>\n<li>引用在初始化后，不可以改变</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\t//int &amp;c; //错误，引用必须初始化\n\tint &amp;c = a; //一旦初始化后，就不可以更改\n\tc = b; //这是赋值操作，不是更改引用\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"23-引用做函数参数\"><a class=\"anchor\" href=\"#23-引用做函数参数\">#</a> 2.3 引用做函数参数</h3>\n<p>** 作用：** 函数传参时，可以利用引用的技术让形参修饰实参</p>\n<p>** 优点：** 可以简化指针修改实参</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//1. 值传递\nvoid mySwap01(int a, int b) &#123;\n\tint temp = a;\n\ta = b;\n\tb = temp;\n&#125;\n\n//2. 地址传递\nvoid mySwap02(int* a, int* b) &#123;\n\tint temp = *a;\n\t*a = *b;\n\t*b = temp;\n&#125;\n\n//3. 引用传递\nvoid mySwap03(int&amp; a, int&amp; b) &#123;\n\tint temp = a;\n\ta = b;\n\tb = temp;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\n\tmySwap01(a, b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tmySwap02(&amp;a, &amp;b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tmySwap03(a, b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<blockquote>\n<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>\n</blockquote>\n<h3 id=\"24-引用做函数返回值\"><a class=\"anchor\" href=\"#24-引用做函数返回值\">#</a> 2.4 引用做函数返回值</h3>\n<p>作用：引用是可以作为函数的返回值存在的</p>\n<p>注意：<strong>不要返回局部变量引用</strong></p>\n<p>用法：函数调用作为左值</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//返回局部变量引用\nint&amp; test01() &#123;\n\tint a = 10; //局部变量\n\treturn a;\n&#125;\n\n//返回静态变量引用\nint&amp; test02() &#123;\n\tstatic int a = 20;\n\treturn a;\n&#125;\n\nint main() &#123;\n\n\t//不能返回局部变量的引用\n\tint&amp; ref = test01();\n\tcout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;\n\n\t//如果函数做左值，那么必须返回引用\n\tint&amp; ref2 = test02();\n\tcout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\n\ttest02() = 1000;\n\n\tcout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\t\n</code></pre>\n<h3 id=\"25-引用的本质\"><a class=\"anchor\" href=\"#25-引用的本质\">#</a> 2.5 引用的本质</h3>\n<p>本质：<strong>引用的本质在 c++ 内部实现是一个指针常量.</strong></p>\n<p>讲解示例：</p>\n<pre><code class=\"language-C++\">//发现是引用，转换为 int* const ref = &amp;a;\nvoid func(int&amp; ref)&#123;\n\tref = 100; // ref是引用，转换为*ref = 100\n&#125;\nint main()&#123;\n\tint a = 10;\n    \n    //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改\n\tint&amp; ref = a; \n\tref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;\n    \n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;\n    \n\tfunc(a);\n\treturn 0;\n&#125;\n</code></pre>\n<p>结论：C++ 推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>\n<h3 id=\"26-常量引用\"><a class=\"anchor\" href=\"#26-常量引用\">#</a> 2.6 常量引用</h3>\n<p>** 作用：** 常量引用主要用来修饰形参，防止误操作</p>\n<p>在函数形参列表中，可以加<mark> const 修饰形参</mark>，防止形参改变实参</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//引用使用的场景，通常用来修饰形参\nvoid showValue(const int&amp; v) &#123;\n\t//v += 10;\n\tcout &lt;&lt; v &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\t//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误\n\t//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;\n\tconst int&amp; ref = 10;\n\n\t//ref = 100;  //加入const后不可以修改变量\n\tcout &lt;&lt; ref &lt;&lt; endl;\n\n\t//函数中利用常量引用防止误操作修改实参\n\tint a = 10;\n\tshowValue(a);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"3-函数提高\"><a class=\"anchor\" href=\"#3-函数提高\">#</a> 3 函数提高</h2>\n<h3 id=\"31-函数默认参数\"><a class=\"anchor\" href=\"#31-函数默认参数\">#</a> 3.1 函数默认参数</h3>\n<p>在 C++ 中，函数的形参列表中的形参是可以有默认值的。</p>\n<p>语法： <code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int func(int a, int b = 10, int c = 10) &#123;\n\treturn a + b + c;\n&#125;\n\n//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值\n//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数\nint func2(int a = 10, int b = 10);\nint func2(int a, int b) &#123;\n\treturn a + b;\n&#125;\n\nint main() &#123;\n\n\tcout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(100) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"32-函数占位参数\"><a class=\"anchor\" href=\"#32-函数占位参数\">#</a> 3.2 函数占位参数</h3>\n<p>C++ 中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n<p><strong>语法：</strong>  <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>\n<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数占位参数 ，占位参数也可以有默认参数\nvoid func(int a, int) &#123;\n\tcout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tfunc(10,10); //占位参数必须填补\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"33-函数重载\"><a class=\"anchor\" href=\"#33-函数重载\">#</a> 3.3 函数重载</h3>\n<h4 id=\"331-函数重载概述\"><a class=\"anchor\" href=\"#331-函数重载概述\">#</a> 3.3.1 函数重载概述</h4>\n<p>** 作用：** 函数名可以相同，提高复用性</p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul>\n<li>同一个作用域下</li>\n<li>函数名称相同</li>\n<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>\n</ul>\n<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数重载需要函数都在同一个作用域下\nvoid func()\n&#123;\n\tcout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(int a)\n&#123;\n\tcout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(double a)\n&#123;\n\tcout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(int a ,double b)\n&#123;\n\tcout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(double a ,int b)\n&#123;\n\tcout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;\n&#125;\n\n//函数返回值不可以作为函数重载条件\n//int func(double a, int b)\n//&#123;\n//\tcout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;\n//&#125;\n\n\nint main() &#123;\n\n\tfunc();\n\tfunc(10);\n\tfunc(3.14);\n\tfunc(10,3.14);\n\tfunc(3.14 , 10);\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"332-函数重载注意事项\"><a class=\"anchor\" href=\"#332-函数重载注意事项\">#</a> 3.3.2 函数重载注意事项</h4>\n<ul>\n<li>引用作为重载条件</li>\n<li>函数重载碰到函数默认参数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数重载注意事项\n//1、引用作为重载条件\n\nvoid func(int &amp;a)\n&#123;\n\tcout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;\n&#125;\n\nvoid func(const int &amp;a)\n&#123;\n\tcout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;\n&#125;\n\n\n//2、函数重载碰到函数默认参数\n\nvoid func2(int a, int b = 10)\n&#123;\n\tcout &lt;&lt; &quot;func2(int a, int b = 10) 调用&quot; &lt;&lt; endl;\n&#125;\n\nvoid func2(int a)\n&#123;\n\tcout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\t\n\tint a = 10;\n\tfunc(a); //调用无const\n\tfunc(10);//调用有const\n\n\n\t//func2(10); //碰到默认参数产生歧义，需要避免\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"4-类和对象\"><a class=\"anchor\" href=\"#4-类和对象\">#</a> <strong>4</strong> 类和对象</h2>\n<p>C++ 面向对象的三大特性为：<mark>封装、继承、多态</mark></p>\n<p>C++ 认为<mark>万事万物都皆为对象</mark>，对象上有其属性和行为</p>\n<p><strong>例如：</strong></p>\n<p>​\t人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...</p>\n<p>​\t车也可以作为对象，属性有轮胎、方向盘、车灯..., 行为有载人、放音乐、放空调...</p>\n<p>​\t具有相同性质的<mark>对象</mark>，我们可以抽象称为<mark>类</mark>，人属于人类，车属于车类</p>\n<h3 id=\"c-类定义\"><a class=\"anchor\" href=\"#c-类定义\">#</a> C++ 类定义</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110242107477.png\" alt=\"img\" /></p>\n<pre><code class=\"language-c++\">class Box\n&#123;\n   public:\n      double length;   // 盒子的长度\n      double breadth;  // 盒子的宽度\n      double height;   // 盒子的高度\n&#125;;\n</code></pre>\n<h3 id=\"定义-c-对象\"><a class=\"anchor\" href=\"#定义-c-对象\">#</a> 定义 C++ 对象</h3>\n<pre><code class=\"language-c++\">Box Box1;          // 声明 Box1，类型为 Box\nBox Box2;          // 声明 Box2，类型为 Box\n</code></pre>\n<h3 id=\"访问数据成员\"><a class=\"anchor\" href=\"#访问数据成员\">#</a> 访问数据成员</h3>\n<p>类的对象的公共数据成员可以使用直接成员访问运算符 <strong>.</strong> 来访问。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110242118249.png\" alt=\"img\" /></p>\n<h3 id=\"41-封装\"><a class=\"anchor\" href=\"#41-封装\">#</a> 4.1 封装</h3>\n<h4 id=\"411-封装的意义\"><a class=\"anchor\" href=\"#411-封装的意义\">#</a> 4.1.1  封装的意义</h4>\n<p>封装是 C++ 面向对象三大特性之一</p>\n<p>封装的意义：</p>\n<ul>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n<p><strong>封装意义一：</strong></p>\n<p>​\t在设计类的时候，属性和行为写在一起，表现事物</p>\n<p><strong>语法：</strong>  <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>\n<p>** 示例 1：** 设计一个圆类，求圆的周长</p>\n<p><strong>示例代码：</strong></p>\n<pre><code class=\"language-C++\">//圆周率\nconst double PI = 3.14;\n\n//1、封装的意义\n//将属性和行为作为一个整体，用来表现生活中的事物\n\n//封装一个圆类，求圆的周长\n//class代表设计一个类，后面跟着的是类名\nclass Circle\n&#123;\npublic:  //访问权限  公共的权限\n\n\t//属性\n\tint m_r;//半径\n\n\t//行为\n\t//获取到圆的周长\n\tdouble calculateZC()\n\t&#123;\n\t\t//2 * pi  * r\n\t\t//获取圆的周长\n\t\treturn  2 * PI * m_r;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\t//通过圆类，创建圆的对象\n\t// c1就是一个具体的圆\n\tCircle c1;\n\tc1.m_r = 10; //给圆对象的半径 进行赋值操作\n\n\t//2 * pi * 10 = = 62.8\n\tcout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 示例 2：** 设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>\n<p><strong>示例 2 代码：</strong></p>\n<pre><code class=\"language-C++\">//学生类\nclass Student &#123;\npublic:\n\tvoid setName(string name) &#123;\n\t\tm_name = name;\n\t&#125;\n\tvoid setID(int id) &#123;\n\t\tm_id = id;\n\t&#125;\n\n\tvoid showStudent() &#123;\n\t\tcout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;\n\t&#125;\npublic:\n\tstring m_name;\n\tint m_id;\n&#125;;\n\nint main() &#123;\n\n\tStudent stu;\n\tstu.setName(&quot;德玛西亚&quot;);\n\tstu.setID(250);\n\tstu.showStudent();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<p><strong>封装意义二：</strong></p>\n<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>\n<p>访问权限有三种：</p>\n<ol>\n<li>public        公共权限</li>\n<li>protected     保护权限</li>\n<li>private       私有权限</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//三种权限\n//公共权限  public     类内可以访问  类外可以访问\n//保护权限  protected  类内可以访问  类外不可以访问\n//私有权限  private    类内可以访问  类外不可以访问\n\nclass Person\n&#123;\n\t//姓名  公共权限\npublic:\n\tstring m_Name;\n\n\t//汽车  保护权限\nprotected:\n\tstring m_Car;\n\n\t//银行卡密码  私有权限\nprivate:\n\tint m_Password;\n\npublic:\n\tvoid func()\n\t&#123;\n\t\tm_Name = &quot;张三&quot;;\n\t\tm_Car = &quot;拖拉机&quot;;\n\t\tm_Password = 123456;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tPerson p;\n\tp.m_Name = &quot;李四&quot;;\n\t//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到\n\t//p.m_Password = 123; //私有权限类外访问不到\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"412-struct和class区别\"><a class=\"anchor\" href=\"#412-struct和class区别\">#</a> 4.1.2 struct 和 class 区别</h4>\n<p>在 C++ 中 struct 和 class 唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul>\n<li>struct 默认权限为公共</li>\n<li>class   默认权限为私有</li>\n</ul>\n<pre><code class=\"language-C++\">class C1\n&#123;\n\tint  m_A; //默认是私有权限\n&#125;;\n\nstruct C2\n&#123;\n\tint m_A;  //默认是公共权限\n&#125;;\n\nint main() &#123;\n\n\tC1 c1;\n\tc1.m_A = 10; //错误，访问权限是私有\n\n\tC2 c2;\n\tc2.m_A = 10; //正确，访问权限是公共\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"413-成员属性设置为私有\"><a class=\"anchor\" href=\"#413-成员属性设置为私有\">#</a> 4.1.3 成员属性设置为私有</h4>\n<p>** 优点 1：** 将所有成员属性设置为私有，可以自己控制读写权限</p>\n<p>** 优点 2：** 对于写权限，我们可以检测数据的有效性</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\npublic:\n\n\t//姓名设置可读可写\n\tvoid setName(string name) &#123;\n    m_Name = name;\n\t&#125;\n  \n\tstring getName()&#123;\n\t\treturn m_Name;\n\t&#125;\n\n\t//获取年龄 \n\tint getAge() &#123;\n\t\treturn m_Age;\n\t&#125;\n\t//设置年龄\n\tvoid setAge(int age) &#123;\n\t\tif (age &lt; 0 || age &gt; 150) &#123;\n\t\t\tcout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl;\n\t\t\treturn;\n\t\t&#125;\n\t\tm_Age = age;\n\t&#125;\n\n\t//情人设置为只写\n\tvoid setLover(string lover) &#123;\n\t\tm_Lover = lover;\n\t&#125;\n\nprivate:\n\tstring m_Name; //可读可写  姓名\n\t\n\tint m_Age; //只读  年龄\n\n\tstring m_Lover; //只写  情人\n&#125;;\n\n\nint main() &#123;\n\n\tPerson p;\n\t//姓名设置\n\tp.setName(&quot;张三&quot;);\n\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl;\n\n\t//年龄设置\n\tp.setAge(50);\n\tcout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl;\n\n\t//情人设置\n\tp.setLover(&quot;苍井&quot;);\n\t//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"42-对象的初始化和清理\"><a class=\"anchor\" href=\"#42-对象的初始化和清理\">#</a> 4.2 对象的初始化和清理</h3>\n<ul>\n<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>\n<li>C++ 中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>\n</ul>\n<h4 id=\"421-构造函数和析构函数\"><a class=\"anchor\" href=\"#421-构造函数和析构函数\">#</a> 4.2.1 构造函数和析构函数</h4>\n<p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>\n<p>​\t一个对象或者变量没有初始状态，对其使用后果是未知</p>\n<p>​\t同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>\n<p>c++ 利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>\n<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>\n<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>\n<ul>\n<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>\n<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>\n</ul>\n<p><strong>构造函数语法：</strong> <code>类名()&#123;&#125;</code></p>\n<ol>\n<li>构造函数，没有返回值也不写 void</li>\n<li>函数名称与类名相同</li>\n<li>构造函数可以有参数，因此可以发生重载</li>\n<li>程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次</li>\n</ol>\n<p><strong>析构函数语法：</strong>  <code>~类名()&#123;&#125;</code></p>\n<ol>\n<li>析构函数，没有返回值也不写 void</li>\n<li>函数名称与类名相同，在名称前加上符号～</li>\n<li>析构函数不可以有参数，因此不可以发生重载</li>\n<li>程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次</li>\n</ol>\n<pre><code class=\"language-C++\">class Person&#123;\npublic:\n\t//构造函数\n\tPerson()&#123;\n\t\tcout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl;\n\t&#125;\n\t//析构函数\n\t~Person()&#123;\n\t\tcout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nvoid test01()&#123;\n\tPerson p;\n&#125;\n\nint main() &#123;\n\ttest01();\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"422-构造函数的分类及调用\"><a class=\"anchor\" href=\"#422-构造函数的分类及调用\">#</a> 4.2.2 构造函数的分类及调用</h4>\n<p>两种分类方式：</p>\n<p>​\t按参数分为： 有参构造和无参构造</p>\n<p>​\t按类型分为： 普通构造和拷贝构造</p>\n<p>三种调用方式：</p>\n<p>​\t括号法</p>\n<p>​\t显示法</p>\n<p>​\t隐式转换法</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//1、构造函数分类\n// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数\n// 按照类型分类分为 普通构造和拷贝构造\n\nclass Person &#123;\npublic:\n\t//无参（默认）构造函数\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//有参构造函数\n\tPerson(int a) &#123;\n\t\tage = a;\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//拷贝构造函数\n\tPerson(const Person&amp; p) &#123;\n\t\tage = p.age;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//析构函数\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint age;\n&#125;;\n\n//2、构造函数的调用\n//调用无参构造函数\nvoid test01() &#123;\n\tPerson p; //调用无参构造函数\n&#125;\n//调用有参的构造函数\nvoid test02() &#123;\n\t//2.1  括号法，常用\n\tPerson p1(10);\n\t//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明\n\t//Person p2();\n\t//2.2 显式法\n\tPerson p2 = Person(10); \n\tPerson p3 = Person(p2);\n\t//Person(10)单独写就是匿名对象  当前行结束之后，马上析构\n\t//2.3 隐式转换法\n\tPerson p4 = 10; // Person p4 = Person(10); \n\tPerson p5 = p4; // Person p5 = Person(p4); \n\t//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明\n\t//Person p5(p4);\n&#125;\n\nint main() &#123;\n\ttest01();\n\t//test02();\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"423-拷贝构造函数调用时机\"><a class=\"anchor\" href=\"#423-拷贝构造函数调用时机\">#</a> 4.2.3 拷贝构造函数调用时机</h4>\n<p>C++ 中拷贝构造函数调用时机通常有三种情况</p>\n<ul>\n<li>使用一个已经创建完毕的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值</li>\n<li>以值方式返回局部对象</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\npublic:\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t\tmAge = 0;\n\t&#125;\n\tPerson(int age) &#123;\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\t\tmAge = age;\n\t&#125;\n\tPerson(const Person&amp; p) &#123;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t\tmAge = p.mAge;\n\t&#125;\n\t//析构函数在释放内存之前调用\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint mAge;\n&#125;;\n\n//1. 使用一个已经创建完毕的对象来初始化一个新对象\nvoid test01() &#123;\n\tPerson man(100); //p对象已经创建完毕\n\tPerson newman(man); //调用拷贝构造函数\n\tPerson newman2 = man; //拷贝构造\n\t//Person newman3;\n\t//newman3 = man; //不是调用拷贝构造函数，赋值操作\n&#125;\n\n//2. 值传递的方式给函数参数传值\n//相当于Person p1 = p;\nvoid doWork(Person p1) &#123;&#125;\nvoid test02() &#123;\n\tPerson p; //无参构造函数\n\tdoWork(p);\n&#125;\n\n//3. 以值方式返回局部对象\nPerson doWork2()&#123;\n\tPerson p1;\n\tcout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;\n\treturn p1;\n&#125;\n\nvoid test03()&#123;\n\tPerson p = doWork2();\n\tcout &lt;&lt; (int *)&amp;p &lt;&lt; endl;\n&#125;\n\n\nint main() &#123;\n\t//test01();\n\t//test02();\n\ttest03();\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"424-构造函数调用规则\"><a class=\"anchor\" href=\"#424-构造函数调用规则\">#</a> 4.2.4 构造函数调用规则</h4>\n<p>默认情况下，c++ 编译器至少给一个类添加 3 个函数</p>\n<p>1．默认构造函数 (无参，函数体为空)</p>\n<p>2．默认析构函数 (无参，函数体为空)</p>\n<p>3．默认拷贝构造函数，对属性进行值拷贝</p>\n<p>构造函数调用规则如下：</p>\n<ul>\n<li>\n<p>如果用户定义有参构造函数，c++ 不在提供默认无参构造，但是会提供默认拷贝构造</p>\n</li>\n<li>\n<p>如果用户定义拷贝构造函数，c++ 不会再提供其他构造函数</p>\n</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-C++\">class Person &#123;\npublic:\n\t//无参（默认）构造函数\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//有参构造函数\n\tPerson(int a) &#123;\n\t\tage = a;\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//拷贝构造函数\n\tPerson(const Person&amp; p) &#123;\n\t\tage = p.age;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//析构函数\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint age;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson p1(18);\n\t//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作\n\tPerson p2(p1);\n\n\tcout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;\n&#125;\n\nvoid test02()\n&#123;\n\t//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造\n\tPerson p1; //此时如果用户自己没有提供默认构造，会出错\n\tPerson p2(10); //用户提供的有参\n\tPerson p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供\n\n\t//如果用户提供拷贝构造，编译器不会提供其他构造函数\n\tPerson p4; //此时如果用户自己没有提供默认构造，会出错\n\tPerson p5(10); //此时如果用户自己没有提供有参，会出错\n\tPerson p6(p5); //用户自己提供拷贝构造\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"425-深拷贝与浅拷贝\"><a class=\"anchor\" href=\"#425-深拷贝与浅拷贝\">#</a> 4.2.5 深拷贝与浅拷贝</h4>\n<p>深浅拷贝是面试经典问题，也是常见的一个坑</p>\n<p>浅拷贝：简单的赋值拷贝操作</p>\n<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\npublic:\n\t//无参（默认）构造函数\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t//有参构造函数\n\tPerson(int age ,int height) &#123;\n\t\t\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\n\t\tm_age = age;\n\t\tm_height = new int(height);\n\t\t\n\t&#125;\n\t//拷贝构造函数  \n\tPerson(const Person&amp; p) &#123;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t\t//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题\n\t\tm_age = p.m_age;\n\t\tm_height = new int(*p.m_height);\n\t\t\n\t&#125;\n\n\t//析构函数\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t\tif (m_height != NULL)\n\t\t&#123;\n\t\t\tdelete m_height;\n\t\t&#125;\n\t&#125;\npublic:\n\tint m_age;\n\tint* m_height;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson p1(18, 180);\n\n\tPerson p2(p1);\n\n\tcout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>\n</blockquote>\n<h4 id=\"426-初始化列表\"><a class=\"anchor\" href=\"#426-初始化列表\">#</a> 4.2.6 初始化列表</h4>\n<p><strong>作用：</strong></p>\n<p>C++ 提供了初始化列表语法，用来初始化属性</p>\n<p><strong>语法：</strong> <code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\npublic:\n\n\t////传统方式初始化\n\t//Person(int a, int b, int c) &#123;\n\t//\tm_A = a;\n\t//\tm_B = b;\n\t//\tm_C = c;\n\t//&#125;\n\n\t//初始化列表方式初始化\n\tPerson(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125;\n\tvoid PrintPerson() &#123;\n\t\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;\n\t&#125;\nprivate:\n\tint m_A;\n\tint m_B;\n\tint m_C;\n&#125;;\n\nint main() &#123;\n\n\tPerson p(1, 2, 3);\n\tp.PrintPerson();\n\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"427-类对象作为类成员\"><a class=\"anchor\" href=\"#427-类对象作为类成员\">#</a> 4.2.7 类对象作为类成员</h4>\n<p>C++ 类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>\n<p>例如：</p>\n<pre><code class=\"language-C++\">class A &#123;&#125;\nclass B\n&#123;\n    A a；\n&#125;\n</code></pre>\n<p>B 类中有对象 A 作为成员，A 为对象成员</p>\n<p>那么当创建 B 对象时，A 与 B 的构造和析构的顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Phone\n&#123;\npublic:\n\tPhone(string name)\n\t&#123;\n\t\tm_PhoneName = name;\n\t\tcout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;\n\t&#125;\n\n\t~Phone()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;\n\t&#125;\n\n\tstring m_PhoneName;\n\n&#125;;\n\n\nclass Person\n&#123;\npublic:\n\n\t//初始化列表可以告诉编译器调用哪一个构造函数\n\tPerson(string name, string pName) :m_Name(name), m_Phone(pName)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;\n\t&#125;\n\n\t~Person()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid playGame()\n\t&#123;\n\t\tcout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;\n\t&#125;\n\n\tstring m_Name;\n\tPhone m_Phone;\n\n&#125;;\nvoid test01()\n&#123;\n\t//当类中成员是其他类对象时，我们称该成员为 对象成员\n\t//构造的顺序是 ：先调用对象成员的构造，再调用本类构造\n\t//析构顺序与构造相反\n\tPerson p(&quot;张三&quot; , &quot;苹果X&quot;);\n\tp.playGame();\n\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"428-静态成员\"><a class=\"anchor\" href=\"#428-静态成员\">#</a> 4.2.8 静态成员</h4>\n<p>静态成员就是在成员变量和成员函数前加上关键字 static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul>\n<li>静态成员变量\n<ul>\n<li>所有对象共享同一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数\n<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ul>\n<p>** 示例 1 ：** 静态成员变量</p>\n<pre><code class=\"language-C++\">class Person\n&#123;\n\t\npublic:\n\n\tstatic int m_A; //静态成员变量\n\n\t//静态成员变量特点：\n\t//1 在编译阶段分配内存\n\t//2 类内声明，类外初始化\n\t//3 所有对象共享同一份数据\n\nprivate:\n\tstatic int m_B; //静态成员变量也是有访问权限的\n&#125;;\nint Person::m_A = 10;\nint Person::m_B = 10;\n\nvoid test01()\n&#123;\n\t//静态成员变量两种访问方式\n\n\t//1、通过对象\n\tPerson p1;\n\tp1.m_A = 100;\n\tcout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl;\n\n\tPerson p2;\n\tp2.m_A = 200;\n\tcout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据\n\tcout &lt;&lt; &quot;p2.m_A = &quot; &lt;&lt; p2.m_A &lt;&lt; endl;\n\n\t//2、通过类名\n\tcout &lt;&lt; &quot;m_A = &quot; &lt;&lt; Person::m_A &lt;&lt; endl;\n\n\n\t//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 示例 2：** 静态成员函数</p>\n<pre><code class=\"language-C++\">class Person\n&#123;\n\npublic:\n\n\t//静态成员函数特点：\n\t//1 程序共享一个函数\n\t//2 静态成员函数只能访问静态成员变量\n\t\n\tstatic void func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;\n\t\tm_A = 100;\n\t\t//m_B = 100; //错误，不可以访问非静态成员变量\n\t&#125;\n\n\tstatic int m_A; //静态成员变量\n\tint m_B; // \nprivate:\n\n\t//静态成员函数也是有访问权限的\n\tstatic void func2()\n\t&#123;\n\t\tcout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\nint Person::m_A = 10;\n\n\nvoid test01()\n&#123;\n\t//静态成员变量两种访问方式\n\n\t//1、通过对象\n\tPerson p1;\n\tp1.func();\n\n\t//2、通过类名\n\tPerson::func();\n\n\n\t//Person::func2(); //私有权限访问不到\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"43-c对象模型和this指针\"><a class=\"anchor\" href=\"#43-c对象模型和this指针\">#</a> 4.3 C++ 对象模型和 this 指针</h3>\n<h4 id=\"431-成员变量和成员函数分开存储\"><a class=\"anchor\" href=\"#431-成员变量和成员函数分开存储\">#</a> 4.3.1 成员变量和成员函数分开存储</h4>\n<p>在 C++ 中，类内的成员变量和成员函数分开存储</p>\n<p>只有非静态成员变量才属于类的对象上</p>\n<pre><code class=\"language-C++\">class Person &#123;\npublic:\n\tPerson() &#123;\n\t\tmA = 0;\n\t&#125;\n\t//非静态成员变量占对象空间\n\tint mA;\n\t//静态成员变量不占对象空间\n\tstatic int mB; \n\t//函数也不占对象空间，所有函数共享一个函数实例\n\tvoid func() &#123;\n\t\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl;\n\t&#125;\n\t//静态成员函数也不占对象空间\n\tstatic void sfunc() &#123;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tcout &lt;&lt; sizeof(Person) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"432-this指针概念\"><a class=\"anchor\" href=\"#432-this指针概念\">#</a> 4.3.2 this 指针概念</h4>\n<p>通过 4.3.1 我们知道在 C++ 中成员变量和成员函数是分开存储的</p>\n<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>\n<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>\n<p>c++ 通过提供特殊的对象指针，this 指针，解决上述问题。<strong>this 指针指向被调用的成员函数所属的对象</strong></p>\n<p>this 指针是隐含每一个非静态成员函数内的一种指针</p>\n<p>this 指针不需要定义，直接使用即可</p>\n<p>this 指针的用途：</p>\n<ul>\n<li>当形参和成员变量同名时，可用 this 指针来区分</li>\n<li>在类的非静态成员函数中返回对象本身，可使用 return *this</li>\n</ul>\n<pre><code class=\"language-C++\">class Person\n&#123;\npublic:\n\n\tPerson(int age)\n\t&#123;\n\t\t//1、当形参和成员变量同名时，可用this指针来区分\n\t\tthis-&gt;age = age;\n\t&#125;\n\n\tPerson&amp; PersonAddPerson(Person p)\n\t&#123;\n\t\tthis-&gt;age += p.age;\n\t\t//返回对象本身\n\t\treturn *this;\n\t&#125;\n\n\tint age;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson p1(10);\n\tcout &lt;&lt; &quot;p1.age = &quot; &lt;&lt; p1.age &lt;&lt; endl;\n\n\tPerson p2(10);\n\tp2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);\n\tcout &lt;&lt; &quot;p2.age = &quot; &lt;&lt; p2.age &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"433-空指针访问成员函数\"><a class=\"anchor\" href=\"#433-空指针访问成员函数\">#</a> 4.3.3 空指针访问成员函数</h4>\n<p>C++ 中空指针也是可以调用成员函数的，但是也要注意有没有用到 this 指针</p>\n<p>如果用到 this 指针，需要加以判断保证代码的健壮性</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//空指针访问成员函数\nclass Person &#123;\npublic:\n\n\tvoid ShowClassName() &#123;\n\t\tcout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid ShowPerson() &#123;\n\t\tif (this == NULL) &#123;\n\t\t\treturn;\n\t\t&#125;\n\t\tcout &lt;&lt; mAge &lt;&lt; endl;\n\t&#125;\n\npublic:\n\tint mAge;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson * p = NULL;\n\tp-&gt;ShowClassName(); //空指针，可以调用成员函数\n\tp-&gt;ShowPerson();  //但是如果成员函数中用到了this指针，就不可以了\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"434-const修饰成员函数\"><a class=\"anchor\" href=\"#434-const修饰成员函数\">#</a> 4.3.4 const 修饰成员函数</h4>\n<p><strong>常函数：</strong></p>\n<ul>\n<li>成员函数后加 const 后我们称为这个函数为<strong>常函数</strong></li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字 mutable 后，在常函数中依然可以修改</li>\n</ul>\n<p><strong>常对象：</strong></p>\n<ul>\n<li>声明对象前加 const 称该对象为常对象</li>\n<li>常对象只能调用常函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person &#123;\npublic:\n\tPerson() &#123;\n\t\tm_A = 0;\n\t\tm_B = 0;\n\t&#125;\n\n\t//this指针的本质是一个指针常量，指针的指向不可修改\n\t//如果想让指针指向的值也不可以修改，需要声明常函数\n\tvoid ShowPerson() const &#123;\n\t\t//const Type* const pointer;\n\t\t//this = NULL; //不能修改指针的指向 Person* const this;\n\t\t//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的\n\n\t\t//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量\n\t\tthis-&gt;m_B = 100;\n\t&#125;\n\n\tvoid MyFunc() const &#123;\n\t\t//mA = 10000;\n\t&#125;\n\npublic:\n\tint m_A;\n\tmutable int m_B; //可修改 可变的\n&#125;;\n\n\n//const修饰对象  常对象\nvoid test01() &#123;\n\n\tconst Person person; //常量对象  \n\tcout &lt;&lt; person.m_A &lt;&lt; endl;\n\t//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问\n\tperson.m_B = 100; //但是常对象可以修改mutable修饰成员变量\n\n\t//常对象访问成员函数\n\tperson.MyFunc(); //常对象不能调用const的函数\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"44-友元\"><a class=\"anchor\" href=\"#44-友元\">#</a> 4.4 友元</h3>\n<p>生活中你的家有客厅 (Public)，有你的卧室 (Private)</p>\n<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>\n<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>\n<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>\n<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>\n<p>友元的关键字为  <mark>friend</mark></p>\n<p>友元的三种实现</p>\n<ul>\n<li>全局函数做友元</li>\n<li>类做友元</li>\n<li>成员函数做友元</li>\n</ul>\n<h4 id=\"441-全局函数做友元\"><a class=\"anchor\" href=\"#441-全局函数做友元\">#</a> 4.4.1 全局函数做友元</h4>\n<pre><code class=\"language-C++\">class Building\n&#123;\n\t//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容\n\tfriend void goodGay(Building * building);\n\npublic:\n\n\tBuilding()\n\t&#123;\n\t\tthis-&gt;m_SittingRoom = &quot;客厅&quot;;\n\t\tthis-&gt;m_BedRoom = &quot;卧室&quot;;\n\t&#125;\n\n\npublic:\n\tstring m_SittingRoom; //客厅\n\nprivate:\n\tstring m_BedRoom; //卧室\n&#125;;\n\n\nvoid goodGay(Building * building)\n&#123;\n\tcout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\tcout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\n\nvoid test01()\n&#123;\n\tBuilding b;\n\tgoodGay(&amp;b);\n&#125;\n\nint main()&#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"442-类做友元\"><a class=\"anchor\" href=\"#442-类做友元\">#</a> 4.4.2 类做友元</h4>\n<pre><code class=\"language-C++\">class Building;\nclass goodGay\n&#123;\npublic:\n\n\tgoodGay();\n\tvoid visit();\n\nprivate:\n\tBuilding *building;\n&#125;;\n\n\nclass Building\n&#123;\n\t//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容\n\tfriend class goodGay;\n\npublic:\n\tBuilding();\n\npublic:\n\tstring m_SittingRoom; //客厅\nprivate:\n\tstring m_BedRoom;//卧室\n&#125;;\n\nBuilding::Building()\n&#123;\n\tthis-&gt;m_SittingRoom = &quot;客厅&quot;;\n\tthis-&gt;m_BedRoom = &quot;卧室&quot;;\n&#125;\n\ngoodGay::goodGay()\n&#123;\n\tbuilding = new Building;\n&#125;\n\nvoid goodGay::visit()\n&#123;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\nvoid test01()\n&#123;\n\tgoodGay gg;\n\tgg.visit();\n\n&#125;\n\nint main()&#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"443-成员函数做友元\"><a class=\"anchor\" href=\"#443-成员函数做友元\">#</a> 4.4.3 成员函数做友元</h4>\n<pre><code class=\"language-C++\">\nclass Building;\nclass goodGay\n&#123;\npublic:\n\n\tgoodGay();\n\tvoid visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容\n\tvoid visit2(); \n\nprivate:\n\tBuilding *building;\n&#125;;\n\n\nclass Building\n&#123;\n\t//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容\n\tfriend void goodGay::visit();\n\npublic:\n\tBuilding();\n\npublic:\n\tstring m_SittingRoom; //客厅\nprivate:\n\tstring m_BedRoom;//卧室\n&#125;;\n\nBuilding::Building()\n&#123;\n\tthis-&gt;m_SittingRoom = &quot;客厅&quot;;\n\tthis-&gt;m_BedRoom = &quot;卧室&quot;;\n&#125;\n\ngoodGay::goodGay()\n&#123;\n\tbuilding = new Building;\n&#125;\n\nvoid goodGay::visit()\n&#123;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\nvoid goodGay::visit2()\n&#123;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\t//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\nvoid test01()\n&#123;\n\tgoodGay  gg;\n\tgg.visit();\n\n&#125;\n\nint main()&#123;\n    \n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"45-运算符重载\"><a class=\"anchor\" href=\"#45-运算符重载\">#</a> 4.5 运算符重载</h3>\n<p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>\n<h4 id=\"451-加号运算符重载\"><a class=\"anchor\" href=\"#451-加号运算符重载\">#</a> 4.5.1 加号运算符重载</h4>\n<p>作用：实现两个自定义数据类型相加的运算</p>\n<pre><code class=\"language-C++\">class Person &#123;\npublic:\n\tPerson() &#123;&#125;;\n\tPerson(int a, int b)\n\t&#123;\n\t\tthis-&gt;m_A = a;\n\t\tthis-&gt;m_B = b;\n\t&#125;\n\t//成员函数实现 + 号运算符重载\n\tPerson operator+(const Person&amp; p) &#123;\n\t\tPerson temp;\n\t\ttemp.m_A = this-&gt;m_A + p.m_A;\n\t\ttemp.m_B = this-&gt;m_B + p.m_B;\n\t\treturn temp;\n\t&#125;\n\n\npublic:\n\tint m_A;\n\tint m_B;\n&#125;;\n\n//全局函数实现 + 号运算符重载\n//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;\n//\tPerson temp(0, 0);\n//\ttemp.m_A = p1.m_A + p2.m_A;\n//\ttemp.m_B = p1.m_B + p2.m_B;\n//\treturn temp;\n//&#125;\n\n//运算符重载 可以发生函数重载 \nPerson operator+(const Person&amp; p2, int val)  \n&#123;\n\tPerson temp;\n\ttemp.m_A = p2.m_A + val;\n\ttemp.m_B = p2.m_B + val;\n\treturn temp;\n&#125;\n\nvoid test() &#123;\n\n\tPerson p1(10, 10);\n\tPerson p2(20, 20);\n\n\t//成员函数方式\n\tPerson p3 = p2 + p1;  //相当于 p2.operaor+(p1)\n\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;\n\n\n\tPerson p4 = p3 + 10; //相当于 operator+(p3,10)\n\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;\n\n&#125;\n\nint main() &#123;\n\n\ttest();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>\n</blockquote>\n<blockquote>\n<p>总结 2：不要滥用运算符重载</p>\n</blockquote>\n<h4 id=\"452-左移运算符重载\"><a class=\"anchor\" href=\"#452-左移运算符重载\">#</a> 4.5.2 左移运算符重载</h4>\n<p>作用：可以输出自定义数据类型</p>\n<pre><code class=\"language-C++\">class Person &#123;\n\tfriend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);\n\npublic:\n\n\tPerson(int a, int b)\n\t&#123;\n\t\tthis-&gt;m_A = a;\n\t\tthis-&gt;m_B = b;\n\t&#125;\n\n\t//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果\n\t//void operator&lt;&lt;(Person&amp; p)&#123;\n\t//&#125;\n\nprivate:\n\tint m_A;\n\tint m_B;\n&#125;;\n\n//全局函数实现左移重载\n//ostream对象只能有一个\nostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;\n\tout &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;\n\treturn out;\n&#125;\n\nvoid test() &#123;\n\n\tPerson p1(10, 20);\n\n\tcout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; //链式编程\n&#125;\n\nint main() &#123;\n\n\ttest();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>\n</blockquote>\n<h4 id=\"453-递增运算符重载\"><a class=\"anchor\" href=\"#453-递增运算符重载\">#</a> 4.5.3 递增运算符重载</h4>\n<p>作用： 通过重载递增运算符，实现自己的整型数据</p>\n<pre><code class=\"language-C++\">\nclass MyInteger &#123;\n\n\tfriend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);\n\npublic:\n\tMyInteger() &#123;\n\t\tm_Num = 0;\n\t&#125;\n\t//前置++\n\tMyInteger&amp; operator++() &#123;\n\t\t//先++\n\t\tm_Num++;\n\t\t//再返回\n\t\treturn *this;\n\t&#125;\n\n\t//后置++\n\tMyInteger operator++(int) &#123;\n\t\t//先返回\n\t\tMyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；\n\t\tm_Num++;\n\t\treturn temp;\n\t&#125;\n\nprivate:\n\tint m_Num;\n&#125;;\n\n\nostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;\n\tout &lt;&lt; myint.m_Num;\n\treturn out;\n&#125;\n\n\n//前置++ 先++ 再返回\nvoid test01() &#123;\n\tMyInteger myInt;\n\tcout &lt;&lt; ++myInt &lt;&lt; endl;\n\tcout &lt;&lt; myInt &lt;&lt; endl;\n&#125;\n\n//后置++ 先返回 再++\nvoid test02() &#123;\n\n\tMyInteger myInt;\n\tcout &lt;&lt; myInt++ &lt;&lt; endl;\n\tcout &lt;&lt; myInt &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\t//test02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 前置递增返回引用，后置递增返回值</p>\n</blockquote>\n<h4 id=\"454-赋值运算符重载\"><a class=\"anchor\" href=\"#454-赋值运算符重载\">#</a> 4.5.4 赋值运算符重载</h4>\n<p>c++ 编译器至少给一个类添加 4 个函数</p>\n<ol>\n<li>默认构造函数 (无参，函数体为空)</li>\n<li>默认析构函数 (无参，函数体为空)</li>\n<li>默认拷贝构造函数，对属性进行值拷贝</li>\n<li>赋值运算符 operator=, 对属性进行值拷贝</li>\n</ol>\n<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person\n&#123;\npublic:\n\n\tPerson(int age)\n\t&#123;\n\t\t//将年龄数据开辟到堆区\n\t\tm_Age = new int(age);\n\t&#125;\n\n\t//重载赋值运算符 \n\tPerson&amp; operator=(Person &amp;p)\n\t&#123;\n\t\tif (m_Age != NULL)\n\t\t&#123;\n\t\t\tdelete m_Age;\n\t\t\tm_Age = NULL;\n\t\t&#125;\n\t\t//编译器提供的代码是浅拷贝\n\t\t//m_Age = p.m_Age;\n\n\t\t//提供深拷贝 解决浅拷贝的问题\n\t\tm_Age = new int(*p.m_Age);\n\n\t\t//返回自身\n\t\treturn *this;\n\t&#125;\n\n\n\t~Person()\n\t&#123;\n\t\tif (m_Age != NULL)\n\t\t&#123;\n\t\t\tdelete m_Age;\n\t\t\tm_Age = NULL;\n\t\t&#125;\n\t&#125;\n\n\t//年龄的指针\n\tint *m_Age;\n\n&#125;;\n\n\nvoid test01()\n&#123;\n\tPerson p1(18);\n\n\tPerson p2(20);\n\n\tPerson p3(30);\n\n\tp3 = p2 = p1; //赋值操作\n\n\tcout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\t//int a = 10;\n\t//int b = 20;\n\t//int c = 30;\n\n\t//c = b = a;\n\t//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\t//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n\t//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"455-关系运算符重载\"><a class=\"anchor\" href=\"#455-关系运算符重载\">#</a> 4.5.5 关系运算符重载</h4>\n<p>** 作用：** 重载关系运算符，可以让两个自定义类型对象进行对比操作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Person\n&#123;\npublic:\n\tPerson(string name, int age)\n\t&#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;;\n\n\tbool operator==(Person &amp; p)\n\t&#123;\n\t\tif (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)\n\t\t&#123;\n\t\t\treturn true;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\treturn false;\n\t\t&#125;\n\t&#125;\n\n\tbool operator!=(Person &amp; p)\n\t&#123;\n\t\tif (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)\n\t\t&#123;\n\t\t\treturn false;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\treturn true;\n\t\t&#125;\n\t&#125;\n\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nvoid test01()\n&#123;\n\t//int a = 0;\n\t//int b = 0;\n\n\tPerson a(&quot;孙悟空&quot;, 18);\n\tPerson b(&quot;孙悟空&quot;, 18);\n\n\tif (a == b)\n\t&#123;\n\t\tcout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;\n\t&#125;\n\n\tif (a != b)\n\t&#123;\n\t\tcout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;\n\t&#125;\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"456-函数调用运算符重载\"><a class=\"anchor\" href=\"#456-函数调用运算符重载\">#</a> 4.5.6 函数调用运算符重载</h4>\n<ul>\n<li>函数调用运算符 ()  也可以重载</li>\n<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>\n<li>仿函数没有固定写法，非常灵活</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class MyPrint\n&#123;\npublic:\n\tvoid operator()(string text)\n\t&#123;\n\t\tcout &lt;&lt; text &lt;&lt; endl;\n\t&#125;\n\n&#125;;\nvoid test01()\n&#123;\n\t//重载的（）操作符 也称为仿函数\n\tMyPrint myFunc;\n\tmyFunc(&quot;hello world&quot;);\n&#125;\n\n\nclass MyAdd\n&#123;\npublic:\n\tint operator()(int v1, int v2)\n\t&#123;\n\t\treturn v1 + v2;\n\t&#125;\n&#125;;\n\nvoid test02()\n&#123;\n\tMyAdd add;\n\tint ret = add(10, 10);\n\tcout &lt;&lt; &quot;ret = &quot; &lt;&lt; ret &lt;&lt; endl;\n\n\t//匿名对象调用  \n\tcout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"46-继承\"><a class=\"anchor\" href=\"#46-继承\">#</a> 4.6  继承</h3>\n<p><strong>继承是面向对象三大特性之一</strong></p>\n<p>有些类与类之间存在特殊的关系，例如下图中：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011058548.png\" alt=\"1544861202252\" /></p>\n<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>\n<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>\n<h4 id=\"461-继承的基本语法\"><a class=\"anchor\" href=\"#461-继承的基本语法\">#</a> 4.6.1 继承的基本语法</h4>\n<p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>\n<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>\n<p><strong>普通实现：</strong></p>\n<pre><code class=\"language-C++\">//Java页面\nclass Java \n&#123;\npublic:\n\tvoid header()\n\t&#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer()\n\t&#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n//Python页面\nclass Python\n&#123;\npublic:\n\tvoid header()\n\t&#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer()\n\t&#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n//C++页面\nclass CPP \n&#123;\npublic:\n\tvoid header()\n\t&#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer()\n\t&#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\t//Java页面\n\tcout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;\n\tJava ja;\n\tja.header();\n\tja.footer();\n\tja.left();\n\tja.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t//Python页面\n\tcout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;\n\tPython py;\n\tpy.header();\n\tpy.footer();\n\tpy.left();\n\tpy.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t//C++页面\n\tcout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;\n\tCPP cp;\n\tcp.header();\n\tcp.footer();\n\tcp.left();\n\tcp.content();\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>继承实现：</strong></p>\n<pre><code class=\"language-C++\">//公共页面\nclass BasePage\n&#123;\npublic:\n\tvoid header()\n\t&#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid footer()\n\t&#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\n&#125;;\n\n//Java页面\nclass Java : public BasePage\n&#123;\npublic:\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n//Python页面\nclass Python : public BasePage\n&#123;\npublic:\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n//C++页面\nclass CPP : public BasePage\n&#123;\npublic:\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\t//Java页面\n\tcout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;\n\tJava ja;\n\tja.header();\n\tja.footer();\n\tja.left();\n\tja.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t//Python页面\n\tcout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;\n\tPython py;\n\tpy.header();\n\tpy.footer();\n\tpy.left();\n\tpy.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t//C++页面\n\tcout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;\n\tCPP cp;\n\tcp.header();\n\tcp.footer();\n\tcp.left();\n\tcp.content();\n\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<p>继承的好处：<mark>可以减少重复的代码</mark></p>\n<p>class A : public B;</p>\n<p>A 类称为子类 或 派生类</p>\n<p>B 类称为父类 或 基类</p>\n<p><strong>派生类中的成员，包含两大部分</strong>：</p>\n<p>一类是从基类继承过来的，一类是自己增加的成员。</p>\n<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>\n<h4 id=\"462-继承方式\"><a class=\"anchor\" href=\"#462-继承方式\">#</a> 4.6.2 继承方式</h4>\n<p>继承的语法： <code>class 子类 : 继承方式  父类</code></p>\n<p><strong>继承方式一共有三种：</strong></p>\n<ul>\n<li>公共继承</li>\n<li>保护继承</li>\n<li>私有继承</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011058550.png\" alt=\"img\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base1\n&#123;\npublic: \n\tint m_A;\nprotected:\n\tint m_B;\nprivate:\n\tint m_C;\n&#125;;\n\n//公共继承\nclass Son1 :public Base1\n&#123;\npublic:\n\tvoid func()\n\t&#123;\n\t\tm_A; //可访问 public权限\n\t\tm_B; //可访问 protected权限\n\t\t//m_C; //不可访问\n\t&#125;\n&#125;;\n\nvoid myClass()\n&#123;\n\tSon1 s1;\n\ts1.m_A; //其他类只能访问到公共权限\n&#125;\n\n//保护继承\nclass Base2\n&#123;\npublic:\n\tint m_A;\nprotected:\n\tint m_B;\nprivate:\n\tint m_C;\n&#125;;\nclass Son2:protected Base2\n&#123;\npublic:\n\tvoid func()\n\t&#123;\n\t\tm_A; //可访问 protected权限\n\t\tm_B; //可访问 protected权限\n\t\t//m_C; //不可访问\n\t&#125;\n&#125;;\nvoid myClass2()\n&#123;\n\tSon2 s;\n\t//s.m_A; //不可访问\n&#125;\n\n//私有继承\nclass Base3\n&#123;\npublic:\n\tint m_A;\nprotected:\n\tint m_B;\nprivate:\n\tint m_C;\n&#125;;\nclass Son3:private Base3\n&#123;\npublic:\n\tvoid func()\n\t&#123;\n\t\tm_A; //可访问 private权限\n\t\tm_B; //可访问 private权限\n\t\t//m_C; //不可访问\n\t&#125;\n&#125;;\nclass GrandSon3 :public Son3\n&#123;\npublic:\n\tvoid func()\n\t&#123;\n\t\t//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到\n\t\t//m_A;\n\t\t//m_B;\n\t\t//m_C;\n\t&#125;\n&#125;;\n</code></pre>\n<h4 id=\"463-继承中的对象模型\"><a class=\"anchor\" href=\"#463-继承中的对象模型\">#</a> 4.6.3 继承中的对象模型</h4>\n<p>** 问题：** 从父类继承过来的成员，哪些属于子类对象中？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base\n&#123;\npublic:\n\tint m_A;\nprotected:\n\tint m_B;\nprivate:\n\tint m_C; //私有成员只是被隐藏了，但是还是会继承下去\n&#125;;\n\n//公共继承\nclass Son :public Base\n&#123;\npublic:\n\tint m_D;\n&#125;;\n\nvoid test01()\n&#123;\n\tcout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>利用工具查看：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011058551.png\" alt=\"1545881904150\" /></p>\n<p>打开工具窗口后，定位到当前 CPP 文件的盘符</p>\n<p>然后输入： cl /d1 reportSingleClassLayout 查看的类名   所属文件名</p>\n<p>效果如下图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011058552.png\" alt=\"1545882158050\" /></p>\n<blockquote>\n<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>\n</blockquote>\n<h4 id=\"464-继承中构造和析构顺序\"><a class=\"anchor\" href=\"#464-继承中构造和析构顺序\">#</a> 4.6.4 继承中构造和析构顺序</h4>\n<p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>\n<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base \n&#123;\npublic:\n\tBase()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Base()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Son : public Base\n&#123;\npublic:\n\tSon()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Son()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl;\n\t&#125;\n\n&#125;;\n\n\nvoid test01()\n&#123;\n\t//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反\n\tSon s;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>\n</blockquote>\n<h4 id=\"465-继承同名成员处理方式\"><a class=\"anchor\" href=\"#465-继承同名成员处理方式\">#</a> 4.6.5 继承同名成员处理方式</h4>\n<p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base &#123;\npublic:\n\tBase()\n\t&#123;\n\t\tm_A = 100;\n\t&#125;\n\n\tvoid func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid func(int a)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;\n\t&#125;\n\npublic:\n\tint m_A;\n&#125;;\n\n\nclass Son : public Base &#123;\npublic:\n\tSon()\n\t&#123;\n\t\tm_A = 200;\n\t&#125;\n\n\t//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数\n\t//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域\n\tvoid func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint m_A;\n&#125;;\n\nvoid test01()\n&#123;\n\tSon s;\n\n\tcout &lt;&lt; &quot;Son下的m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Base下的m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;\n\n\ts.func();\n\ts.Base::func();\n\ts.Base::func(10);\n\n&#125;\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\treturn EXIT_SUCCESS;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ol>\n<li>子类对象可以直接访问到子类中同名成员</li>\n<li>子类对象加作用域可以访问到父类同名成员</li>\n<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>\n</ol>\n<h4 id=\"466-继承同名静态成员处理方式\"><a class=\"anchor\" href=\"#466-继承同名静态成员处理方式\">#</a> 4.6.6 继承同名静态成员处理方式</h4>\n<p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>\n<p>静态成员和非静态成员出现同名，处理方式一致</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base &#123;\npublic:\n\tstatic void func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl;\n\t&#125;\n\tstatic void func(int a)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl;\n\t&#125;\n\n\tstatic int m_A;\n&#125;;\n\nint Base::m_A = 100;\n\nclass Son : public Base &#123;\npublic:\n\tstatic void func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl;\n\t&#125;\n\tstatic int m_A;\n&#125;;\n\nint Son::m_A = 200;\n\n//同名成员属性\nvoid test01()\n&#123;\n\t//通过对象访问\n\tcout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;\n\tSon s;\n\tcout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;\n\n\t//通过类名访问\n\tcout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;\n&#125;\n\n//同名成员函数\nvoid test02()\n&#123;\n\t//通过对象访问\n\tcout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;\n\tSon s;\n\ts.func();\n\ts.Base::func();\n\n\tcout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;\n\tSon::func();\n\tSon::Base::func();\n\t//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问\n\tSon::Base::func(100);\n&#125;\nint main() &#123;\n\n\t//test01();\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>\n</blockquote>\n<h4 id=\"467-多继承语法\"><a class=\"anchor\" href=\"#467-多继承语法\">#</a> 4.6.7 多继承语法</h4>\n<p>C++ 允许<strong>一个类继承多个类</strong></p>\n<p>语法： <code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>\n<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>\n<p><strong>C++ 实际开发中不建议用多继承</strong></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base1 &#123;\npublic:\n\tBase1()\n\t&#123;\n\t\tm_A = 100;\n\t&#125;\npublic:\n\tint m_A;\n&#125;;\n\nclass Base2 &#123;\npublic:\n\tBase2()\n\t&#123;\n\t\tm_A = 200;  //开始是m_B 不会出问题，但是改为mA就会出现不明确\n\t&#125;\npublic:\n\tint m_A;\n&#125;;\n\n//语法：class 子类：继承方式 父类1 ，继承方式 父类2 \nclass Son : public Base2, public Base1 \n&#123;\npublic:\n\tSon()\n\t&#123;\n\t\tm_C = 300;\n\t\tm_D = 400;\n\t&#125;\npublic:\n\tint m_C;\n\tint m_D;\n&#125;;\n\n\n//多继承容易产生成员同名的情况\n//通过使用类名作用域可以区分调用哪一个基类的成员\nvoid test01()\n&#123;\n\tSon s;\n\tcout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(s) &lt;&lt; endl;\n\tcout &lt;&lt; s.Base1::m_A &lt;&lt; endl;\n\tcout &lt;&lt; s.Base2::m_A &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>\n</blockquote>\n<h4 id=\"468-菱形继承\"><a class=\"anchor\" href=\"#468-菱形继承\">#</a> 4.6.8 菱形继承</h4>\n<p><strong>菱形继承概念：</strong></p>\n<p>​\t两个派生类继承同一个基类</p>\n<p>​\t又有某个类同时继承者两个派生类</p>\n<p>​\t这种继承被称为菱形继承，或者钻石继承</p>\n<p><strong>典型的菱形继承案例：</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011058553.jpg\" alt=\"IMG_256\" /></p>\n<p><strong>菱形继承问题：</strong></p>\n<ol>\n<li>\n<pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。\n</code></pre>\n</li>\n<li>\n<p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Animal\n&#123;\npublic:\n\tint m_Age;\n&#125;;\n\n//继承前加virtual关键字后，变为虚继承\n//此时公共的父类Animal称为虚基类\nclass Sheep : virtual public Animal &#123;&#125;;\nclass Tuo   : virtual public Animal &#123;&#125;;\nclass SheepTuo : public Sheep, public Tuo &#123;&#125;;\n\nvoid test01()\n&#123;\n\tSheepTuo st;\n\tst.Sheep::m_Age = 100;\n\tst.Tuo::m_Age = 200;\n\n\tcout &lt;&lt; &quot;st.Sheep::m_Age = &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;\n\tcout &lt;&lt; &quot;st.Tuo::m_Age = &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;\n\tcout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>\n<li>利用虚继承可以解决菱形继承问题</li>\n</ul>\n<h3 id=\"47-多态\"><a class=\"anchor\" href=\"#47-多态\">#</a> 4.7  多态</h3>\n<h4 id=\"471-多态的基本概念\"><a class=\"anchor\" href=\"#471-多态的基本概念\">#</a> 4.7.1 多态的基本概念</h4>\n<p><strong>多态是 C++ 面向对象三大特性之一</strong></p>\n<p>多态分为两类</p>\n<ul>\n<li>静态多态：函数重载 和 运算符重载属于静态多态，复用函数名</li>\n<li>动态多态：派生类和虚函数实现运行时多态</li>\n</ul>\n<p>静态多态和动态多态区别：</p>\n<ul>\n<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>\n<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>\n</ul>\n<p>下面通过案例进行讲解多态</p>\n<pre><code class=\"language-C++\">class Animal\n&#123;\npublic:\n\t//Speak函数就是虚函数\n\t//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。\n\tvirtual void speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Cat :public Animal\n&#123;\npublic:\n\tvoid speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Dog :public Animal\n&#123;\npublic:\n\n\tvoid speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;\n\t&#125;\n\n&#125;;\n//我们希望传入什么对象，那么就调用什么对象的函数\n//如果函数地址在编译阶段就能确定，那么静态联编\n//如果函数地址在运行阶段才能确定，就是动态联编\n\nvoid DoSpeak(Animal &amp; animal)\n&#123;\n\tanimal.speak();\n&#125;\n//\n//多态满足条件： \n//1、有继承关系\n//2、子类重写父类中的虚函数\n//多态使用：\n//父类指针或引用指向子类对象\n\nvoid test01()\n&#123;\n\tCat cat;\n\tDoSpeak(cat);\n\n\n\tDog dog;\n\tDoSpeak(dog);\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>多态满足条件</p>\n<ul>\n<li>有继承关系</li>\n<li>子类重写父类中的虚函数</li>\n</ul>\n<p>多态使用条件</p>\n<ul>\n<li>父类指针或引用指向子类对象</li>\n</ul>\n<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>\n<h4 id=\"472-多态案例一-计算器类\"><a class=\"anchor\" href=\"#472-多态案例一-计算器类\">#</a> 4.7.2 多态案例一 - 计算器类</h4>\n<p>案例描述：</p>\n<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>\n<p>多态的优点：</p>\n<ul>\n<li>代码组织结构清晰</li>\n<li>可读性强</li>\n<li>利于前期和后期的扩展以及维护</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//普通实现\nclass Calculator &#123;\npublic:\n\tint getResult(string oper)\n\t&#123;\n\t\tif (oper == &quot;+&quot;) &#123;\n\t\t\treturn m_Num1 + m_Num2;\n\t\t&#125;\n\t\telse if (oper == &quot;-&quot;) &#123;\n\t\t\treturn m_Num1 - m_Num2;\n\t\t&#125;\n\t\telse if (oper == &quot;*&quot;) &#123;\n\t\t\treturn m_Num1 * m_Num2;\n\t\t&#125;\n\t\t//如果要提供新的运算，需要修改源码\n\t&#125;\npublic:\n\tint m_Num1;\n\tint m_Num2;\n&#125;;\n\nvoid test01()\n&#123;\n\t//普通实现测试\n\tCalculator c;\n\tc.m_Num1 = 10;\n\tc.m_Num2 = 10;\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl;\n\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;\n\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;\n&#125;\n\n\n\n//多态实现\n//抽象计算器类\n//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护\nclass AbstractCalculator\n&#123;\npublic :\n\n\tvirtual int getResult()\n\t&#123;\n\t\treturn 0;\n\t&#125;\n\n\tint m_Num1;\n\tint m_Num2;\n&#125;;\n\n//加法计算器\nclass AddCalculator :public AbstractCalculator\n&#123;\npublic:\n\tint getResult()\n\t&#123;\n\t\treturn m_Num1 + m_Num2;\n\t&#125;\n&#125;;\n\n//减法计算器\nclass SubCalculator :public AbstractCalculator\n&#123;\npublic:\n\tint getResult()\n\t&#123;\n\t\treturn m_Num1 - m_Num2;\n\t&#125;\n&#125;;\n\n//乘法计算器\nclass MulCalculator :public AbstractCalculator\n&#123;\npublic:\n\tint getResult()\n\t&#123;\n\t\treturn m_Num1 * m_Num2;\n\t&#125;\n&#125;;\n\n\nvoid test02()\n&#123;\n\t//创建加法计算器\n\tAbstractCalculator *abc = new AddCalculator;\n\tabc-&gt;m_Num1 = 10;\n\tabc-&gt;m_Num2 = 10;\n\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;\n\tdelete abc;  //用完了记得销毁\n\n\t//创建减法计算器\n\tabc = new SubCalculator;\n\tabc-&gt;m_Num1 = 10;\n\tabc-&gt;m_Num2 = 10;\n\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;\n\tdelete abc;  \n\n\t//创建乘法计算器\n\tabc = new MulCalculator;\n\tabc-&gt;m_Num1 = 10;\n\tabc-&gt;m_Num2 = 10;\n\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;\n\tdelete abc;\n&#125;\n\nint main() &#123;\n\n\t//test01();\n\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：C++ 开发提倡利用多态设计程序架构，因为多态优点很多</p>\n</blockquote>\n<h4 id=\"473-纯虚函数和抽象类\"><a class=\"anchor\" href=\"#473-纯虚函数和抽象类\">#</a> 4.7.3 纯虚函数和抽象类</h4>\n<p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>\n<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>\n<p>纯虚函数语法： <code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>\n<p>当类中有了纯虚函数，这个类也称为<mark>抽象类</mark></p>\n<p><strong>抽象类特点</strong>：</p>\n<ul>\n<li>无法实例化对象</li>\n<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Base\n&#123;\npublic:\n\t//纯虚函数\n\t//类中只要有一个纯虚函数就称为抽象类\n\t//抽象类无法实例化对象\n\t//子类必须重写父类中的纯虚函数，否则也属于抽象类\n\tvirtual void func() = 0;\n&#125;;\n\nclass Son :public Base\n&#123;\npublic:\n\tvirtual void func() \n\t&#123;\n\t\tcout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;\n\t&#125;;\n&#125;;\n\nvoid test01()\n&#123;\n\tBase * base = NULL;\n\t//base = new Base; // 错误，抽象类无法实例化对象\n\tbase = new Son;\n\tbase-&gt;func();\n\tdelete base;//记得销毁\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"474-多态案例二-制作饮品\"><a class=\"anchor\" href=\"#474-多态案例二-制作饮品\">#</a> 4.7.4 多态案例二 - 制作饮品</h4>\n<p><strong>案例描述：</strong></p>\n<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>\n<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011058554.png\" alt=\"1545985945198\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//抽象制作饮品\nclass AbstractDrinking &#123;\npublic:\n\t//烧水\n\tvirtual void Boil() = 0;\n\t//冲泡\n\tvirtual void Brew() = 0;\n\t//倒入杯中\n\tvirtual void PourInCup() = 0;\n\t//加入辅料\n\tvirtual void PutSomething() = 0;\n\t//规定流程\n\tvoid MakeDrink() &#123;\n\t\tBoil();\n\t\tBrew();\n\t\tPourInCup();\n\t\tPutSomething();\n\t&#125;\n&#125;;\n\n//制作咖啡\nclass Coffee : public AbstractDrinking &#123;\npublic:\n\t//烧水\n\tvirtual void Boil() &#123;\n\t\tcout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl;\n\t&#125;\n\t//冲泡\n\tvirtual void Brew() &#123;\n\t\tcout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl;\n\t&#125;\n\t//倒入杯中\n\tvirtual void PourInCup() &#123;\n\t\tcout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl;\n\t&#125;\n\t//加入辅料\n\tvirtual void PutSomething() &#123;\n\t\tcout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n//制作茶水\nclass Tea : public AbstractDrinking &#123;\npublic:\n\t//烧水\n\tvirtual void Boil() &#123;\n\t\tcout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl;\n\t&#125;\n\t//冲泡\n\tvirtual void Brew() &#123;\n\t\tcout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl;\n\t&#125;\n\t//倒入杯中\n\tvirtual void PourInCup() &#123;\n\t\tcout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl;\n\t&#125;\n\t//加入辅料\n\tvirtual void PutSomething() &#123;\n\t\tcout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n//业务函数\nvoid DoWork(AbstractDrinking* drink) &#123;\n\tdrink-&gt;MakeDrink();\n\tdelete drink;\n&#125;\n\nvoid test01() &#123;\n\tDoWork(new Coffee);\n\tcout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl;\n\tDoWork(new Tea);\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"475-虚析构和纯虚析构\"><a class=\"anchor\" href=\"#475-虚析构和纯虚析构\">#</a> 4.7.5 虚析构和纯虚析构</h4>\n<p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>\n<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>\n<p>虚析构和纯虚析构共性：</p>\n<ul>\n<li>可以解决父类指针释放子类对象</li>\n<li>都需要有具体的函数实现</li>\n</ul>\n<p>虚析构和纯虚析构区别：</p>\n<ul>\n<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>\n</ul>\n<p>虚析构语法：</p>\n<p><code>virtual ~类名()&#123;&#125;</code></p>\n<p>纯虚析构语法：</p>\n<p><code> virtual ~类名() = 0;</code></p>\n<p><code>类名::~类名()&#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">class Animal &#123;\npublic:\n\n\tAnimal()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;\n\t&#125;\n\tvirtual void Speak() = 0;\n\n\t//析构函数加上virtual关键字，变成虚析构函数\n\t//virtual ~Animal()\n\t//&#123;\n\t//\tcout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;\n\t//&#125;\n\n\n\tvirtual ~Animal() = 0;\n&#125;;\n\nAnimal::~Animal()\n&#123;\n\tcout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;\n&#125;\n\n//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。\n\nclass Cat : public Animal &#123;\npublic:\n\tCat(string name)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl;\n\t\tm_Name = new string(name);\n\t&#125;\n\tvirtual void Speak()\n\t&#123;\n\t\tcout &lt;&lt; *m_Name &lt;&lt;  &quot;小猫在说话!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Cat()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl;\n\t\tif (this-&gt;m_Name != NULL) &#123;\n\t\t\tdelete m_Name;\n\t\t\tm_Name = NULL;\n\t\t&#125;\n\t&#125;\n\npublic:\n\tstring *m_Name;\n&#125;;\n\nvoid test01()\n&#123;\n\tAnimal *animal = new Cat(&quot;Tom&quot;);\n\tanimal-&gt;Speak();\n\n\t//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏\n\t//怎么解决？给基类增加一个虚析构函数\n\t//虚析构函数就是用来解决通过父类指针释放子类对象\n\tdelete animal;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>​\t1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>\n<p>​\t2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>\n<p>​\t3. 拥有纯虚析构函数的类也属于抽象类</p>\n<h4 id=\"476-多态案例三-电脑组装\"><a class=\"anchor\" href=\"#476-多态案例三-电脑组装\">#</a> 4.7.6 多态案例三 - 电脑组装</h4>\n<p><strong>案例描述：</strong></p>\n<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>\n<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如 Intel 厂商和 Lenovo 厂商</p>\n<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>\n<p>测试时组装三台不同的电脑进行工作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include&lt;iostream&gt;\nusing namespace std;\n\n//抽象CPU类\nclass CPU\n&#123;\npublic:\n\t//抽象的计算函数\n\tvirtual void calculate() = 0;\n&#125;;\n\n//抽象显卡类\nclass VideoCard\n&#123;\npublic:\n\t//抽象的显示函数\n\tvirtual void display() = 0;\n&#125;;\n\n//抽象内存条类\nclass Memory\n&#123;\npublic:\n\t//抽象的存储函数\n\tvirtual void storage() = 0;\n&#125;;\n\n//电脑类\nclass Computer\n&#123;\npublic:\n\tComputer(CPU * cpu, VideoCard * vc, Memory * mem)\n\t&#123;\n\t\tm_cpu = cpu;\n\t\tm_vc = vc;\n\t\tm_mem = mem;\n\t&#125;\n\n\t//提供工作的函数\n\tvoid work()\n\t&#123;\n\t\t//让零件工作起来，调用接口\n\t\tm_cpu-&gt;calculate();\n\n\t\tm_vc-&gt;display();\n\n\t\tm_mem-&gt;storage();\n\t&#125;\n\n\t//提供析构函数 释放3个电脑零件\n\t~Computer()\n\t&#123;\n\n\t\t//释放CPU零件\n\t\tif (m_cpu != NULL)\n\t\t&#123;\n\t\t\tdelete m_cpu;\n\t\t\tm_cpu = NULL;\n\t\t&#125;\n\n\t\t//释放显卡零件\n\t\tif (m_vc != NULL)\n\t\t&#123;\n\t\t\tdelete m_vc;\n\t\t\tm_vc = NULL;\n\t\t&#125;\n\n\t\t//释放内存条零件\n\t\tif (m_mem != NULL)\n\t\t&#123;\n\t\t\tdelete m_mem;\n\t\t\tm_mem = NULL;\n\t\t&#125;\n\t&#125;\n\nprivate:\n\n\tCPU * m_cpu; //CPU的零件指针\n\tVideoCard * m_vc; //显卡零件指针\n\tMemory * m_mem; //内存条零件指针\n&#125;;\n\n//具体厂商\n//Intel厂商\nclass IntelCPU :public CPU\n&#123;\npublic:\n\tvirtual void calculate()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass IntelVideoCard :public VideoCard\n&#123;\npublic:\n\tvirtual void display()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass IntelMemory :public Memory\n&#123;\npublic:\n\tvirtual void storage()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n//Lenovo厂商\nclass LenovoCPU :public CPU\n&#123;\npublic:\n\tvirtual void calculate()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass LenovoVideoCard :public VideoCard\n&#123;\npublic:\n\tvirtual void display()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass LenovoMemory :public Memory\n&#123;\npublic:\n\tvirtual void storage()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n\nvoid test01()\n&#123;\n\t//第一台电脑零件\n\tCPU * intelCpu = new IntelCPU;\n\tVideoCard * intelCard = new IntelVideoCard;\n\tMemory * intelMem = new IntelMemory;\n\n\tcout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;\n\t//创建第一台电脑\n\tComputer * computer1 = new Computer(intelCpu, intelCard, intelMem);\n\tcomputer1-&gt;work();\n\tdelete computer1;\n\n\tcout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;\n\t//第二台电脑组装\n\tComputer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;\n\tcomputer2-&gt;work();\n\tdelete computer2;\n\n\tcout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;\n\t//第三台电脑组装\n\tComputer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;\n\tcomputer3-&gt;work();\n\tdelete computer3;\n\n&#125;\n</code></pre>\n<h2 id=\"5-文件操作\"><a class=\"anchor\" href=\"#5-文件操作\">#</a> 5 文件操作</h2>\n<p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>\n<p>通过<strong>文件可以将数据持久化</strong></p>\n<p>C++ 中对文件操作需要包含头文件 <mark>&lt; fstream &gt;</mark></p>\n<p>文件类型分为两种：</p>\n<ol>\n<li><strong>文本文件</strong>     -  文件以文本的<strong> ASCII 码</strong>形式存储在计算机中</li>\n<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>\n</ol>\n<p>操作文件的三大类:</p>\n<ol>\n<li>ofstream：写操作</li>\n<li>ifstream： 读操作</li>\n<li>fstream ： 读写操作</li>\n</ol>\n<h3 id=\"51文本文件\"><a class=\"anchor\" href=\"#51文本文件\">#</a> 5.1 文本文件</h3>\n<h4 id=\"511写文件\"><a class=\"anchor\" href=\"#511写文件\">#</a> 5.1.1 写文件</h4>\n<p>写文件步骤如下：</p>\n<ol>\n<li>\n<p>包含头文件</p>\n<p>#include &lt;fstream&gt;</p>\n</li>\n<li>\n<p>创建流对象</p>\n<p>ofstream ofs;</p>\n</li>\n<li>\n<p>打开文件</p>\n<p>ofs.open (&quot;文件路径&quot;, 打开方式);</p>\n</li>\n<li>\n<p>写数据</p>\n<p>ofs &lt;&lt; &quot;写入的数据&quot;;</p>\n</li>\n<li>\n<p>关闭文件</p>\n<p>ofs.close();</p>\n</li>\n</ol>\n<p>文件打开方式：</p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios::in</td>\n<td>为读文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>为写文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>初始位置：文件尾</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>追加方式写文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在先删除，再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>二进制方式</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>注意：</strong> 文件打开方式可以配合使用，利用</td>\n<td>操作符</td>\n</tr>\n</tbody>\n</table>\n<p>** 例如：** 用二进制方式写文件  <code>ios::binary |  ios:: out</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;fstream&gt;\n\nvoid test01()\n&#123;\n\tofstream ofs;\n\tofs.open(&quot;test.txt&quot;, ios::out);\n\n\tofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;\n\tofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;\n\tofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;\n\n\tofs.close();\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>文件操作必须包含头文件 fstream</li>\n<li>读文件可以利用 ofstream  ，或者 fstream 类</li>\n<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>\n<li>利用 &lt;&lt; 可以向文件中写数据</li>\n<li>操作完毕，要关闭文件</li>\n</ul>\n<h4 id=\"512读文件\"><a class=\"anchor\" href=\"#512读文件\">#</a> 5.1.2 读文件</h4>\n<p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>\n<p>读文件步骤如下：</p>\n<ol>\n<li>\n<p>包含头文件</p>\n<p>#include &lt;fstream&gt;</p>\n</li>\n<li>\n<p>创建流对象</p>\n<p>ifstream ifs;</p>\n</li>\n<li>\n<p>打开文件并判断文件是否打开成功</p>\n<p>ifs.open (&quot;文件路径&quot;, 打开方式);</p>\n</li>\n<li>\n<p>读数据</p>\n<p>四种方式读取</p>\n</li>\n<li>\n<p>关闭文件</p>\n<p>ifs.close();</p>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;fstream&gt;\n#include &lt;string&gt;\nvoid test01()\n&#123;\n\tifstream ifs;\n\tifs.open(&quot;test.txt&quot;, ios::in);\n\n\tif (!ifs.is_open())\n\t&#123;\n\t\tcout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;\n\t\treturn;\n\t&#125;\n\n\t//第一种方式\n\t//char buf[1024] = &#123; 0 &#125;;\n\t//while (ifs &gt;&gt; buf)\n\t//&#123;\n\t//\tcout &lt;&lt; buf &lt;&lt; endl;\n\t//&#125;\n\n\t//第二种\n\t//char buf[1024] = &#123; 0 &#125;;\n\t//while (ifs.getline(buf,sizeof(buf)))\n\t//&#123;\n\t//\tcout &lt;&lt; buf &lt;&lt; endl;\n\t//&#125;\n\n\t//第三种\n\t//string buf;\n\t//while (getline(ifs, buf))\n\t//&#123;\n\t//\tcout &lt;&lt; buf &lt;&lt; endl;\n\t//&#125;\n\n\tchar c;\n\twhile ((c = ifs.get()) != EOF)\n\t&#123;\n\t\tcout &lt;&lt; c;\n\t&#125;\n\n\tifs.close();\n\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>读文件可以利用 ifstream  ，或者 fstream 类</li>\n<li>利用 is_open 函数可以判断文件是否打开成功</li>\n<li>close 关闭文件</li>\n</ul>\n<h3 id=\"52-二进制文件\"><a class=\"anchor\" href=\"#52-二进制文件\">#</a> 5.2 二进制文件</h3>\n<p>以二进制的方式对文件进行读写操作</p>\n<p>打开方式要指定为 <mark>ios::binary</mark></p>\n<h4 id=\"521-写文件\"><a class=\"anchor\" href=\"#521-写文件\">#</a> 5.2.1 写文件</h4>\n<p>二进制方式写文件主要利用流对象调用成员函数 write</p>\n<p>函数原型 ： <code>ostream&amp; write(const char * buffer,int len);</code></p>\n<p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nclass Person\n&#123;\npublic:\n\tchar m_Name[64];\n\tint m_Age;\n&#125;;\n\n//二进制文件  写文件\nvoid test01()\n&#123;\n\t//1、包含头文件\n\n\t//2、创建输出流对象\n\tofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);\n\t\n\t//3、打开文件\n\t//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);\n\n\tPerson p = &#123;&quot;张三&quot;  , 18&#125;;\n\n\t//4、写文件\n\tofs.write((const char *)&amp;p, sizeof(p));\n\n\t//5、关闭文件\n\tofs.close();\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>文件输出流对象 可以通过 write 函数，以二进制方式写数据</li>\n</ul>\n<h4 id=\"522-读文件\"><a class=\"anchor\" href=\"#522-读文件\">#</a> 5.2.2 读文件</h4>\n<p>二进制方式读文件主要利用流对象调用成员函数 read</p>\n<p>函数原型： <code>istream&amp; read(char *buffer,int len);</code></p>\n<p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nclass Person\n&#123;\npublic:\n\tchar m_Name[64];\n\tint m_Age;\n&#125;;\n\nvoid test01()\n&#123;\n\tifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary);\n\tif (!ifs.is_open())\n\t&#123;\n\t\tcout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;\n\t&#125;\n\n\tPerson p;\n\tifs.read((char *)&amp;p, sizeof(p));\n\n\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<ul>\n<li>文件输入流对象 可以通过 read 函数，以二进制方式读数据</li>\n</ul>\n",
            "tags": [
                "编程基础",
                "C++"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/09/28/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://zengshengli775.gitee.io/2021/09/28/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "C语言基础知识",
            "date_published": "2021-09-27T16:00:00.000Z",
            "content_html": "<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单行注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 单行注释 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> 多行注释</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> 多行注释</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> 多行注释</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h4 id=\"基本类型它们是算术类型包括两种类型整数类型和浮点类型\"><a class=\"anchor\" href=\"#基本类型它们是算术类型包括两种类型整数类型和浮点类型\">#</a> 基本类型：它们是算术类型，包括两种类型：整数类型和浮点类型。</h4>\n<h5 id=\"整数类型\"><a class=\"anchor\" href=\"#整数类型\">#</a> 整数类型</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127 或 0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">signed char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">0 到 65,535 或 0 到 4,294,967,295</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">0 到 65,535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">-2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">0 到 4,294,967,295</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"浮点类型\"><a class=\"anchor\" href=\"#浮点类型\">#</a> 浮点类型</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n<th style=\"text-align:left\">精度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">1.2E-38 到 3.4E+38</td>\n<td style=\"text-align:left\">6 位有效位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8 字节</td>\n<td style=\"text-align:left\">2.3E-308 到 1.7E+308</td>\n<td style=\"text-align:left\">15 位有效位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long double</td>\n<td style=\"text-align:left\">16 字节</td>\n<td style=\"text-align:left\">3.4E-4932 到 1.1E+4932</td>\n<td style=\"text-align:left\">19 位有效位</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"枚举类型它们也是算术类型被用来定义在程序中只能赋予其一定的离散整数值的变量\"><a class=\"anchor\" href=\"#枚举类型它们也是算术类型被用来定义在程序中只能赋予其一定的离散整数值的变量\">#</a> 枚举类型：它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</h4>\n<h4 id=\"void-类型类型说明符-void-表明没有可用的值\"><a class=\"anchor\" href=\"#void-类型类型说明符-void-表明没有可用的值\">#</a> void 类型：类型说明符 <em>void</em> 表明没有可用的值。</h4>\n<h5 id=\"void-类型\"><a class=\"anchor\" href=\"#void-类型\">#</a> void 类型</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">类型与描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>函数返回为空</strong> C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>函数参数为空</strong> C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>指针指向 void</strong> 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 <strong>void *malloc( size_t size );</strong> 返回指向 void 的指针，可以转换为任何数据类型。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"派生类型它们包括指针类型-数组类型-结构类型-共用体类型和函数类型\"><a class=\"anchor\" href=\"#派生类型它们包括指针类型-数组类型-结构类型-共用体类型和函数类型\">#</a> 派生类型：它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</h4>\n<h4 id=\"强制类型转换\"><a class=\"anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">double</span> mean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   mean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> sum <span class=\"token operator\">/</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 使用强制类型转换运算符把一个整数变量除以另一个整数变量，得到一个浮点数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of mean : %f\\n\"</span><span class=\"token punctuation\">,</span> mean <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Value of mean <span class=\"token operator\">:</span> <span class=\"token number\">3.400000</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 强制类型转换运算符的优先级大于除法，因此 sum 的值首先被转换为 double 型，然后除以 count，得到一个类型为 double 的值。</span></pre></td></tr></table></figure><h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>变量定义：&lt;类型名称&gt; &lt; 变量名称 &gt;</p>\n<p>变量类型：<strong>char</strong></p>\n<p>​\t\t<strong>int</strong></p>\n<p>​\t\t<strong>float</strong></p>\n<p>​\t\t<strong>double</strong></p>\n<p>​\t\t<strong>void</strong></p>\n<h2 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h2>\n<p>在 C 中，有两种简单的定义常量的方式：</p>\n<ol>\n<li>使用 <strong>#define</strong> 预处理器。</li>\n<li>使用 <strong>const</strong> 关键字。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// #define 预处理器</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// #define identifier value</span></pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LENGTH</span> <span class=\"token expression\"><span class=\"token number\">10</span>   </span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIDTH</span>  <span class=\"token expression\"><span class=\"token number\">5</span></span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NEWLINE</span> <span class=\"token string\">'\\n'</span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">int</span> area<span class=\"token punctuation\">;</span>  </pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr class=\"marked\"><td data-num=\"14\"></td><td><pre>   area <span class=\"token operator\">=</span> LENGTH <span class=\"token operator\">*</span> WIDTH<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"15\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of area : %d\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"16\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> NEWLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"20\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//const 关键字</span></pre></td></tr><tr class=\"marked\"><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// const type variable = value;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"24\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span>  LENGTH <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span>  WIDTH  <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> NEWLINE <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">int</span> area<span class=\"token punctuation\">;</span>  </pre></td></tr><tr class=\"marked\"><td data-num=\"31\"></td><td><pre>   </pre></td></tr><tr class=\"marked\"><td data-num=\"32\"></td><td><pre>   area <span class=\"token operator\">=</span> LENGTH <span class=\"token operator\">*</span> WIDTH<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of area : %d\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"34\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> NEWLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"36\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"存储类\"><a class=\"anchor\" href=\"#存储类\">#</a> 存储类</h2>\n<p><strong>auto 是所有局部变量默认的存储类</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">int</span> mount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">auto</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">auto</span> 只能用在函数内，即 <span class=\"token keyword\">auto</span> 只能修饰局部变量</pre></td></tr></table></figure><p><strong>register 用于定义存储在寄存器中而不是 RAM 中的局部变量</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span>  miles<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>不能对它应用一元的 <span class=\"token string\">'&amp;'</span> 运算符（因为它没有内存位置）</pre></td></tr></table></figure><p><strong>static 当使用 static 修饰局部变量可以在函数调用之间保持局部变量的值；当修饰全局变量时，会使变量的作用域限制在声明它的文件内</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 函数声明 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 全局变量 - static 是默认的 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/* 'thingy' 是 'func1' 的局部变量 - 只初始化一次</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * 每次调用函数 'func1' 'thingy' 值不会被重置。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span>                </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> thingy<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  thingy<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" thingy 为 %d ， count 为 %d\\n\"</span><span class=\"token punctuation\">,</span> thingy<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>count 作为全局变量可以在函数内使用，thingy 使用 <span class=\"token keyword\">static</span> 修饰后，不会在每次调用时重置。</pre></td></tr></table></figure><p><strong>extern 用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的；是用来在另一个文件中声明一个全局变量或函数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第一个文件：main.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 第二个文件：support.c</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count is %d\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>第二个文件中的 <span class=\"token keyword\">extern</span> 关键字用于声明已经在第一个文件 main<span class=\"token punctuation\">.</span>c 中定义的 count。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>$ gcc main<span class=\"token punctuation\">.</span>c support<span class=\"token punctuation\">.</span>c</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>$ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>out</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>count is <span class=\"token number\">5</span></pre></td></tr></table></figure><h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<p><strong>算术运算符</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ++a 和 a++ 结果的不同：a++ 返回 a 加 1 以前的值，++a 返回 a 加 1 以后的值。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a++=%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"++a=%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a<span class=\"token operator\">++</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">++</span>a<span class=\"token operator\">=</span><span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token number\">12</span></pre></td></tr></table></figure><p><strong>关系运算符</strong></p>\n<p><strong>逻辑运算符</strong></p>\n<p><strong>位运算符</strong></p>\n<p><strong>赋值运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">=</td>\n<td style=\"text-align:left\">简单的赋值运算符，把右边操作数的值赋给左边操作数</td>\n<td style=\"text-align:left\">C = A + B 将把 A + B 的值赋给 C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+=</td>\n<td style=\"text-align:left\">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td>\n<td style=\"text-align:left\">C += A 相当于 C = C + A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-=</td>\n<td style=\"text-align:left\">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td>\n<td style=\"text-align:left\">C -= A 相当于 C = C - A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*=</td>\n<td style=\"text-align:left\">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td>\n<td style=\"text-align:left\">C *= A 相当于 C = C * A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/=</td>\n<td style=\"text-align:left\">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td>\n<td style=\"text-align:left\">C /= A 相当于 C = C / A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%=</td>\n<td style=\"text-align:left\">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td>\n<td style=\"text-align:left\">C %= A 相当于 C = C % A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;&lt;=</td>\n<td style=\"text-align:left\">左移且赋值运算符</td>\n<td style=\"text-align:left\">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;=</td>\n<td style=\"text-align:left\">右移且赋值运算符</td>\n<td style=\"text-align:left\">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;=</td>\n<td style=\"text-align:left\">按位与且赋值运算符</td>\n<td style=\"text-align:left\">C &amp;= 2 等同于 C = C &amp; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^=</td>\n<td style=\"text-align:left\">按位异或且赋值运算符</td>\n<td style=\"text-align:left\">C ^= 2 等同于 C = C ^ 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">|=</td>\n<td style=\"text-align:left\">按位或且赋值运算符</td>\n<td style=\"text-align:left\">C |= 2 等同于 C = C | 2</td>\n</tr>\n</tbody>\n</table>\n<p><strong>杂项运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">sizeof()</td>\n<td style=\"text-align:left\">给出某个类型或变量在内存中所占据的字节数。</td>\n<td style=\"text-align:left\">sizeof (a) 将返回 4，其中 a 是整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:left\">返回变量的地址。</td>\n<td style=\"text-align:left\">&amp;a; 将给出变量的实际地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">指向一个变量。</td>\n<td style=\"text-align:left\">*a; 将指向一个变量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">? :</td>\n<td style=\"text-align:left\">条件表达式</td>\n<td style=\"text-align:left\">如果条件为真？则值为 X : 否则值为 Y</td>\n</tr>\n</tbody>\n</table>\n<p>详情可见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jcHJvZ3JhbW1pbmcvYy1vcGVyYXRvcnMuaHRtbA==\">运算符</span></p>\n<h2 id=\"判断\"><a class=\"anchor\" href=\"#判断\">#</a> 判断</h2>\n<h3 id=\"if-语句\"><a class=\"anchor\" href=\"#if-语句\">#</a> if 语句</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//if 语句的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">/* 如果布尔表达式为真将执行的语句 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"ifelse-语句\"><a class=\"anchor\" href=\"#ifelse-语句\">#</a> if...else 语句</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//if...else 语句的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">/* 如果布尔表达式为真将执行的语句 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">/* 如果布尔表达式为假将执行的语句 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 级联的 if-else if</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  st1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  st2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  st3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  st4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">/* 局部变量定义 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">/* 检查布尔条件 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token comment\">/* 如果条件为真，则输出下面的语句 */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 小于 20\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token comment\">/* 如果条件为假，则输出下面的语句 */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 大于 20\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值是 %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"switch-语句\"><a class=\"anchor\" href=\"#switch-语句\">#</a> switch 语句</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//switch 语句的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> constant<span class=\"token operator\">-</span>expression  <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 可选的 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">case</span> constant<span class=\"token operator\">-</span>expression  <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 可选的 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 您可以有任意数量的 case 语句 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\">/* 可选的 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t<strong>流程图</strong></p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtnigzt8mpj608e0b9dfv02.jpg\" alt=\"流程图.jpg\" /></p>\n<h2 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h2>\n<h3 id=\"循环类型\"><a class=\"anchor\" href=\"#循环类型\">#</a> 循环类型</h3>\n<p>​\t<strong>while 循环</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//while 循环的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//statement (s) 可以是一个单独的语句，也可以是几个语句组成的代码块。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//condition 可以是任意的表达式，当为任意非零值时都为 true。当条件为 true 时执行循环。 当条件为 false 时，退出循环，程序流将继续执行紧接着循环的下一条语句。</span></pre></td></tr></table></figure><p>​\t<strong>for 循环</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//for 循环的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> init<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> increment <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//increment 语句允许您更新循环控制变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> fact <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tfact <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d! = %d \\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>fact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtniqa5fukj30e80f30t6.jpg\" alt=\"流程图.jpg\" /></p>\n<p>​\t<strong>do...while 循环</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//do...while 循环的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 条件表达式出现在循环的尾部，所以循环中的 statement (s) 会在条件被测试之前至少执行一次。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 如果条件为真，控制流会跳转回上面的 do，然后重新执行循环中的 statement (s)。这个过程会不断重复，直到给定条件变为假为止。</span></pre></td></tr></table></figure><h3 id=\"循环控制语句\"><a class=\"anchor\" href=\"#循环控制语句\">#</a> 循环控制语句</h3>\n<p>​\t<strong>break</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 当 break 语句出现在一个循环内时，会跳出循环。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2. 它可用于终止 switch 语句中的一个 case。</pre></td></tr></table></figure><p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtnix22m2ij30fk09uq3l.jpg\" alt=\"c-break-statement-works.jpg\" /></p>\n<p>​\t<strong>continue</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>continue 跳过循环的这一轮剩下的语句，进入下一轮。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>对于 for 循环，continue 语句执行后自增语句仍然会执行。对于 while 和 do...while 循环，continue 语句重新执行条件判断语句。</pre></td></tr></table></figure><p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtnizqdn60j30dw09fjrz.jpg\" alt=\"c-continue-statement-works.jpg\" /></p>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>返回类型 函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数头</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   函数体</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 函数返回两个数中较大的那个数 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/* 局部变量声明 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      result <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      result <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> 函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 不能使用带值的 return</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 可以没有 return</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 调用的时候不能做返回值的赋值</span></pre></td></tr></table></figure><h3 id=\"声明\"><a class=\"anchor\" href=\"#声明\">#</a> 声明</h3>\n<p><strong>原型声明</strong>：将函数头放在调用前。</p>\n<p><strong>函数原型</strong>：函数头，以分号 &quot;;&quot; 结尾，构成函数原型。</p>\n<p>函数头参数可以不写名字。如果确定没有参数，把 void 写进去： <code>void swap(void);</code>  对于不返回值而且只有一个 int 类型的参数的函数，以下函数原型是正确的：</p>\n<ul>\n<li>\n<p><code>void f(int x);</code></p>\n</li>\n<li>\n<p><code>void f();</code></p>\n</li>\n<li>\n<p><code>void f(int);</code></p>\n<h3 id=\"变量-2\"><a class=\"anchor\" href=\"#变量-2\">#</a> 变量</h3>\n</li>\n</ul>\n<p>C 语言中有三个地方可以声明变量：</p>\n<ol>\n<li>\n<p>在函数或块内部的<strong>局部</strong>变量</p>\n</li>\n<li>\n<p>在所有函数外部的<strong>全局</strong>变量</p>\n</li>\n<li>\n<p>在<strong>形式</strong>参数的函数参数定义中</p>\n</li>\n</ol>\n<p><strong>本地变量（局部变量）</strong>：</p>\n<ul>\n<li>\n<p>本地变量的生存期、作用域：大括号内。</p>\n</li>\n<li>\n<p>块外定义的变量，块内仍然有效。</p>\n</li>\n<li>\n<p>内部外部同名，内部会覆盖掉外部。</p>\n</li>\n<li>\n<p>本地变量不会被默认初始化。</p>\n</li>\n<li>\n<p>参数在进入函数的时候就初始化了。</p>\n<h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<p><strong>传值调用</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 函数声明 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/* 局部变量定义 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换前，a 的值： %d\\n\"</span><span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换前，b 的值： %d\\n\"</span><span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">/* 调用函数来交换值 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后，a 的值： %d\\n\"</span><span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后，b 的值： %d\\n\"</span><span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>交换前，a 的值： <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>交换前，b 的值： <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>交换后，a 的值： <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>交换后，b 的值： <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 虽然在函数内改变了 a 和 b 的值，但是实际上 a 和 b 的值没有发生变化。</span></pre></td></tr></table></figure><p>​\t<strong>引用调用</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 函数声明 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/* 局部变量定义 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换前，a 的值： %d\\n\"</span><span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换前，b 的值： %d\\n\"</span><span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">/* 调用函数来交换值</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    * &amp;a 表示指向 a 的指针，即变量 a 的地址</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    * &amp;b 表示指向 b 的指针，即变量 b 的地址</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后，a 的值： %d\\n\"</span><span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后，b 的值： %d\\n\"</span><span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>交换前，a 的值： <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>交换前，b 的值： <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>交换后，a 的值： <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>交换后，b 的值： <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 引用调用在函数内改变了 a 和 b 的值，实际上也改变了函数外 a 和 b 的值。</span></pre></td></tr></table></figure><p><code>void f(void)</code>  表示 f 函数没有参数</p>\n<p><code>void f()</code>  表示 f 函数参数未知，不建议这样写原型，原型里一定要写全参数；</p>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<h3 id=\"数组定义\"><a class=\"anchor\" href=\"#数组定义\">#</a> <strong>数组定义</strong>：</h3>\n<ul>\n<li>&lt;类型&gt; 变量名称 [元素数量];</li>\n</ul>\n<h3 id=\"数组集成初始化\"><a class=\"anchor\" href=\"#数组集成初始化\">#</a> <strong>数组集成初始化</strong>：</h3>\n<ul>\n<li><code>int a[] = &#123;2, 4, 6, ...&#125;;</code> ，大小由元素数量确定。</li>\n<li><code>int a[13] = &#123;2&#125;;</code> ，除了第一个元素为 2，其他元素均为 0</li>\n<li><code>int a[10] = &#123; [0] = 2, [2] = 3, 6, &#125;;</code>  6 是  <code>a[3]</code>\n<ul>\n<li>用  <code>[n]</code>  在初始化数据中给出定位</li>\n<li>没有定位的数据接在前面的位置后面</li>\n<li>其他位置的值补零</li>\n<li>也可以不给出数组大小，让编译器算</li>\n<li>特别适合初始数据稀疏的数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数组大小\"><a class=\"anchor\" href=\"#数组大小\">#</a> <strong>数组大小</strong>：</h3>\n<ul>\n<li><code>sizeof(a)/sizeof(a[0])</code>  数组中元素的个数</li>\n</ul>\n<h3 id=\"数组赋值\"><a class=\"anchor\" href=\"#数组赋值\">#</a> <strong>数组赋值</strong>：</h3>\n<ul>\n<li><code>int a[] = &#123;2,3,4&#125;; int b[] = a;</code>  是不能赋值的</li>\n<li>必须遍历： <code>for (i=0; i&lt;length; i++) &#123;b[i] = a[i];&#125;</code></li>\n<li><code>int a[][3] = &#123; &#123;0&#125;,&#123;1&#125;,&#123;2&#125; &#125;;</code> ， <code>a = [[0,0,0],[1,0,0],[2,0,0]]</code></li>\n</ul>\n<h3 id=\"遍历数组\"><a class=\"anchor\" href=\"#遍历数组\">#</a> <strong>遍历数组</strong>：</h3>\n<ul>\n<li>通常使用 for，i 从 0 到 &lt; 数组的长度</li>\n</ul>\n<p>数组作为函数参数时，往往<strong>必须再用另一个参数来传入数组大小</strong>：</p>\n<ul>\n<li>不能在  <code>[]</code>  中给出数组大小</li>\n<li>不能再利用 sizeof 来计算数组的元素个数</li>\n</ul>\n<h3 id=\"二维数组\"><a class=\"anchor\" href=\"#二维数组\">#</a> <strong>二维数组</strong>：</h3>\n<ul>\n<li><code>Int a[][5]=&#123;&#123;0,1,2,3,4&#125;,&#123;2,3,4,5,6&#125;,&#125;;</code></li>\n<li>列数必须给出，行数可以由编译器数</li>\n<li>每行一个 {}，逗号分隔</li>\n<li>如果省略，表示补零</li>\n</ul>\n<h3 id=\"指向数组的指针\"><a class=\"anchor\" href=\"#指向数组的指针\">#</a> 指向数组的指针</h3>\n<p>数组名是一个指向数组中第一个元素的常量指针。因此，在下面的声明中：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>balance</strong> 是一个指向 &amp;balance [0] 的指针，即数组 balance 的第一个元素的地址。因此，下面的程序片段把 <strong>p</strong> 赋值为 <strong>balance</strong> 的第一个元素的地址：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用数组名作为常量指针是合法的，反之亦然。因此，*(balance + 4) 是一种访问 balance [4] 数据的合法方式。</p>\n<p>一旦您把第一个元素的地址存储在 p 中，您就可以使用 <em>p、</em>(p+1)、*(p+2) 等来访问数组元素。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">/* 带有 5 个元素的整型数组 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50.0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   p <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">/* 输出数组中每个元素的值 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"使用指针的数组值\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(p + %d) : %f\\n\"</span><span class=\"token punctuation\">,</span>  i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"使用 balance 作为地址的数组值\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(balance + %d) : %f\\n\"</span><span class=\"token punctuation\">,</span>  i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>balance <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> var_runoob <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 定义指针变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var_runoob<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var_runoob 变量的地址： %p\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>var_runoob 变量的地址： <span class=\"token number\">0x7ffeeaae08d8</span></pre></td></tr></table></figure><p><img data-src=\"https://wx1.sinaimg.cn/large/007QGucbgy1guu4o8ye8kj60gz0bfq4d02.jpg\" alt=\"c-pointer.png\" /></p>\n<ul>\n<li><code>sizeof</code>  给出某个类型或变量在内存中占的字节数</li>\n<li><code>&amp;</code>  :  <code>&quot;%p&quot;</code> ，取地址（16 进制）\n<ul>\n<li>获得变量的地址，它的操作数必须是变量</li>\n<li>地址的大小是否与 int 相同取决于编译器</li>\n<li>不能对没有地址的取地址</li>\n<li>连续两个变量，地址紧挨，中间相差<strong>变量类型</strong>占得字节，先定义的在更低的位置（堆栈，自顶向下）</li>\n<li>数组： <code>&amp;a==a==&amp;a[0]==&amp;a[1]-类型长度</code></li>\n</ul>\n</li>\n<li>指针：就是保存地址的变量\n<ul>\n<li><code>int *p</code>  表示 <code>*p</code>  是一个 int，p 是一个指针</li>\n<li>作为参数： <code>void f(int *p)</code> ，在被调用时得到了某个变量的地址： <code>int i=0; f(&amp;i);</code> ，在函数里面可以通过这个指针访问外面的这个 i，经过 f 函数的调用后 i 的值变了。</li>\n<li>访问地址上的变量： <code>*</code>  是一个单目运算符，用来访问指针的值所表示的地址上的变量，可以做右值也可以做左值： <code>int k = *p; *p = k+1;</code></li>\n</ul>\n</li>\n<li>可以对指针进行四种算术运算：++、--、+、-</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span>  var <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 实际变量的声明 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 指针变量的声明 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   ip <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 在指针变量中存储 var 的地址 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var 变量的地址: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>var  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">/* 在指针变量中存储的地址 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ip 变量存储的地址: %p\\n\"</span><span class=\"token punctuation\">,</span> ip <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">/* 使用指针访问值 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*ip 变量的值: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ip <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>结果：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>var 变量的地址<span class=\"token operator\">:</span> <span class=\"token number\">0x7ffeeef168d8</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>ip 变量存储的地址<span class=\"token operator\">:</span> <span class=\"token number\">0x7ffeeef168d8</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">*</span>ip 变量的值<span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr></table></figure><h3 id=\"指针数组\"><a class=\"anchor\" href=\"#指针数组\">#</a> 指针数组</h3>\n<p>让数组存储指向 int 或 char 或其他数据类型的指针。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这里，把 <strong>ptr</strong> 声明为一个数组，由 MAX 个整数指针组成。因此，ptr 中的每个元素，都是一个指向 int 值的指针。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 下面的实例用到了三个整数，它们将存储在一个指针数组中。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">int</span>  var<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 赋值为整数的地址 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of var[%d] = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用一个指向字符的指针数组来存储一个字符串列表</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                   <span class=\"token string\">\"Zara Ali\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                   <span class=\"token string\">\"Hina Ali\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                   <span class=\"token string\">\"Nuha Ali\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                   <span class=\"token string\">\"Sara Ali\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of names[%d] = %s\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指向指针的指针\"><a class=\"anchor\" href=\"#指向指针的指针\">#</a> 指向指针的指针</h3>\n<p>指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。</p>\n<p><img data-src=\"http://tva1.sinaimg.cn/large/007QGucbgy1guwqluw8f2j60bi01tweb02.jpg\" alt=\"pointer_to_pointer.jpg\" /></p>\n<p>一个指向指针的指针变量必须如下声明，即在变量名前放置两个星号。例如，下面声明了一个指向 int 类型指针的指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>var<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://wx1.sinaimg.cn/large/007QGucbgy1guwqhcguhhj60i50brq4402.jpg\" alt=\"image.png\" /></p>\n<h3 id=\"传递指针给函数\"><a class=\"anchor\" href=\"#传递指针给函数\">#</a> 传递指针给函数</h3>\n<p>C 语言允许您传递指针给函数，只需要简单地声明函数参数为指针类型即可。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>par<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> sec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">/* 输出实际值 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of seconds: %ld\\n\"</span><span class=\"token punctuation\">,</span> sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>par<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token comment\">/* 获取当前的秒数 */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token operator\">*</span>par <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<h3 id=\"字符类型\"><a class=\"anchor\" href=\"#字符类型\">#</a> <strong>字符类型</strong></h3>\n<ul>\n<li>\n<p>char 是一种<strong>整数</strong>，也是一种特殊的类型：<strong>字符</strong>。</p>\n<ul>\n<li>\n<p>单引号表示字符变量</p>\n</li>\n<li>\n<p><code>printf scanf</code>  中用 % c 输入输出字符</p>\n</li>\n<li>\n<p><code>'1'</code>  的 ASCII 编码是 49，所以当 c==49 时，它代表  <code>'1'</code></p>\n</li>\n<li>\n<p>如何输入  <code>'1'</code>  这个字符给 char c</p>\n</li>\n<li>\n<p><code>scanf(&quot;%c&quot;, &amp;c); -&gt;1</code></p>\n</li>\n<li>\n<p><code>scanf(&quot;%d&quot;, &amp;i); c=i; -&gt;49</code></p>\n</li>\n<li>\n<p>‘1’ 的 ASCII 编码是 49，所以当 c <mark>49 时，它代表 ‘1’，**49</mark>’1’**</p>\n</li>\n<li>\n<p>一个 49 各自表述</p>\n</li>\n<li>\n<p>混合输入</p>\n<ul>\n<li>没有空格，只读到<strong>整数结束</strong>为止</li>\n<li><code>scanf(&quot;%d %c&quot;, &amp;i, &amp;c);</code>  与  <code>scanf(&quot;%d%c&quot;, &amp;i, &amp;c);</code></li>\n</ul>\n</li>\n<li>\n<p>字符计算</p>\n<ul>\n<li><code>'A++' == 'B'</code></li>\n<li>大小写转换： <code>a+'a'-'A'</code>  可以把一个大写字母变成小写字母； <code>a+'A'-'a'</code>  可以把小写字母变成大写字母</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>逃逸字符</p>\n<ul>\n<li>用来表达无法打印出来的控制字符或特殊字符，由一个反斜杠开头</li>\n<li><code>\\b, \\t, \\n, \\r, \\&quot;, \\', \\\\</code> ，table 是在固定位置（制表位）， <code>\\r</code>  是回车，编译器会把  <code>\\n</code>  翻译成回车 + 换行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字符串-2\"><a class=\"anchor\" href=\"#字符串-2\">#</a> <strong>字符串</strong></h3>\n<ul>\n<li>字符数组如  <code>char word[] = &#123;'H', 'e', 'l', 'l'&#125;</code>  不是 C 语言的字符串，因为不能用字符串的方式做计算，这样的才是： <code>char word[] = &#123;'H', 'e', 'l', 'l', '\\0'&#125;</code> ，word 还是字符数组，但是因为最后的 0，它就是 C 语言的字符串，可以使用字符串运算方法运算。</li>\n<li>字符串是以 0（整数 0）结尾的一串字符（一定要有 0），<strong>0 或  <code>'\\0'</code> </strong> 是一样的，但是和  <code>'0'</code>  不同</li>\n<li>0 标志字符串的阶数，但不是字符串的一部分，计算长度不包含这个 0</li>\n<li>字符串以<strong>数组的形式</strong>存在，以<strong>数组或指针的形式访问</strong>，我们可以用指针访问一个数组，也可以用数组的形式去访问指针所代表的那一片连续的地址空间（但字符串在内存当中的表达形式一定是数组）。更多是以指针的形式。</li>\n<li><code>string.h</code>  里有很多处理字符串的函数</li>\n<li>字符串变量：\n<ul>\n<li><code>char *str = &quot;Hello&quot;;</code></li>\n<li><code>char word[] = &quot;Hello&quot;;</code></li>\n<li><code>char line[10] = &quot;Hello&quot;;</code></li>\n</ul>\n</li>\n<li>字符串常量：\n<ul>\n<li>“Hello”，会被编译器变成一个字符数组放到某处，这个数组的长度是 6，结尾还有表示结束的 0</li>\n</ul>\n</li>\n<li><strong>总结：C 语言的字符串是以字符数组的形式存在的</strong>\n<ul>\n<li>不能用运算符对字符串做运算</li>\n<li>通过数组的方式可以遍历字符串</li>\n<li>唯一<strong>特殊</strong>的地方是字符串字面量可以用来初始化字符数组以及<strong>标准库</strong>提供了一系列字符串函数</li>\n</ul>\n</li>\n<li><code>char *s = &quot;Hello, World!&quot;;</code></li>\n<li>指针还是数组？\n<ul>\n<li><strong>作为数组</strong>：这个字符串就在这里\n<ul>\n<li>作为本地变量空间自动被回收</li>\n</ul>\n</li>\n<li><strong>作为指针</strong>：它指向某个地方的字符串，但这个字符串不知道在哪里\n<ul>\n<li>就是作为一个字符串，只读不写</li>\n<li>处理参数</li>\n<li>动态分配空间（空间用 malloc 得到）</li>\n</ul>\n</li>\n<li><strong>如果要构造一个字符串，用数组；如果要处理一个字符串，用指针</strong></li>\n</ul>\n</li>\n<li><strong>字符串可以表达为  <code>char*</code>  的形式， <code>char*</code>  不一定是字符串</strong>\n<ul>\n<li>本意是指向字符的指针，可能指向的是字符的数组（就像  <code>int*</code>  一样）</li>\n<li>只有它所指的字符串数组有结尾的 0，才能说它所指的是字符串</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字符串计算\"><a class=\"anchor\" href=\"#字符串计算\">#</a> 字符串计算</h3>\n<ul>\n<li>字符串赋值：实际是<strong>指向</strong>\n<ul>\n<li><code>char *t = &quot;title&quot;; char *s; s = t;</code>  并没有产生新的字符串，只是让指针 s 指向了 t 所指的字符串，对 s 的操作就是对 t 做的</li>\n<li><strong>%s</strong>:  <code>char string[8]; scanf(&quot;%s&quot;, string); printf(&quot;%s&quot;, string);</code></li>\n<li><strong> <code>scanf %s</code> </strong> 读入一个单词，到<strong>空格、tab 或回车</strong></li>\n<li><code>scanf</code>  是不安全的，因为不知道要读入的内容的长度</li>\n<li>在 % 和 s 之间的数字表示<strong>最多允许读入的</strong>字符的数量，这个数字应该比数组的大小<strong>小一</strong>，下面的内容会交给下一个 % s</li>\n</ul>\n</li>\n<li>常见错误：\n<ul>\n<li>指针没有初始化\n<ul>\n<li><code>char *string; scanf(&quot;%s&quot;, string);</code>  以为  <code>char*</code>  是字符串类型，定义了一个字符串类型的变量就可以使用了。实际上只是定义了一个指针变量，将来可能会指向某个内存空间的指针，在上面并没被初始化，没有初始值，所以它可能还指向某个地方，那里不是 0，如果正好往里面写东西，可能会报错。</li>\n<li>由于没有对 string 初始化为 0，所以<strong>不一定</strong>每次运行都出错。</li>\n</ul>\n</li>\n<li>空字符串\n<ul>\n<li><code>char buffer[100] = &quot;&quot;;</code> ， 此时： <code>buffer[0] == '\\0'</code></li>\n<li><code>char buffer[] = &quot;&quot;;</code>  这个数组的长度只有 1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>strlen：部分内容来自进阶课程，在此处合并。\n<ul>\n<li>字符串长度，不包括结尾的 0</li>\n<li><code>size_t strlen(const char *s);</code>\n<ul>\n<li>作为参数，数组和指针一样，所以这里用指针的形式表达</li>\n<li><code>const</code>  保证 strlen 不会修改字符串</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>strcmp：部分内容来自进阶课程，在此处合并。\n<ul>\n<li><code>int strcmp(const char *s1, const char *s2);</code></li>\n<li>比较两个字符串，<strong>不相等时，给出的是差值</strong></li>\n<li>相等时： <code>if (strcmp(s1, s2)==0)</code> ，数组的比较永远是 false，因为永远不会是相同的地址，所以不能用  <code>s1==s2</code></li>\n<li><code>'abc'-'abc '=-32;// 注意：第二个字符串后面有个空格，空格 ASCII 就是 32</code></li>\n</ul>\n</li>\n<li>mystrcmp</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">mycmp1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> s1<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tidx <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> s2<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">mycmp2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1 <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>s2 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>s1 <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\ts1 <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\ts2 <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>s1 <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>strcpy：部分内容来自进阶课程，在此处合并。\n<ul>\n<li><code>char *strcpy(char *restrict dst, const char *restrict src);</code></li>\n<li>copy，把第二个字符串拷贝到第一个字符串所在的空间</li>\n<li>restrict 表明 src 和 dst 不重叠（C99）</li>\n<li>返回 dst：为了能连起代码来</li>\n<li>经常用来<strong>复制字符串</strong>：\n<ul>\n<li><code>char *dst = (char*)malloc(strlen(src)+1);</code></li>\n<li><code>strcpy(dst, src);</code></li>\n</ul>\n</li>\n<li>mystrcpy</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">mycpy1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// while (src[idx])</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tdst<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tidx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tdst<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or '\\0'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">mycpy2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token operator\">*</span>dst<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>src<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token operator\">*</span>dst <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">mycpy3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dst<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>src<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token operator\">*</span>dst <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>strcat：\n<ul>\n<li>把 s2 拷贝到 s1 的后面，接成一个长的字符串</li>\n<li>返回 s1，s1 必须具有足够的空间</li>\n</ul>\n</li>\n<li><strong>strcpy 和 strcat 不安全，用 strncpy 和 strncat</strong>\n<ul>\n<li><strong>n</strong> 表示最多拷贝的 size；</li>\n<li><code>char * strncpy(char *restrict dst, const char *restrict src, size_t n);</code></li>\n<li><code>char * strncat(char *restrict s1, const char *restrict s2, size_t n)</code></li>\n<li>对于比较有：strncmp 表示<strong>比较前 n 个</strong>  <code>int strncmp(const char *s1, const char *s2, size_t n);</code> ，这个 n 不是为了安全，为了方便比较前 n 个。</li>\n</ul>\n</li>\n<li>strchr 字符串中从左边开始找字符；strrchr 从右边开始。部分内容来自进阶课程，在此处合并。\n<ul>\n<li><code>char *strchr(const char *s, int c);</code></li>\n<li><code>char *strrchr(const char *s, int c);</code></li>\n<li>返回 NULL 表示没有找到，否则<strong>返回一个指针指向你要找的字符</strong>。</li>\n<li>如何寻找第二个？ <code>strchr(p+1, 'l');</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 第一段：获得 l 前面的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时的 s 即为：he</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把原来位置的东西给写回去</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 第二段：获得 l 后面的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 p 所指的东西拷到 t，此时的 p 为 llo</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得第二个 l 之后的，此时的 p 为 lo</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//llo，返回第一个 l 指向的指针，指向那个字符及后面的字符串</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>字符串中查找字符串：\n<ul>\n<li><code>char *strstr(const char *s1, const char *s2);</code></li>\n<li><code>char *strcasestr(const char *s1, const char *s2); // 忽略大小写</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h2>\n<p>C 数组允许定义可存储相同类型数据项的变量，<strong>结构</strong>是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">data</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">data</span> today<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    today<span class=\"token punctuation\">.</span>month <span class=\"token operator\">=</span> <span class=\"token number\">07</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    today<span class=\"token punctuation\">.</span>day <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    today<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">2014</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Today's data is %i-%i-%i.\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        today<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span>today<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span>today<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"定义结构\"><a class=\"anchor\" href=\"#定义结构\">#</a> 定义结构</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tag</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    member<span class=\"token operator\">-</span>list</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    member<span class=\"token operator\">-</span>list </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    member<span class=\"token operator\">-</span>list  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> variable<span class=\"token operator\">-</span>list <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"结构体变量的初始化\"><a class=\"anchor\" href=\"#结构体变量的初始化\">#</a> 结构体变量的初始化</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">char</span>  title<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">char</span>  author<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">char</span>  subject<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">int</span>   book_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"C 语言\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RUNOOB\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"编程语言\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title : %s\\nauthor: %s\\nsubject: %s\\nbook_id: %d\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"访问结构成员\"><a class=\"anchor\" href=\"#访问结构成员\">#</a> 访问结构成员</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">char</span>  title<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">char</span>  author<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">char</span>  subject<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span>   book_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 声明 Book1，类型为 Books */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 声明 Book2，类型为 Books */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">/* Book1 详述 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Programming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nuha Ali\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Programming Tutorial\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   Book1<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495407</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">/* Book2 详述 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom Billing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zara Ali\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom Billing Tutorial\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   Book2<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495700</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">/* 输出 Book1 信息 */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book 1 title : %s\\n\"</span><span class=\"token punctuation\">,</span> Book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book 1 author : %s\\n\"</span><span class=\"token punctuation\">,</span> Book1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book 1 subject : %s\\n\"</span><span class=\"token punctuation\">,</span> Book1<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book 1 book_id : %d\\n\"</span><span class=\"token punctuation\">,</span> Book1<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token comment\">/* 输出 Book2 信息 */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book 2 title : %s\\n\"</span><span class=\"token punctuation\">,</span> Book2<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book 2 author : %s\\n\"</span><span class=\"token punctuation\">,</span> Book2<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book 2 subject : %s\\n\"</span><span class=\"token punctuation\">,</span> Book2<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book 2 book_id : %d\\n\"</span><span class=\"token punctuation\">,</span> Book2<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"结构作为函数参数\"><a class=\"anchor\" href=\"#结构作为函数参数\">#</a> 结构作为函数参数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">char</span>  title<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">char</span>  author<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">char</span>  subject<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span>   book_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 函数声明 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> book <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 声明 Book1，类型为 Books */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 声明 Book2，类型为 Books */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">/* Book1 详述 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Programming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nuha Ali\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Programming Tutorial\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   Book1<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495407</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">/* Book2 详述 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom Billing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zara Ali\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom Billing Tutorial\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   Book2<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495700</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token comment\">/* 输出 Book1 信息 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> Book1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token comment\">/* 输出 Book2 信息 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> Book2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> book <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book title : %s\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book author : %s\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book subject : %s\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book book_id : %d\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指向结构的指针\"><a class=\"anchor\" href=\"#指向结构的指针\">#</a> 指向结构的指针</h3>\n<p>您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> <span class=\"token operator\">*</span>struct_pointer<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>struct_pointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Book1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>struct_pointer<span class=\"token operator\">-></span>title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">char</span>  title<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">char</span>  author<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">char</span>  subject<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span>   book_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 函数声明 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> <span class=\"token operator\">*</span>book <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 声明 Book1，类型为 Books */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> Book2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 声明 Book2，类型为 Books */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">/* Book1 详述 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Programming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nuha Ali\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book1<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C Programming Tutorial\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   Book1<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495407</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">/* Book2 详述 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom Billing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zara Ali\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> Book2<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telecom Billing Tutorial\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   Book2<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">6495700</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token comment\">/* 通过传 Book1 的地址来输出 Book1 信息 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>Book1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token comment\">/* 通过传 Book2 的地址来输出 Book2 信息 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>Book2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printBook</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Books</span> <span class=\"token operator\">*</span>book <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book title : %s\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token operator\">-></span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book author : %s\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token operator\">-></span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book subject : %s\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token operator\">-></span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Book book_id : %d\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token operator\">-></span>book_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"typedef\"><a class=\"anchor\" href=\"#typedef\">#</a> typedef</h2>\n<p>C 语言提供了 <strong>typedef</strong> 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 <strong>BYTE</strong>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> BYTE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这个类型定义之后，标识符 BYTE 可作为类型 <strong>unsigned char</strong> 的缩写，例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BYTE  b1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>按照惯例，定义时会大写字母，以便提醒用户类型名称是一个象征性的缩写，但您也可以使用小写字母，如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> byte<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"typedef-vs-define\"><a class=\"anchor\" href=\"#typedef-vs-define\">#</a> typedef vs #define</h3>\n<p><strong>#define</strong> 是 C 指令，用于为各种数据类型定义别名，与 <strong>typedef</strong> 类似，但是它们有以下几点不同：</p>\n<ul>\n<li><strong>typedef</strong> 仅限于为类型定义符号名称，<strong>#define</strong> 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</li>\n<li><strong>typedef</strong> 是由编译器执行解释的，<strong>#define</strong> 语句是由预编译器进行处理的。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TRUE</span>  <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"TRUE 的值: %d\\n\"</span><span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"FALSE 的值: %d\\n\"</span><span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"共用体\"><a class=\"anchor\" href=\"#共用体\">#</a> 共用体</h2>\n<h3 id=\"定义共用体\"><a class=\"anchor\" href=\"#定义共用体\">#</a> 定义共用体</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">union</span> tag<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   member definition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   member definition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   member definition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>one or more <span class=\"token keyword\">union</span> variables<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>union tag</strong> 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在共用体定义的末尾，最后一个分号之前，您可以指定一个或多个共用体变量，这是可选的。下面定义一个名为 Data 的共用体类型，有三个成员 i、f 和 str：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> Data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">char</span>  str<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> data<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h2>\n<ul>\n<li>所有的 C 语言程序都需要包含 <strong>main()</strong> 函数。 代码从 <strong>main()</strong> 函数开始执行。</li>\n<li><strong>printf()</strong> 用于格式化输出到屏幕。<strong>printf()</strong> 函数在 <strong>&quot;stdio.h&quot;</strong> 头文件中声明。</li>\n<li><strong>stdio.h</strong> 是一个头文件 (标准输入输出头文件) and <strong>#include</strong> 是一个预处理命令，用来引入头文件。 当编译器遇到 <strong>printf()</strong> 函数时，如果没有找到 <strong>stdio.h</strong> 头文件，会发生编译错误。</li>\n<li><strong>return 0;</strong> 语句用于表示退出程序。</li>\n<li>% d 格式化输出整数</li>\n<li>% f 格式化输出浮点型数据</li>\n</ul>\n<h3 id=\"getchar-putchar-函数\"><a class=\"anchor\" href=\"#getchar-putchar-函数\">#</a> getchar () &amp; putchar () 函数</h3>\n<p><strong>int getchar(void)</strong> 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一个时间内只会读取一个单一的字符。</p>\n<p><strong>int putchar(int c)</strong> 函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一个时间内只会输出一个单一的字符。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Enter a value :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\nYou entered: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"gets-puts-函数\"><a class=\"anchor\" href=\"#gets-puts-函数\">#</a> gets () &amp; puts () 函数</h3>\n<p><strong>char *gets(char *s)</strong> 函数从 <strong>stdin</strong> 读取一行到 <strong>s</strong> 所指向的缓冲区，直到一个终止符或 EOF。</p>\n<p><strong>int puts(const char *s)</strong> 函数把字符串 s 和一个尾随的换行符写入到 <strong>stdout</strong>。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Enter a value :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\nYou entered: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"scanf-和-printf-函数\"><a class=\"anchor\" href=\"#scanf-和-printf-函数\">#</a> scanf () 和 printf () 函数</h3>\n<p><strong>int scanf(const char *format, ...)</strong> 函数从标准输入流 <strong>stdin</strong> 读取输入，并根据提供的 <strong>format</strong> 来浏览输入。</p>\n<p><strong>int printf(const char *format, ...)</strong> 函数把输出写入到标准输出流 <strong>stdout</strong> ，并根据提供的格式产生输出。</p>\n<p><strong>format</strong> 可以是一个简单的常量字符串，但是您可以分别指定 % s、% d、% c、% f 等来输出或读取字符串、整数、字符或浮点数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Enter a value :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\nYou entered: %s %d \"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/* printf (\"%03d\",out_time);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>%03d 是用在 printf 或 scanf 函数中的格式符，用来以特定的格式输入和输出字符。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>% 是格式符的开始。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>d 表示有符号整数。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>3 表示最小输出 3 位数字。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>0 表示如果数字不足 3 位，在左边用 0 补成 3 位。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>如 printf (\"%03d\", 1); 会打印出 001</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>printf (\"%.10f\",out);</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>f 表示浮点数</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.10 表示输出 10 位 */</span></pre></td></tr></table></figure><h3 id=\"格式化字符串\"><a class=\"anchor\" href=\"#格式化字符串\">#</a> 格式化字符串</h3>\n<p>C 语言中格式字符串的一般形式为：% [标志] [输出最小宽度] [. 精度] [长度] 类型，其中方括号 [] 中的项为可选项。</p>\n<p><strong>format</strong> -- 这是字符串，包含了要被写入到标准输出 stdout 的文本。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。format 标签属性是 <strong>%[flags] [width] [.precision] [length]specifier</strong>，</p>\n<h4 id=\"一-类型\"><a class=\"anchor\" href=\"#一-类型\">#</a> 一、类型</h4>\n<p>我们用一定的字符用以表示输出数据的类型，其格式符和意义下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">格式字符</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">以十进制形式输出带符号整数 (正数不输出符号)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o</td>\n<td style=\"text-align:left\">以八进制形式输出无符号整数 (不输出前缀 0)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x,X</td>\n<td style=\"text-align:left\">以十六进制形式输出无符号整数 (不输出前缀 Ox)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">u</td>\n<td style=\"text-align:left\">以十进制形式输出无符号整数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">f</td>\n<td style=\"text-align:left\">以小数形式输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">e,E</td>\n<td style=\"text-align:left\">以指数形式输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g,G</td>\n<td style=\"text-align:left\">以 % f 或 % e 中较短的输出宽度输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">c</td>\n<td style=\"text-align:left\">输出单个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">输出字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\">输出指针地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lu</td>\n<td style=\"text-align:left\">32 位无符号整数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">llu</td>\n<td style=\"text-align:left\">64 位无符号整数</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 测试常见的输出类型 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"conio.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The program test print style!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 以十进制形式输出带符号整数 (正数不输出符号) */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* 以八进制形式输出无符号整数 (不输出前缀 O) */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%o\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%o\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/* 以十六进制形式输出无符号整数 (不输出前缀 OX) */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/* 以十进制形式输出无符号整数 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/* 以小数形式输出单、双精度实数 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">232.11111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232.11111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/* 以指数形式输出单、双精度实数 */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%e\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%e\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">232.11111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%e\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%e\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232.11111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/* 以 % f% e 中较短的输出宽度输出单、双精度实数 */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">232.111111111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232.111111111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/* 输出单个字符 */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/* 输出单个字符 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is a test!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"2342o34uo23u\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"二-标志\"><a class=\"anchor\" href=\"#二-标志\">#</a> 二、标志</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">flags（标识）</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">在给定的字段宽度内左对齐，默认是右对齐（参见 width 子说明符）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">强制在结果之前显示加号或减号（+ 或 -），即正数前面会显示 + 号。默认情况下，只有负数前面会显示一个 - 号。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">空格</td>\n<td style=\"text-align:left\">如果没有写入任何符号，则在该值前面插入一个空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#</td>\n<td style=\"text-align:left\">与 o、x 或 X 说明符一起使用时，非零值前面会分别显示 0、0x 或 0X。 与 e、E 和 f 一起使用时，会强制输出包含一个小数点，即使后边没有数字时也会显示小数点。默认情况下，如果后边没有数字时候，不会显示显示小数点。 与 g 或 G 一起使用时，结果与使用 e 或 E 时相同，但是尾部的零不会被移除。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">在指定填充 padding 的数字左边放置零（0），而不是空格（参见 width 子说明符）。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"三-输出最小宽度\"><a class=\"anchor\" href=\"#三-输出最小宽度\">#</a> 三、输出最小宽度</h4>\n<p>用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或 0。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">width（宽度）</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">(number)</td>\n<td style=\"text-align:left\">要输出的字符的最小数目。如果输出的值短于该数，结果会用空格填充。如果输出的值长于该数，结果不会被截断。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">宽度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 测试标志字符为 -、+、#、空格四种 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"conio.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 以十进制形式输出带符号整数 (正数不输出符号) */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*%-10d*\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*%+10d*\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*%2d*\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*%#d*\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/* 以八进制形式输出无符号整数 (不输出前缀 O) */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*%-10o*\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*%+10o*\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*%o*\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*%#o*\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/* 以十六进制形式输出无符号整数 (不输出前缀 OX) */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$%-10x$\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$%010x$\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$% x$\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$%#x$\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* 以十进制形式输出无符号整数 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10u\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+10u\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"% u\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#u\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/* 以小数形式输出单、双精度实数 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+10f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">232.11111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"% f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232.11111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">/* 以指数形式输出单、双精度实数 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10e\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+10e\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">232.11111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"% e\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#e\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232.11111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/* 以 % f% e 中较短的输出宽度输出单、双精度实数 */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10g\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+10g\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">232.111111111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"% g\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">223.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#g\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">232.111111111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">/* 输出单个字符 */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10c\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+10c\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"% c\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#c\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">/* 输出单个字符 */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-20s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is a test!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+20s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"2342o34uo23u\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"% 20s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is a test!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 不足补空格 */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"2342o34uo23u\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"四-精度\"><a class=\"anchor\" href=\"#四-精度\">#</a> 四、精度</h4>\n<p>精度 格式符以 “.” 开头，后跟十进制整数。本项的意义是： 如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分 。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">.precision（精度）</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">.number</td>\n<td style=\"text-align:left\">对于整数说明符（d、i、o、u、x、X）：precision 指定了要写入的数字的最小位数。如果写入的值短于该数，结果会用前导零来填充。如果写入的值长于该数，结果不会被截断。精度为 0 意味着不写入任何字符。 对于 e、E 和 f 说明符：要在小数点后输出的小数位数。 对于 g 和 G 说明符：要输出的最大有效位数。 对于 s: 要输出的最大字符数。默认情况下，所有字符都会被输出，直到遇到末尾的空字符。 对于 c 类型：没有任何影响。 当未指定任何精度时，默认为 1。如果指定时不带有一个显式值，则假定为 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.*</td>\n<td style=\"text-align:left\">精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 测试精度 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"conio.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.3d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">5555</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.3f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0.88888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.3f\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0.9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.4s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is a test!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"五-长度\"><a class=\"anchor\" href=\"#五-长度\">#</a> 五、长度</h4>\n<p>长度格式符为 h , l 两种， h 表示按短整型量输出， l 表示按长整型量输出。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ength（长度）</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td style=\"text-align:left\">参数被解释为短整型或无符号短整型（仅适用于整数说明符：i、d、o、u、x 和 X）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l</td>\n<td style=\"text-align:left\">参数被解释为长整型或无符号长整型，适用于整数说明符（i、d、o、u、x 和 X）及说明符 c（表示一个宽字符）和 s（表示宽字符字符串）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">L</td>\n<td style=\"text-align:left\">参数被解释为长双精度型（仅适用于浮点数说明符：e、E、f、g 和 G）。</td>\n</tr>\n</tbody>\n</table>\n<p>h 和 整数转换说明符 一起使用，表示一个 short int 或者 unsigned short int 类型的数值，</p>\n<p><code>示例： %hu，%hx，%6.4hd</code></p>\n<p>hh 和 整数转换说明符 一起使用，表示一个 short int 或者 unsigned short 类型的数值，</p>\n<p><code>示例： %hhu，%hhx，%6.4hhd</code></p>\n<p>j 和 整数转换说明符 一起使用，表示一个 intmax_t 或者 uintmax_t 类型的数值，</p>\n<p><code>示例： %jd,%8jx</code></p>\n<p>l 和 整数转换说明符 一起使用，表示一个 long int 或者 unsigned long int 类型的数值，</p>\n<p><code>示例： %ld,%8lu</code></p>\n<p>ll 和 整数转换说明符 一起使用，表示一个 long int 或者 unsigned long int 类型的数值 (C99)，</p>\n<p><code>示例： %lld,%8llu</code></p>\n<p>L 和 浮点转换说明符 一起使用，表示一个 long double 的值，</p>\n<p><code>示例：%Lf，%10.4Le</code></p>\n<p>t 和 整数转换说明符 一起使用，表示一个 ptrdiff_t 值 (两个指针之间的差相对应的类型)(C99)，</p>\n<p><code>示例： %td,%12ti</code></p>\n<p>z 和 整数转换说明符 一起使用，表示一个 size_t 值 (sizeof 返回的类型)(C99)，</p>\n<p><code>示例： %zd,%12zx</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">float</span> b<span class=\"token operator\">=</span><span class=\"token number\">138.3576278</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">double</span> c<span class=\"token operator\">=</span><span class=\"token number\">35648256.3645687</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> d<span class=\"token operator\">=</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d,%5d,%o,%x\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%f,%lf,%5.4lf,%e\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c=%lf,%f,%8.4lf\\n\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d=%c,%8c\\n\"</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a<span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>b<span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token number\">138.3576278</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>c<span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token number\">35648256.3645687</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>d<span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token string\">'p'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">float</span> b<span class=\"token operator\">=</span><span class=\"token number\">1243.2341</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">double</span> c<span class=\"token operator\">=</span><span class=\"token number\">24212345.24232</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">char</span> d<span class=\"token operator\">=</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d,%5d,%o,%x\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/* 其中 “% f” 和 “% lf ” 格式的输出相同，说明 “l” 符对 “f” 类型无影响</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>* “%5.4lf” 指定输出宽度为 5，精度为 4，由于实际长度超过 5 故应该按实际位数输出，小数位数超过 4 位 * 部分被截去</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%f,%lf,%5.4lf,%e\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* 输出双精度实数，“%8.4lf” 由于指定精度为 4 位故截去了超过 4 位的部分 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c=%lf,%f,%8.4lf\\n\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/* 输出字符量 d，其中 “%8c” 指定输出宽度为 8 故在输出字符 p 之前补加 7 个空格 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d=%c,%8c\\n\"</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>使用printf函数时还要注意一个问题，那就是输出表列中的求值顺序。不同的编译系统不一定相同，可以从左到右，也可从右到左。Turbo C是按从右到左进行的</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n%d\\n%d\\n%d\\n%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"六-特殊用法\"><a class=\"anchor\" href=\"#六-特殊用法\">#</a> 六、特殊用法</h4>\n<p>对于 m.n 的格式还可以用如下方法表示</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%*.*s\\n\"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>前边的 * 定义的是总的宽度，后边的定义的是输出的个数。分别对应外面的参数 m 和 n 。我想这种方法的好处是可以在语句之外对参数 m 和 n 赋值，从而控制输出格式。</p>\n<p>还一种输出格式 % n 可以将所输出字符串的长度值赋绐一个变量，见下例:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> slen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world%n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>slen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行后变量被赋值为 11。</p>\n<p>又查了一下，看到一篇文章 (查看) 说这种格式输出已经确认为一个安全隐患，并且已禁用。</p>\n<p>再搜搜果然这种用法都被用来搞什么溢出、漏洞之类的，随便找了一个：格式化字符串攻击笔记。特别注意下 %*.*s 这种用法</p>\n<h2 id=\"文件读写\"><a class=\"anchor\" href=\"#文件读写\">#</a> 文件读写</h2>\n<h3 id=\"打开文件\"><a class=\"anchor\" href=\"#打开文件\">#</a> 打开文件</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FILE <span class=\"token operator\">*</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">r</td>\n<td style=\"text-align:left\">打开一个已有的文本文件，允许读取文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:left\">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td style=\"text-align:left\">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r+</td>\n<td style=\"text-align:left\">打开一个文本文件，允许读写文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w+</td>\n<td style=\"text-align:left\">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a+</td>\n<td style=\"text-align:left\">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"关闭文件\"><a class=\"anchor\" href=\"#关闭文件\">#</a> 关闭文件</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span> FILE <span class=\"token operator\">*</span>fp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"写入文件\"><a class=\"anchor\" href=\"#写入文件\">#</a> 写入文件</h3>\n<p>函数 <strong>fputc()</strong> 把参数 c 的字符值写入到 fp 所指向的输出流中。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>fp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数 <strong>fputs()</strong> 把字符串 <strong>s</strong> 写入到 fp 所指向的输出流中。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>fp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"读取文件\"><a class=\"anchor\" href=\"#读取文件\">#</a> 读取文件</h3>\n<p><strong>fgetc()</strong> 函数从 fp 所指向的输入文件中读取一个字符。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span> FILE <span class=\"token operator\">*</span> fp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>fp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"预处理器\"><a class=\"anchor\" href=\"#预处理器\">#</a> 预处理器</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">#define</td>\n<td style=\"text-align:left\">定义宏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#include</td>\n<td style=\"text-align:left\">包含一个源代码文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#undef</td>\n<td style=\"text-align:left\">取消已定义的宏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#ifdef</td>\n<td style=\"text-align:left\">如果宏已经定义，则返回真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#ifndef</td>\n<td style=\"text-align:left\">如果宏没有定义，则返回真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#if</td>\n<td style=\"text-align:left\">如果给定条件为真，则编译下面代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#else</td>\n<td style=\"text-align:left\">#if 的替代方案</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#elif</td>\n<td style=\"text-align:left\">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#endif</td>\n<td style=\"text-align:left\">结束一个 #if……#else 条件编译块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#error</td>\n<td style=\"text-align:left\">当遇到标准错误时，输出错误消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#pragma</td>\n<td style=\"text-align:left\">使用标准化方法，向编译器发布特殊的命令到编译器中</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"预定义宏\"><a class=\"anchor\" href=\"#预定义宏\">#</a> 预定义宏</h3>\n<p>ANSI C 定义了许多宏。在编程中您可以使用这些宏，但是不能直接修改这些预定义的宏。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">宏</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>DATE</strong></td>\n<td style=\"text-align:left\">当前日期，一个以 &quot;MMM DD YYYY&quot; 格式表示的字符常量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>TIME</strong></td>\n<td style=\"text-align:left\">当前时间，一个以 &quot;HH:MM:SS&quot; 格式表示的字符常量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>FILE</strong></td>\n<td style=\"text-align:left\">这会包含当前文件名，一个字符串常量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>LINE</strong></td>\n<td style=\"text-align:left\">这会包含当前行号，一个十进制常量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>STDC</strong></td>\n<td style=\"text-align:left\">当编译器以 ANSI 标准编译时，则定义为 1。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"预处理器运算符\"><a class=\"anchor\" href=\"#预处理器运算符\">#</a> 预处理器运算符</h3>\n<h4 id=\"宏延续运算符\"><a class=\"anchor\" href=\"#宏延续运算符\">#</a> 宏延续运算符（\\）</h4>\n<p>一个宏通常写在一个单行上。但是如果宏太长，一个单行容纳不下，则使用宏延续运算符（\\）。例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name function\">message_for</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>#a </span><span class=\"token string\">\" and \"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">b</span> </span></span><span class=\"token string\">\": We love you!\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><h4 id=\"字符串常量化运算符\"><a class=\"anchor\" href=\"#字符串常量化运算符\">#</a> 字符串常量化运算符（#）</h4>\n<p>在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。在宏中使用的该运算符有一个特定的参数或参数列表。例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name function\">message_for</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>#a </span><span class=\"token string\">\" and \"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">b</span> </span></span><span class=\"token string\">\": We love you!\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token function\">message_for</span><span class=\"token punctuation\">(</span>Carole<span class=\"token punctuation\">,</span> Debra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"标记粘贴运算符\"><a class=\"anchor\" href=\"#标记粘贴运算符\">#</a> 标记粘贴运算符（##）</h4>\n<p>宏定义内的标记粘贴运算符（##）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记。例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">tokenpaster</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span></span><span class=\"token string\">\"token\"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">n</span> </span></span><span class=\"token string\">\" = %d\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> token</span><span class=\"token punctuation\">##</span><span class=\"token expression\">n<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">int</span> token34 <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token function\">tokenpaster</span><span class=\"token punctuation\">(</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"参数化的宏\"><a class=\"anchor\" href=\"#参数化的宏\">#</a> 参数化的宏</h4>\n<p>CPP 一个强大的功能是可以使用参数化的宏来模拟函数。例如，下面的代码是计算一个数的平方：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以使用宏重写上面的代码，如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">square</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><h2 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h2>\n<h3 id=\"引用头文件的语法\"><a class=\"anchor\" href=\"#引用头文件的语法\">#</a> 引用头文件的语法</h3>\n<p>使用预处理指令 <strong>#include</strong> 可以引用用户和系统头文件。它的形式有以下两种：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;file></span></span></pre></td></tr></table></figure><p>这种形式用于引用系统头文件。它在系统目录的标准列表中搜索名为 file 的文件。在编译源代码时。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file\"</span></span></pre></td></tr></table></figure><p>这种形式用于引用用户头文件。它在包含当前文件的目录中搜索名为 file 的文件。在编译源代码时。</p>\n<h3 id=\"只引用一次头文件\"><a class=\"anchor\" href=\"#只引用一次头文件\">#</a> 只引用一次头文件</h3>\n<p>如果一个头文件被引用两次，编译器会处理两次头文件的内容，这将产生错误。为了防止这种情况，标准的做法是把文件的整个内容放在条件编译语句中，如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">HEADER_FILE</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HEADER_FILE</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>the entire header file file</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>这种结构就是通常所说的包装器 <strong>#ifndef</strong>。当再次引用头文件时，条件为假，因为 HEADER_FILE 已定义。此时，预处理器会跳过文件的整个内容，编译器会忽略它。</p>\n<h3 id=\"标准头文件结构\"><a class=\"anchor\" href=\"#标准头文件结构\">#</a> 标准头文件结构</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 运用条件编译和宏，保证这个头文件在一个编译单元中只会被 #include 一次</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__LIST_HEAD__</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__LIST_HEAD__</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"node.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_list</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Node<span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Node<span class=\"token operator\">*</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>List<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span><span class=\"token expression\"><span class=\"token punctuation\">;</span></span></span></pre></td></tr></table></figure><h3 id=\"有条件引用\"><a class=\"anchor\" href=\"#有条件引用\">#</a> 有条件引用</h3>\n<p>有时需要从多个不同的头文件中选择一个引用到程序中。例如，需要指定在不同的操作系统上使用的配置参数。您可以通过一系列条件来实现这点，如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SYSTEM_1</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">\"system_1.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">SYSTEM_2</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">\"system_2.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">SYSTEM_3</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>但是如果头文件比较多的时候，这么做是很不妥当的，预处理器使用宏来定义头文件的名称。这就是所谓的<strong>有条件引用</strong>。它不是用头文件的名称作为 <strong>#include</strong> 的直接参数，您只需要使用宏名称代替即可：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SYSTEM_H</span> <span class=\"token string\">\"system_1.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token expression\">SYSTEM_H</span></span></pre></td></tr></table></figure><p>SYSTEM_H 会扩展，预处理器会查找 system_1.h，就像 <strong>#include</strong> 最初编写的那样。SYSTEM_H 可通过 -D 选项被您的 Makefile 定义。</p>\n<h3 id=\"globalh\"><a class=\"anchor\" href=\"#globalh\">#</a> global.h</h3>\n<p>在有多个 <strong>.h</strong> 文件和多个 <strong>.c</strong> 文件的时候，往往我们会用一个 <strong>global.h</strong> 的头文件来包括所有的 <strong>.h</strong> 文件，然后在除 <strong>global.h</strong> 文件外的头文件中 包含 <strong>global.h</strong> 就可以实现所有头文件的包含，同时不会乱。方便在各个文件里面调用其他文件的函数或者变量。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_GLOBAL_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_GLOBAL_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Config.h></span></span></pre></td></tr></table></figure><h2 id=\"动态内存管理\"><a class=\"anchor\" href=\"#动态内存管理\">#</a> 动态内存管理</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">函数和描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>void *calloc(int num, int size);</strong> 在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>void free(void *address);</strong> 该函数释放 address 所指向的内存块，释放的是动态分配的内存空间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>void *malloc(int num);</strong> 在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>void *realloc(void *address, int newsize);</strong> 该函数重新分配内存，把内存扩展到 <strong>newsize</strong>。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zara Ali\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">/* 动态分配内存 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   description <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">200</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> description <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error - unable to allocate required memory\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> description<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zara ali a DPS student in class 10th\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name = %s\\n\"</span><span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Description: %s\\n\"</span><span class=\"token punctuation\">,</span> description <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 上面的程序也可以使用 calloc () 来编写，只需要把 malloc 替换为 calloc 即可，如下所示：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//calloc(200, sizeof(char));</span></pre></td></tr></table></figure><h3 id=\"重新调整内存的大小和释放内存\"><a class=\"anchor\" href=\"#重新调整内存的大小和释放内存\">#</a> 重新调整内存的大小和释放内存</h3>\n<p>当程序退出时，操作系统会自动释放所有分配给程序的内存，但是，建议您在不需要内存时，都应该调用函数 <strong>free()</strong> 来释放内存。</p>\n<p>或者，您可以通过调用函数 <strong>realloc()</strong> 来增加或减少已分配的内存块的大小。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zara Ali\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">/* 动态分配内存 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   description <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> description <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error - unable to allocate required memory\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> description<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zara ali a DPS student.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">/* 假设您想要存储更大的描述信息 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   description <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span> description<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> description <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error - unable to allocate required memory\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span> description<span class=\"token punctuation\">,</span> <span class=\"token string\">\"She is in class 10th\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name = %s\\n\"</span><span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Description: %s\\n\"</span><span class=\"token punctuation\">,</span> description <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token comment\">/* 使用 free () 函数释放内存 */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "编程基础",
                "C"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/09/22/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E6%96%87PDF%E7%94%B5%E5%AD%90%E4%B9%A6%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/",
            "url": "https://zengshengli775.gitee.io/2021/09/22/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E6%96%87PDF%E7%94%B5%E5%AD%90%E4%B9%A6%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/",
            "title": "中文PDF电子书自动添加书签",
            "date_published": "2021-09-21T16:00:00.000Z",
            "content_html": "<h2 id=\"1-找到对应书籍的ss号\"><a class=\"anchor\" href=\"#1-找到对应书籍的ss号\">#</a> 1. 找到对应书籍的 ss 号</h2>\n<p>首先要登录全国图书馆参考咨询联盟（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy51Y2Rycy5zdXBlcmxpYi5uZXQv\">http://www.ucdrs.superlib.net/</span>），这里是查找书籍 ss 号的地点。我们将需要这个 ss 号来获取对应制作好的书签。<img data-src=\"http://tva1.sinaimg.cn/large/007QGucbly1guphprws0lj60r609yaas02.jpg\" alt=\"007QGucbly1guphprws0lj60r609yaas02\" /></p>\n<p>检索自己的书籍。这里有一个要注意的点：很多书籍经过了多次印刷，即使是同一个名字，其内容都有些微的不同。为了找到确切唯一的，你手上的 PDF 电子书，请到 PDF 的前几页找到这个 CIP 数据。其中的 ISBN 码，每一本书只有专属的一个。<img data-src=\"http://tva1.sinaimg.cn/large/007QGucbly1guphprw9y4j60d803uzki02.jpg\" alt=\"007QGucbly1guphprw9y4j60d803uzki02\" /></p>\n<p>看，现在检索出来的书就是 PDF 文件对应的那本书了。</p>\n<p><img data-src=\"http://tva1.sinaimg.cn/large/007QGucbly1guphpry6lnj60v007lwha02.jpg\" alt=\"3.jpg\" /></p>\n<p>来找这本书的 ss 号吧～未来获取书签需要提交该码。点击进入该书，在右侧试读，随便点击一个链接，如 “版权页”。</p>\n<p><img data-src=\"http://tva1.sinaimg.cn/large/007QGucbly1guphprubl6j608r03omx602.jpg\" alt=\"007QGucbly1guphprubl6j608r03omx602\" /></p>\n<p>新弹出的网页链接中，就能看到 ss 号了。<img data-src=\"http://tva1.sinaimg.cn/large/007QGucbly1guphpruj10j60of02u0t002.jpg\" alt=\"007QGucbly1guphpruj10j60of02u0t002\" /></p>\n<h2 id=\"2-获取书签信息\"><a class=\"anchor\" href=\"#2-获取书签信息\">#</a> 2. 获取书签信息</h2>\n<p>打开书签获取软件 V0505，输入 ss 号，一键获取。</p>\n<p><img data-src=\"http://tva1.sinaimg.cn/large/007QGucbly1guphtt4t37j60f20aiq4d02.jpg\" alt=\"1.jpg\" /></p>\n<p>进入窗体，Ctrl+A、Ctrl+C，全部复制。</p>\n<h2 id=\"3-往pdf导入书签信息\"><a class=\"anchor\" href=\"#3-往pdf导入书签信息\">#</a> 3. 往 PDF 导入书签信息</h2>\n<p>打开 PdgCntEditor，使用该软件打开你要编辑的 PDF 文件，直接在窗体中粘贴书签信息，保存。</p>\n<p><img data-src=\"http://tva1.sinaimg.cn/large/007QGucbly1guphtt52rrj60kv0cxac502.jpg\" alt=\"2.jpg\" /></p>\n<h2 id=\"4-检查效果\"><a class=\"anchor\" href=\"#4-检查效果\">#</a> 4. 检查效果</h2>\n<p>打开后，经过检查，实现了内容和页码的一一对应，效果较好。如有错位问题，再进入 PdgCntEditor 中进行相应修改。</p>\n<p><img data-src=\"http://tva1.sinaimg.cn/large/007QGucbly1guphtt5kk4j60ru0cl0wc02.jpg\" alt=\"3.jpg\" /></p>\n",
            "tags": [
                "学习工具",
                "PDF",
                "书签"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/09/01/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/",
            "url": "https://zengshengli775.gitee.io/2021/09/01/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/",
            "title": "在线工具",
            "date_published": "2021-08-31T16:00:00.000Z",
            "content_html": "<h2 id=\"在线工具\"><a class=\"anchor\" href=\"#在线工具\">#</a> 在线工具</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5rYWx2aW5iZy5jbi8=\">Kalvin 在线工具 - 有趣及实用的工具箱</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXVsbm5rYS5naXRodWIuaW8vQnVsbHNoaXRHZW5lcmF0b3Iv\">狗屁不通文章生成器</span></p>\n",
            "tags": [
                "实用技巧",
                "在线工具"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/29/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Apple%20Music%E4%BD%BF%E7%94%A8/",
            "url": "https://zengshengli775.gitee.io/2021/08/29/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Apple%20Music%E4%BD%BF%E7%94%A8/",
            "title": "Apple Music使用",
            "date_published": "2021-08-28T16:00:00.000Z",
            "content_html": "<h2 id=\"apple-music的优点\"><a class=\"anchor\" href=\"#apple-music的优点\">#</a> Apple music 的优点</h2>\n<p>1. 功能简单，无任何广告</p>\n<p>2. 不仅支持 IOS，还支持安卓！</p>\n<p>3. 收费便宜。Apple Music 会员<strong>首次可以免费使用三个月</strong>，之后是每个月 10 元</p>\n<p>而如果你使用 edu 邮箱验证，则可享受学生价，<strong>每月只要 5 块钱</strong>。</p>\n<p>4.<strong>Apple Music 允许用户上传歌曲</strong></p>\n<h2 id=\"apple-music上传歌曲\"><a class=\"anchor\" href=\"#apple-music上传歌曲\">#</a> Apple music 上传歌曲</h2>\n<p>Mac：” 音乐 “</p>\n<p>PC：”iTunes“</p>\n<p>1. 打开音乐 /iTunes－登录 Apple id－点击音乐－歌曲－把需要上传的歌拖到资料库</p>\n<p>2. 选中你要上传的歌右键－添加到资料库</p>\n<h2 id=\"迁移网易云qq音乐歌单\"><a class=\"anchor\" href=\"#迁移网易云qq音乐歌单\">#</a> 迁移网易云 / QQ 音乐歌单</h2>\n<p>1.<span class=\"exturl\" data-url=\"aHR0cHM6Ly95eXJjZC5jb20vbjJzLw==\"> 迁移 网易云 / QQ 音乐歌单到 Apple Music, Youtube Music, Spotify</span></p>\n<p>2. 使用安卓软件 “<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY3NwLmxhbnpvdWkuY29tL2IwZTg5NWgyYg==\">歌词适配</span>”，登陆后将网易云 / QQ 音乐歌单中歌曲全部下载，导入 Apple music 资料库。</p>\n<h2 id=\"免费下载网易云qq音乐歌曲\"><a class=\"anchor\" href=\"#免费下载网易云qq音乐歌曲\">#</a> 免费下载网易云 / QQ 音乐歌曲</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY3NwLmxhbnpvdWkuY29tL2IwZTg5NWgyYg==\">歌词适配</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3kuanNvc29zby5jb20vIy9zZWFyY2g=\">网易云音乐下载</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL211c2ljLnZhaXdhbi5jb20v\">QQ 音乐下载</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL211c2ljLnk0NDQuY24vIy8=\">下歌吧_音乐免费下载_音乐在线试听_无损音乐下载</span></p>\n",
            "tags": [
                "实用技巧",
                "Apple Music"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/27/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://zengshengli775.gitee.io/2021/08/27/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "C++基础知识",
            "date_published": "2021-08-26T16:00:00.000Z",
            "content_html": "<h2 id=\"1-c初识\"><a class=\"anchor\" href=\"#1-c初识\">#</a> 1 C++ 初识</h2>\n<h3 id=\"11-第一个c程序\"><a class=\"anchor\" href=\"#11-第一个c程序\">#</a> 1.1  第一个 C++ 程序</h3>\n<p>编写一个 C++ 程序总共分为 4 个步骤</p>\n<ul>\n<li>创建项目</li>\n<li>创建文件</li>\n<li>编写代码</li>\n<li>运行程序</li>\n</ul>\n<h4 id=\"111-创建项目\"><a class=\"anchor\" href=\"#111-创建项目\">#</a> 1.1.1 创建项目</h4>\n<p>​\tVisual Studio 是我们用来编写 C++ 程序的主要工具，我们先将它打开</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011123395.png\" alt=\"1541383178746\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011123755.png\" alt=\"1541384366413\" /></p>\n<h4 id=\"112-创建文件\"><a class=\"anchor\" href=\"#112-创建文件\">#</a> 1.1.2 创建文件</h4>\n<p>右键源文件，选择添加 -&gt; 新建项</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011123289.png\" alt=\"1541383817248\" /></p>\n<p>给 C++ 文件起个名称，然后点击添加即可。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011123520.png\" alt=\"1541384140042\" /></p>\n<h4 id=\"113-编写代码\"><a class=\"anchor\" href=\"#113-编写代码\">#</a> 1.1.3 编写代码</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello world\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"114-运行程序\"><a class=\"anchor\" href=\"#114-运行程序\">#</a> 1.1.4 运行程序</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011123493.png\" alt=\"1541384818688\" /></p>\n<h3 id=\"12-注释\"><a class=\"anchor\" href=\"#12-注释\">#</a> 1.2 注释</h3>\n<p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>\n<p><strong>两种格式</strong></p>\n<ol>\n<li><strong>单行注释</strong>： <code>// 描述信息</code>\n<ul>\n<li>通常放在一行代码的上方，或者一条语句的末尾，<mark>对该行代码说明</mark></li>\n</ul>\n</li>\n<li><strong>多行注释</strong>：  <code>/* 描述信息 */</code>\n<ul>\n<li>通常放在一段代码的上方，<mark>对该段代码做整体说明</mark></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>提示：编译器在编译代码时，会忽略注释的内容</p>\n</blockquote>\n<h3 id=\"13-变量\"><a class=\"anchor\" href=\"#13-变量\">#</a> 1.3 变量</h3>\n<p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>\n<p><strong>语法</strong>： <code>数据类型 变量名 = 初始值;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include&lt;iostream&gt;\nusing namespace std;\n\nint main() &#123;\n\n\t//变量的定义\n\t//语法：数据类型  变量名 = 初始值\n\n\tint a = 10;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C++ 在创建变量时，必须给变量一个初始值，否则会报错</p>\n</blockquote>\n<h4 id=\"变量类型\"><a class=\"anchor\" href=\"#变量类型\">#</a> 变量类型</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">bool</td>\n<td style=\"text-align:left\">存储值 true 或 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">通常是一个字符（八位）。这是一个整数类型。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">对机器而言，整数的最自然的大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">单精度浮点值。单精度是这样的格式，1 位符号，8 位指数，23 位小数。<img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011113288.png\" alt=\"img\" /></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">双精度浮点值。双精度是 1 位符号，11 位指数，52 位小数。<img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011113297.png\" alt=\"img\" /></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">void</td>\n<td style=\"text-align:left\">表示类型的缺失。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wchar_t</td>\n<td style=\"text-align:left\">宽字符类型。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"14-常量\"><a class=\"anchor\" href=\"#14-常量\">#</a> 1.4  常量</h3>\n<p><strong>作用</strong>：用于记录程序中不可更改的数据</p>\n<p>C++ 定义常量两种方式</p>\n<ol>\n<li>\n<p><strong>#define</strong> 宏常量：  <code>#define 常量名 常量值</code></p>\n<ul>\n<li><mark>通常在文件上方定义</mark>，表示一个常量</li>\n</ul>\n</li>\n<li>\n<p><strong>const</strong> 修饰的变量  <code>const 数据类型 常量名 = 常量值</code></p>\n<ul>\n<li><mark>通常在变量定义前加关键字 const</mark>，修饰该变量为常量，不可修改</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//1、宏常量\n#define day 7\n\nint main() &#123;\n\n\tcout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl;\n\t//day = 8;  //报错，宏常量不可以修改\n\n\t//2、const修饰变量\n\tconst int month = 12;\n\tcout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl;\n\t//month = 24; //报错，常量是不可以修改的\n\t\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"整数常量\"><a class=\"anchor\" href=\"#整数常量\">#</a> 整数常量</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">85</span>         <span class=\"token comment\">// 十进制</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0213</span>       <span class=\"token comment\">// 八进制 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0x4b</span>       <span class=\"token comment\">// 十六进制 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">30</span>         <span class=\"token comment\">// 整数 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">30u</span>        <span class=\"token comment\">// 无符号整数 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">30l</span>        <span class=\"token comment\">// 长整数 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">30ul</span>       <span class=\"token comment\">// 无符号长整数</span></pre></td></tr></table></figure><h4 id=\"浮点常量\"><a class=\"anchor\" href=\"#浮点常量\">#</a> 浮点常量</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3.14159</span>       <span class=\"token comment\">// 合法的 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">314159E-5L</span>    <span class=\"token comment\">// 合法的 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">510</span>E          <span class=\"token comment\">// 非法的：不完整的指数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">210f</span>          <span class=\"token comment\">// 非法的：没有小数或指数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span>e55          <span class=\"token comment\">// 非法的：缺少整数或分数</span></pre></td></tr></table></figure><h4 id=\"布尔常量\"><a class=\"anchor\" href=\"#布尔常量\">#</a> 布尔常量</h4>\n<p>布尔常量共有两个，它们都是标准的 C++ 关键字：</p>\n<ul>\n<li><strong>true</strong> 值代表真。</li>\n<li><strong>false</strong> 值代表假。</li>\n</ul>\n<h4 id=\"字符常量\"><a class=\"anchor\" href=\"#字符常量\">#</a> 字符常量</h4>\n<p>字符常量是括在单引号中。如果常量以 L（仅当大写时）开头，则表示它是一个宽字符常量（例如 L'x'），此时它必须存储在 <strong>wchar_t</strong> 类型的变量中。否则，它就是一个窄字符常量（例如 'x'），此时它可以存储在 <strong>char</strong> 类型的简单变量中。</p>\n<p>字符常量可以是一个普通的字符（例如 'x'）、一个转义序列（例如 '\\t'），或一个通用的字符（例如 '\\u02C0'）。</p>\n<h4 id=\"字符串常量\"><a class=\"anchor\" href=\"#字符串常量\">#</a> 字符串常量</h4>\n<p>字符串字面值或常量是括在双引号 <strong>&quot;&quot;</strong> 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p>\n<h3 id=\"15-关键字\"><a class=\"anchor\" href=\"#15-关键字\">#</a> 1.5 关键字</h3>\n<p>** 作用：** 关键字是 C++ 中预先保留的单词（标识符）</p>\n<ul>\n<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>\n</ul>\n<p>C++ 关键字如下：</p>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>do</th>\n<th>if</th>\n<th>return</th>\n<th>typedef</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto</td>\n<td>double</td>\n<td>inline</td>\n<td>short</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>dynamic_cast</td>\n<td>int</td>\n<td>signed</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>long</td>\n<td>sizeof</td>\n<td>union</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>mutable</td>\n<td>static</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>explicit</td>\n<td>namespace</td>\n<td>static_cast</td>\n<td>using</td>\n</tr>\n<tr>\n<td>char</td>\n<td>export</td>\n<td>new</td>\n<td>struct</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extern</td>\n<td>operator</td>\n<td>switch</td>\n<td>void</td>\n</tr>\n<tr>\n<td>const</td>\n<td>false</td>\n<td>private</td>\n<td>template</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>float</td>\n<td>protected</td>\n<td>this</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>public</td>\n<td>throw</td>\n<td>while</td>\n</tr>\n<tr>\n<td>default</td>\n<td>friend</td>\n<td>register</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>goto</td>\n<td>reinterpret_cast</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>\n<h3 id=\"16-标识符命名规则\"><a class=\"anchor\" href=\"#16-标识符命名规则\">#</a> 1.6 标识符命名规则</h3>\n<p><strong>作用</strong>：C++ 规定给标识符（变量、常量）命名时，有一套自己的规则</p>\n<ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能由字母、数字、下划线组成</li>\n<li>第一个字符必须为字母或下划线</li>\n<li>标识符中字母区分大小写</li>\n</ul>\n<blockquote>\n<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>\n</blockquote>\n<h2 id=\"2-数据类型\"><a class=\"anchor\" href=\"#2-数据类型\">#</a> 2 数据类型</h2>\n<p>C++ 规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>\n<h4 id=\"基本的内置类型\"><a class=\"anchor\" href=\"#基本的内置类型\">#</a> 基本的内置类型</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">布尔型</td>\n<td style=\"text-align:left\">bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">字符型</td>\n<td style=\"text-align:left\">char</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">整型</td>\n<td style=\"text-align:left\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">浮点型</td>\n<td style=\"text-align:left\">float</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">双浮点型</td>\n<td style=\"text-align:left\">double</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">无类型</td>\n<td style=\"text-align:left\">void</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">宽字符型</td>\n<td style=\"text-align:left\">wchar_t</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"typedef-声明\"><a class=\"anchor\" href=\"#typedef-声明\">#</a> typedef 声明</h4>\n<p>您可以使用 <strong>typedef</strong> 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：</p>\n<pre><code>typedef type newname; \n</code></pre>\n<p>例如，下面的语句会告诉编译器，feet 是 int 的另一个名称：</p>\n<pre><code>typedef int feet;\n</code></pre>\n<h3 id=\"21-整型\"><a class=\"anchor\" href=\"#21-整型\">#</a> 2.1 整型</h3>\n<p><strong>作用</strong>：整型变量表示的是<mark>整数类型</mark>的数据</p>\n<p>C++ 中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>short (短整型)</td>\n<td>2 字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int (整型)</td>\n<td>4 字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long (长整形)</td>\n<td>Windows 为 4 字节，Linux 为 4 字节 (32 位)，8 字节 (64 位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long (长长整形)</td>\n<td>8 字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"22-sizeof关键字\"><a class=\"anchor\" href=\"#22-sizeof关键字\">#</a> 2.2 sizeof 关键字</h3>\n<p>** 作用：** 利用 sizeof 关键字可以<mark>统计数据类型所占内存大小</mark></p>\n<p><strong>语法：</strong>  <code>sizeof( 数据类型 / 变量)</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tcout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><strong>整型结论</strong>：<mark>short &lt; int &lt;= long &lt;= long long</mark></p>\n</blockquote>\n<h3 id=\"23-实型浮点型\"><a class=\"anchor\" href=\"#23-实型浮点型\">#</a> 2.3 实型（浮点型）</h3>\n<p><strong>作用</strong>：用于<mark>表示小数</mark></p>\n<p>浮点型变量分为两种：</p>\n<ol>\n<li>单精度 float</li>\n<li>双精度 double</li>\n</ol>\n<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th><strong>有效数字范围</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float</td>\n<td>4 字节</td>\n<td>7 位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8 字节</td>\n<td>15～16 位有效数字</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfloat f1 = 3.14f;\n\tdouble d1 = 3.14;\n\n\tcout &lt;&lt; f1 &lt;&lt; endl;\n\tcout &lt;&lt; d1&lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;float  sizeof = &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;double sizeof = &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;\n\n\t//科学计数法\n\tfloat f2 = 3e2; // 3 * 10 ^ 2 \n\tcout &lt;&lt; &quot;f2 = &quot; &lt;&lt; f2 &lt;&lt; endl;\n\n\tfloat f3 = 3e-2;  // 3 * 0.1 ^ 2\n\tcout &lt;&lt; &quot;f3 = &quot; &lt;&lt; f3 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"24-字符型\"><a class=\"anchor\" href=\"#24-字符型\">#</a> 2.4 字符型</h3>\n<p>** 作用：** 字符型变量用于显示单个字符</p>\n<p><strong>语法：</strong> <code>char ch = 'a';</code></p>\n<blockquote>\n<p>注意 1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>\n</blockquote>\n<blockquote>\n<p>注意 2：单引号内只能有一个字符，不可以是字符串</p>\n</blockquote>\n<ul>\n<li>C 和 C++ 中字符型变量只占用<mark> 1 个字节</mark>。</li>\n<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的 ASCII 编码放入到存储单元</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t\n\tchar ch = 'a';\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(char) &lt;&lt; endl;\n\n\t//ch = &quot;abcde&quot;; //错误，不可以用双引号\n\t//ch = 'abcde'; //错误，单引号内只能引用一个字符\n\n\tcout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码\n\tch = 97; //可以直接用ASCII给字符型变量赋值\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>ASCII 码表格：</p>\n<table>\n<thead>\n<tr>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>控制字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>NUT</td>\n<td>32</td>\n<td>(space)</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>、</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>&quot;</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>,</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DCI</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>/</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>`        |</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody>\n</table>\n<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>\n<ul>\n<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>\n<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>\n</ul>\n<h3 id=\"25-转义字符\"><a class=\"anchor\" href=\"#25-转义字符\">#</a> 2.5 转义字符</h3>\n<p>** 作用：** 用于表示一些<mark>不能显示出来的 ASCII 字符</mark></p>\n<p>现阶段我们常用的转义字符有： <code> \\n  \\\\  \\t</code></p>\n<table>\n<thead>\n<tr>\n<th><strong>转义字符</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>ASCII</strong> 码值（十进制）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警报</td>\n<td>007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格 (BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页 (FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td><strong>换行 (LF) ，将当前位置移到下一行开头</strong></td>\n<td><strong>010</strong></td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车 (CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td><strong>水平制表 (HT)  （跳到下一个 TAB 位置）</strong></td>\n<td><strong>009</strong></td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表 (VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td><strong>\\\\</strong></td>\n<td><strong>代表一个反斜线字符 &quot;&quot;</strong></td>\n<td><strong>092</strong></td>\n</tr>\n<tr>\n<td>'</td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>?</td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>数字 0</td>\n<td>000</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>8 进制转义字符，d 范围 0~7</td>\n<td>3 位 8 进制</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>16 进制转义字符，h 范围 0<sub>9，a</sub>f，A~F</td>\n<td>3 位 16 进制</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t\n\t\n\tcout &lt;&lt; &quot;\\\\&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;\\tHello&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;\\n&quot; &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"26-字符串型\"><a class=\"anchor\" href=\"#26-字符串型\">#</a> 2.6 字符串型</h3>\n<p><strong>作用</strong>：用于表示一串字符</p>\n<p><strong>两种风格</strong></p>\n<ol>\n<li><strong>C 风格字符串</strong>：  <code>char 变量名[] = &quot;字符串值&quot;</code></li>\n</ol>\n<p>C 风格的字符串起源于 C 语言，并在 C++ 中继续得到支持。字符串实际上是使用 <strong>null</strong> 字符 <strong>\\0</strong> 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。</p>\n<p>下面的声明和初始化创建了一个 <strong>RUNOOB</strong> 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 <strong>RUNOOB</strong> 的字符数多一个。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> site<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> site<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"RUNOOB\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tchar str1[] = &quot;hello world&quot;;\n\tcout &lt;&lt; str1 &lt;&lt; endl;\n    \n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C 风格的字符串要用双引号括起来</p>\n</blockquote>\n<ol>\n<li>\n<p><strong>C++ 风格字符串</strong>：   <code>string  变量名 = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tstring str = &quot;hello world&quot;;\n\tcout &lt;&lt; str &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：C++ 风格字符串，需要加入头文件 ==#include&lt;string&gt;==</p>\n</blockquote>\n<h3 id=\"27-布尔类型-bool\"><a class=\"anchor\" href=\"#27-布尔类型-bool\">#</a> 2.7 布尔类型 bool</h3>\n<p>** 作用：** 布尔数据类型代表真或假的值</p>\n<p>bool 类型只有两个值：</p>\n<ul>\n<li>true  --- 真（本质是 1）</li>\n<li>false --- 假（本质是 0）</li>\n</ul>\n<p><strong>bool 类型占<mark> 1 个字节</mark>大小</strong></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tbool flag = true;\n\tcout &lt;&lt; flag &lt;&lt; endl; // 1\n\n\tflag = false;\n\tcout &lt;&lt; flag &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; &quot;size of bool = &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; //1\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"28-数据的输入\"><a class=\"anchor\" href=\"#28-数据的输入\">#</a> 2.8 数据的输入</h3>\n<p><strong>作用：用于从键盘获取数据</strong></p>\n<p>** 关键字：**cin</p>\n<p><strong>语法：</strong>  <code>cin &gt;&gt; 变量 </code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main()&#123;\n\n\t//整型输入\n\tint a = 0;\n\tcout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; a;\n\tcout &lt;&lt; a &lt;&lt; endl;\n\n\t//浮点型输入\n\tdouble d = 0;\n\tcout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; d;\n\tcout &lt;&lt; d &lt;&lt; endl;\n\n\t//字符型输入\n\tchar ch = 0;\n\tcout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; ch;\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\n\t//字符串型输入\n\tstring str;\n\tcout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; str;\n\tcout &lt;&lt; str &lt;&lt; endl;\n\n\t//布尔类型输入\n\tbool flag = true;\n\tcout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; flag;\n\tcout &lt;&lt; flag &lt;&lt; endl;\n\tsystem(&quot;pause&quot;);\n\treturn EXIT_SUCCESS;\n&#125;\n</code></pre>\n<h2 id=\"3-运算符\"><a class=\"anchor\" href=\"#3-运算符\">#</a> 3 运算符</h2>\n<p>** 作用：** 用于执行代码的运算</p>\n<p>本章我们主要讲解以下几类运算符：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符类型</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>算术运算符</td>\n<td>用于处理四则运算</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>用于将表达式的值赋给变量</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>用于表达式的比较，并返回一个真值或假值</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>用于根据表达式的值返回真值或假值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"31-算术运算符\"><a class=\"anchor\" href=\"#31-算术运算符\">#</a> 3.1 算术运算符</h3>\n<p><strong>作用</strong>：用于处理四则运算</p>\n<p>算术运算符包括以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>正号</td>\n<td>+3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>10 + 5</td>\n<td>15</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10 - 5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10 * 5</td>\n<td>50</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10 / 5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模 (取余)</td>\n<td>10 % 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>++</td>\n<td>前置递增</td>\n<td>a=2; b=++a;</td>\n<td>a=3; b=3;</td>\n</tr>\n<tr>\n<td>++</td>\n<td>后置递增</td>\n<td>a=2; b=a++;</td>\n<td>a=3; b=2;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>前置递减</td>\n<td>a=2; b=--a;</td>\n<td>a=1; b=1;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>后置递减</td>\n<td>a=2; b=a--;</td>\n<td>a=1; b=2;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-C++\">//加减乘除\nint main() &#123;\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout &lt;&lt; a1 + b1 &lt;&lt; endl;\n\tcout &lt;&lt; a1 - b1 &lt;&lt; endl;\n\tcout &lt;&lt; a1 * b1 &lt;&lt; endl;\n\tcout &lt;&lt; a1 / b1 &lt;&lt; endl;  //两个整数相除结果依然是整数\n\n\tint a2 = 10;\n\tint b2 = 20;\n\tcout &lt;&lt; a2 / b2 &lt;&lt; endl; \n\n\tint a3 = 10;\n\tint b3 = 0;\n\t//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0\n\n\n\t//两个小数可以相除\n\tdouble d1 = 0.5;\n\tdouble d2 = 0.25;\n\tcout &lt;&lt; d1 / d2 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：在除法运算中，除数不能为 0</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-C++\">//取模\nint main() &#123;\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout &lt;&lt; 10 % 3 &lt;&lt; endl;\n\n\tint a2 = 10;\n\tint b2 = 20;\n\n\tcout &lt;&lt; a2 % b2 &lt;&lt; endl;\n\n\tint a3 = 10;\n\tint b3 = 0;\n\n\t//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0\n\n\t//两个小数不可以取模\n\tdouble d1 = 3.14;\n\tdouble d2 = 1.1;\n\n\t//cout &lt;&lt; d1 % d2 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<blockquote>\n<p>总结：只有整型变量可以进行取模运算</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<pre><code class=\"language-C++\">//递增\nint main() &#123;\n\n\t//后置递增\n\tint a = 10;\n\ta++; //等价于a = a + 1\n\tcout &lt;&lt; a &lt;&lt; endl; // 11\n\n\t//前置递增\n\tint b = 10;\n\t++b;\n\tcout &lt;&lt; b &lt;&lt; endl; // 11\n\n\t//区别\n\t//前置递增先对变量进行++，再计算表达式\n\tint a2 = 10;\n\tint b2 = ++a2 * 10;\n\tcout &lt;&lt; b2 &lt;&lt; endl;\n\n\t//后置递增先计算表达式，后对变量进行++\n\tint a3 = 10;\n\tint b3 = a3++ * 10;\n\tcout &lt;&lt; b3 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<blockquote>\n<p>总结：前置递增先对变量进行 ++，再计算表达式，后置递增相反</p>\n</blockquote>\n<h3 id=\"32-赋值运算符\"><a class=\"anchor\" href=\"#32-赋值运算符\">#</a> 3.2 赋值运算符</h3>\n<p>** 作用：** 用于将表达式的值赋给变量</p>\n<p>赋值运算符包括以下几个符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=2; b=3;</td>\n<td>a=2; b=3;</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加等于</td>\n<td>a=0; a+=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减等于</td>\n<td>a=5; a-=3;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘等于</td>\n<td>a=2; a*=2;</td>\n<td>a=4;</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除等于</td>\n<td>a=4; a/=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>模等于</td>\n<td>a=3; a%2;</td>\n<td>a=1;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//赋值运算符\n\n\t// =\n\tint a = 10;\n\ta = 100;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// +=\n\ta = 10;\n\ta += 2; // a = a + 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// -=\n\ta = 10;\n\ta -= 2; // a = a - 2\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// *=\n\ta = 10;\n\ta *= 2; // a = a * 2\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// /=\n\ta = 10;\n\ta /= 2;  // a = a / 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t// %=\n\ta = 10;\n\ta %= 2;  // a = a % 2;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"33-比较运算符\"><a class=\"anchor\" href=\"#33-比较运算符\">#</a> 3.3 比较运算符</h3>\n<p>** 作用：** 用于表达式的比较，并返回一个真值或假值</p>\n<p>比较运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>相等于</td>\n<td>4 == 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>4 != 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>4 &lt; 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>4 &gt; 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>4 &lt;= 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>4 &gt;= 1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\n\tcout &lt;&lt; (a == b) &lt;&lt; endl; // 0 \n\n\tcout &lt;&lt; (a != b) &lt;&lt; endl; // 1\n\n\tcout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1\n\n\tcout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：C 和 C++ 语言的比较运算中， <mark>“真” 用数字 “1” 来表示， “假” 用数字 “0” 来表示。</mark></p>\n</blockquote>\n<h3 id=\"34-逻辑运算符\"><a class=\"anchor\" href=\"#34-逻辑运算符\">#</a> 3.4 逻辑运算符</h3>\n<p>** 作用：** 用于根据表达式的值返回真值或假值</p>\n<p>逻辑运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非</td>\n<td>!a</td>\n<td>如果 a 为假，则！a 为真；  如果 a 为真，则！a 为假。</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>a &amp;&amp; b</td>\n<td>如果 a 和 b 都为真，则结果为真，否则为假。</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>a || b</td>\n<td>如果 a 和 b 有一个为真，则结果为真，二者都为假时，结果为假。</td>\n</tr>\n</tbody>\n</table>\n<p>** 示例 1：** 逻辑非</p>\n<pre><code class=\"language-C++\">//逻辑运算符  --- 非\nint main() &#123;\n\n\tint a = 10;\n\n\tcout &lt;&lt; !a &lt;&lt; endl; // 0\n\n\tcout &lt;&lt; !!a &lt;&lt; endl; // 1\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 真变假，假变真</p>\n</blockquote>\n<p>** 示例 2：** 逻辑与</p>\n<pre><code class=\"language-C++\">//逻辑运算符  --- 与\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 \n\n\ta = 0;\n\tb = 0;\n\n\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<blockquote>\n<p>总结：逻辑<mark>与</mark>运算符总结： <mark>同真为真，其余为假</mark></p>\n</blockquote>\n<p>** 示例 3：** 逻辑或</p>\n<pre><code class=\"language-c++\">//逻辑运算符  --- 或\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 1 \n\n\ta = 0;\n\tb = 0;\n\n\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 0\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>逻辑<mark>或</mark>运算符总结： <mark>同假为假，其余为真</mark></p>\n</blockquote>\n<h2 id=\"4-程序流程结构\"><a class=\"anchor\" href=\"#4-程序流程结构\">#</a> 4 程序流程结构</h2>\n<p>C/C++ 支持最基本的三种程序运行结构：<mark>顺序结构、选择结构、循环结构</mark></p>\n<ul>\n<li>顺序结构：程序按顺序执行，不发生跳转</li>\n<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>\n<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>\n</ul>\n<h3 id=\"41-选择结构\"><a class=\"anchor\" href=\"#41-选择结构\">#</a> 4.1 选择结构</h3>\n<h4 id=\"411-if语句\"><a class=\"anchor\" href=\"#411-if语句\">#</a> 4.1.1 if 语句</h4>\n<p>** 作用：** 执行满足条件的语句</p>\n<p>if 语句的三种形式</p>\n<ul>\n<li>\n<p>单行格式 if 语句</p>\n</li>\n<li>\n<p>多行格式 if 语句</p>\n</li>\n<li>\n<p>多条件的 if 语句</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>单行格式 if 语句： <code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011124509.png\" alt=\"img\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//选择结构-单行if语句\n\t//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印\n\n\tint score = 0;\n\tcout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; score;\n\n\tcout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;\n\n\t//if语句\n\t//注意事项，在if判断语句后面，不要加分号\n\tif (score &gt; 600)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：if 条件表达式后不要加分号</p>\n</blockquote>\n<ol start=\"2\">\n<li>多行格式 if 语句： <code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011124936.png\" alt=\"img\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint score = 0;\n\n\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\n\n\tcin &gt;&gt; score;\n\n\tif (score &gt; 600)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>多条件的 if 语句： <code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011124563.png\" alt=\"img\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">\tint main() &#123;\n\n\tint score = 0;\n\n\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\n\n\tcin &gt;&gt; score;\n\n\tif (score &gt; 600)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse if (score &gt; 500)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse if (score &gt; 400)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>嵌套 if 语句</strong>：在 if 语句中，可以嵌套使用 if 语句，达到更精确的条件判断</p>\n<p>案例需求：</p>\n<ul>\n<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>\n<li>分数如果大于 600 分视为考上一本，大于 500 分考上二本，大于 400 考上三本，其余视为未考上本科；</li>\n<li>在一本分数中，如果大于 700 分，考入北大，大于 650 分，考入清华，大于 600 考入人大。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int main() &#123;\n\n\tint score = 0;\n\n\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\n\n\tcin &gt;&gt; score;\n\n\tif (score &gt; 600)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\n\t\tif (score &gt; 700)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;\n\t\t&#125;\n\t\telse if (score &gt; 650)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;\n\t\t&#125;\n\t\t\n\t&#125;\n\telse if (score &gt; 500)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse if (score &gt; 400)\n\t&#123;\n\t\tcout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>4.1.2 三目运算符</p>\n<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong> <code>表达式1 ? 表达式2 ：表达式3</code></p>\n<p><strong>解释：</strong></p>\n<p>如果表达式 1 的值为真，执行表达式 2，并返回表达式 2 的结果；</p>\n<p>如果表达式 1 的值为假，执行表达式 3，并返回表达式 3 的结果。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\tint c = 0;\n\n\tc = a &gt; b ? a : b;\n\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\n\n\t//C++中三目运算符返回的是变量,可以继续赋值\n\n\t(a &gt; b ? a : b) = 100;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：和 if 语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>\n</blockquote>\n<h4 id=\"413-switch语句\"><a class=\"anchor\" href=\"#413-switch语句\">#</a> 4.1.3 switch 语句</h4>\n<p>** 作用：** 执行多条件分支语句</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">switch(表达式)\n\n&#123;\n\n\tcase 结果1：执行语句;break;\n\n\tcase 结果2：执行语句;break;\n\n\t...\n\n\tdefault:执行语句;break;\n\n&#125;\n\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//请给电影评分 \n\t//10 ~ 9   经典   \n\t// 8 ~ 7   非常好\n\t// 6 ~ 5   一般\n\t// 5分以下 烂片\n\n\tint score = 0;\n\tcout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;\n\tcin &gt;&gt; score;\n\n\tswitch (score)\n\t&#123;\n\tcase 10:\n\tcase 9:\n\t\tcout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 8:\n\t\tcout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 7:\n\tcase 6:\n\t\tcout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;\n\t\tbreak;\n\tdefault:\n\t\tcout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;\n\t\tbreak;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意 1：switch 语句中表达式类型只能是整型或者字符型</p>\n</blockquote>\n<blockquote>\n<p>注意 2：case 里如果没有 break，那么程序会一直向下执行</p>\n</blockquote>\n<blockquote>\n<p>总结：与 if 语句比，对于多条件判断时，switch 的结构清晰，执行效率高，缺点是 switch 不可以判断区间</p>\n</blockquote>\n<h3 id=\"42-循环结构\"><a class=\"anchor\" href=\"#42-循环结构\">#</a> 4.2 循环结构</h3>\n<h4 id=\"421-while循环语句\"><a class=\"anchor\" href=\"#421-while循环语句\">#</a> 4.2.1 while 循环语句</h4>\n<p>** 作用：** 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code> while(循环条件)&#123; 循环语句 &#125;</code></p>\n<p><strong>解释：</strong><mark>只要循环条件的结果为真，就执行循环语句</mark></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011124610.png\" alt=\"img\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint num = 0;\n\twhile (num &lt; 10)\n\t&#123;\n\t\tcout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;\n\t\tnum++;\n\t&#125;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>\n</blockquote>\n<h4 id=\"422-dowhile循环语句\"><a class=\"anchor\" href=\"#422-dowhile循环语句\">#</a> 4.2.2 do...while 循环语句</h4>\n<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong>  <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>\n<p>** 注意：** 与 while 的区别在于<mark> do...while 会先执行一次循环语句</mark>，再判断循环条件</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011125479.png\" alt=\"img\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint num = 0;\n\n\tdo\n\t&#123;\n\t\tcout &lt;&lt; num &lt;&lt; endl;\n\t\tnum++;\n\n\t&#125; while (num &lt; 10);\n\t\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：与 while 循环区别在于，do...while 先执行一次循环语句，再判断循环条件</p>\n</blockquote>\n<h4 id=\"423-for循环语句\"><a class=\"anchor\" href=\"#423-for循环语句\">#</a> 4.2.3 for 循环语句</h4>\n<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>详解：</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011125079.png\" alt=\"1541673704101\" /></p>\n<blockquote>\n<p>注意：for 循环中的表达式，要用分号进行分隔</p>\n</blockquote>\n<blockquote>\n<p>总结：while , do...while, for 都是开发中常用的循环语句，for 循环结构比较清晰，比较常用</p>\n</blockquote>\n<h4 id=\"424-嵌套循环\"><a class=\"anchor\" href=\"#424-嵌套循环\">#</a> 4.2.4 嵌套循环</h4>\n<p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>\n<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011125432.png\" alt=\"1541676003486\" /></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//外层循环执行1次，内层循环执行1轮\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; 10; j++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"43-跳转语句\"><a class=\"anchor\" href=\"#43-跳转语句\">#</a> 4.3 跳转语句</h3>\n<h4 id=\"431-break语句\"><a class=\"anchor\" href=\"#431-break语句\">#</a> 4.3.1 break 语句</h4>\n<p><strong>作用:</strong> 用于跳出<mark>选择结构</mark>或者<mark>循环结构</mark></p>\n<p>break 使用的时机：</p>\n<ul>\n<li>出现在 switch 条件语句中，作用是终止 case 并跳出 switch</li>\n<li>出现在循环语句中，作用是跳出当前的循环语句</li>\n<li>出现在嵌套循环中，跳出最近的内层循环语句</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//1、在switch 语句中使用break\n\tcout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl;\n\n\tint num = 0;\n\n\tcin &gt;&gt; num;\n\n\tswitch (num)\n\t&#123;\n\tcase 1:\n\t\tcout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 2:\n\t\tcout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 3:\n\t\tcout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;\n\t\tbreak;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//2、在循环语句中用break\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tif (i == 5)\n\t\t&#123;\n\t\t\tbreak; //跳出循环语句\n\t\t&#125;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t//在嵌套循环语句中使用break，退出内层循环\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; 10; j++)\n\t\t&#123;\n\t\t\tif (j == 5)\n\t\t\t&#123;\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t\tcout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"432-continue语句\"><a class=\"anchor\" href=\"#432-continue语句\">#</a> 4.3.2 continue 语句</h4>\n<p>** 作用：** 在<mark>循环语句</mark>中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfor (int i = 0; i &lt; 100; i++)\n\t&#123;\n\t\tif (i % 2 == 0)\n\t\t&#123;\n\t\t\tcontinue;\n\t\t&#125;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：continue 并没有使整个循环终止，而 break 会跳出循环</p>\n</blockquote>\n<h4 id=\"433-goto语句\"><a class=\"anchor\" href=\"#433-goto语句\">#</a> 4.3.3 goto 语句</h4>\n<p>** 作用：** 可以无条件跳转语句</p>\n<p><strong>语法：</strong>  <code>goto 标记;</code></p>\n<p>** 解释：** 如果标记的名称存在，执行到 goto 语句时，会跳转到标记的位置</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tcout &lt;&lt; &quot;1&quot; &lt;&lt; endl;\n\n\tgoto FLAG;\n\n\tcout &lt;&lt; &quot;2&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;3&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;4&quot; &lt;&lt; endl;\n\n\tFLAG:\n\n\tcout &lt;&lt; &quot;5&quot; &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：在程序中不建议使用 goto 语句，以免造成程序流程混乱</p>\n</blockquote>\n<h2 id=\"5-数组\"><a class=\"anchor\" href=\"#5-数组\">#</a> 5 数组</h2>\n<h3 id=\"51-概述\"><a class=\"anchor\" href=\"#51-概述\">#</a> 5.1 概述</h3>\n<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>\n<p>** 特点 1：** 数组中的每个<mark>数据元素都是相同的数据类型</mark></p>\n<p>** 特点 2：** 数组是由<mark>连续的内存</mark>位置组成的</p>\n<h3 id=\"52-一维数组\"><a class=\"anchor\" href=\"#52-一维数组\">#</a> 5.2 一维数组</h3>\n<h4 id=\"521-一维数组定义方式\"><a class=\"anchor\" href=\"#521-一维数组定义方式\">#</a> 5.2.1 一维数组定义方式</h4>\n<p>一维数组定义的三种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 数组长度 ];</code></li>\n<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>\n<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>\n</ol>\n<p>示例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 定义方式 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 数据类型 数组名 [元素个数];</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 利用下标赋值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tscore<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tscore<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tscore<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">85</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 利用下标输出</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> score<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> score<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> score<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 第二种定义方式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 数据类型 数组名 [元素个数] =  &#123;值 1，值 2 ，值 3 ...&#125;;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 如果 &#123;&#125; 内不足 10 个数据，剩余数据用 0 补全</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> score2<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 逐个输出</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 一个一个输出太麻烦，因此可以利用循环进行输出</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> score2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 定义方式 3</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 数据类型 数组名 [] =  &#123;值 1，值 2 ，值 3 ...&#125;;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> score3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> score3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>总结 1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>\n</blockquote>\n<blockquote>\n<p>总结 2：数组中下标是从 0 开始索引</p>\n</blockquote>\n<h4 id=\"522-一维数组数组名\"><a class=\"anchor\" href=\"#522-一维数组数组名\">#</a> 5.2.2 一维数组数组名</h4>\n<p>一维数组名称的<strong>用途</strong>：</p>\n<ol>\n<li>可以统计整个数组在内存中的长度</li>\n<li>可以获取数组在内存中的首地址</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//数组名用途\n\t//1、可以获取整个数组占用内存空间大小\n\tint arr[10] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;\n\n\tcout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;\n\n\t//2、可以通过数组名获取到数组首地址\n\tcout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl;\n\tcout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;\n\n\t//arr = 100; 错误，数组名是常量，因此不可以赋值\n\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：数组名是常量，不可以赋值</p>\n</blockquote>\n<blockquote>\n<p>总结 1：直接打印数组名，可以查看数组所占内存的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：对数组名进行 sizeof，可以获取整个数组占内存空间的大小</p>\n</blockquote>\n<h4 id=\"523-冒泡排序\"><a class=\"anchor\" href=\"#523-冒泡排序\">#</a> 5.2.3 冒泡排序</h4>\n<p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>\n<li>重复以上的步骤，每次比较次数 - 1，直到不需要比较</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011125386.png\" alt=\"1541905327273\" /></p>\n<p><strong>示例：</strong> 将数组 {4,2,8,0,5,7,1,3,9} 进行升序排序</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint arr[9] = &#123; 4,2,8,0,5,7,1,3,9 &#125;;\n\n\tfor (int i = 0; i &lt; 9 - 1; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; 9 - 1 - i; j++)\n\t\t&#123;\n\t\t\tif (arr[j] &gt; arr[j + 1])\n\t\t\t&#123;\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\tfor (int i = 0; i &lt; 9; i++)\n\t&#123;\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\t&#125;\n    \n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"53-二维数组\"><a class=\"anchor\" href=\"#53-二维数组\">#</a> 5.3 二维数组</h3>\n<p>二维数组就是在一维数组上，多加一个维度。</p>\n<h4 id=\"531-二维数组定义方式\"><a class=\"anchor\" href=\"#531-二维数组定义方式\">#</a> 5.3.1 二维数组定义方式</h4>\n<p>二维数组定义的四种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n</ol>\n<blockquote>\n<p>建议：以上 4 种定义方式，利用<mark>第二种更加直观，提高代码的可读性</mark></p>\n</blockquote>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//方式1  \n\t//数组类型 数组名 [行数][列数]\n\tint arr[2][3];\n\tarr[0][0] = 1;\n\tarr[0][1] = 2;\n\tarr[0][2] = 3;\n\tarr[1][0] = 4;\n\tarr[1][1] = 5;\n\tarr[1][2] = 6;\n\n\tfor (int i = 0; i &lt; 2; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; 3; j++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\n\t//方式2 \n\t//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;\n\tint arr2[2][3] =\n\t&#123;\n\t\t&#123;1,2,3&#125;,\n\t\t&#123;4,5,6&#125;\n\t&#125;;\n\n\t//方式3\n\t//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;\n\tint arr3[2][3] = &#123; 1,2,3,4,5,6 &#125;; \n\n\t//方式4 \n\t//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;\n\tint arr4[][3] = &#123; 1,2,3,4,5,6 &#125;;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>\n</blockquote>\n<h4 id=\"532-二维数组数组名\"><a class=\"anchor\" href=\"#532-二维数组数组名\">#</a> 5.3.2 二维数组数组名</h4>\n<ul>\n<li>查看二维数组所占内存空间</li>\n<li>获取二维数组首地址</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//二维数组数组名\n\tint arr[2][3] =\n\t&#123;\n\t\t&#123;1,2,3&#125;,\n\t\t&#123;4,5,6&#125;\n\t&#125;;\n\n\tcout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;\n\n\t//地址\n\tcout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：二维数组名就是这个数组的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：对二维数组名进行 sizeof 时，可以获取整个二维数组占用的内存空间大小</p>\n</blockquote>\n<h4 id=\"533-二维数组应用案例\"><a class=\"anchor\" href=\"#533-二维数组应用案例\">#</a> <strong>5.3.3 二维数组应用案例</strong></h4>\n<p><strong>考试成绩统计：</strong></p>\n<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语文</th>\n<th>数学</th>\n<th>英语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td>100</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>90</td>\n<td>50</td>\n<td>100</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>60</td>\n<td>70</td>\n<td>80</td>\n</tr>\n</tbody>\n</table>\n<p><strong>参考答案：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint scores[3][3] =\n\t&#123;\n\t\t&#123;100,100,100&#125;,\n\t\t&#123;90,50,100&#125;,\n\t\t&#123;60,70,80&#125;,\n\t&#125;;\n\n\tstring names[3] = &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;\n\n\tfor (int i = 0; i &lt; 3; i++)\n\t&#123;\n\t\tint sum = 0;\n\t\tfor (int j = 0; j &lt; 3; j++)\n\t\t&#123;\n\t\t\tsum += scores[i][j];\n\t\t&#125;\n\t\tcout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"6-函数\"><a class=\"anchor\" href=\"#6-函数\">#</a> 6 函数</h2>\n<h3 id=\"61-概述\"><a class=\"anchor\" href=\"#61-概述\">#</a> 6.1 概述</h3>\n<p>** 作用：** 将一段经常使用的代码封装起来，减少重复代码</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h3 id=\"62-函数的定义\"><a class=\"anchor\" href=\"#62-函数的定义\">#</a> 6.2 函数的定义</h3>\n<p>函数的定义一般主要有 5 个步骤：</p>\n<p>1、返回值类型</p>\n<p>2、函数名</p>\n<p>3、参数表列</p>\n<p>4、函数体语句</p>\n<p>5、return 表达式</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">返回值类型 函数名 （参数列表）\n&#123;\n\n       函数体语句\n\n       return表达式\n\n&#125;\n</code></pre>\n<ul>\n<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>\n<li>函数名：给函数起个名称</li>\n<li>参数列表：使用该函数时，传入的数据</li>\n<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>\n<li>return 表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>\n</ul>\n<p>** 示例：** 定义一个加法函数，实现两个数相加</p>\n<pre><code class=\"language-C++\">//函数定义\nint add(int num1, int num2)\n&#123;\n\tint sum = num1 + num2;\n\treturn sum;\n&#125;\n</code></pre>\n<h3 id=\"63-函数的调用\"><a class=\"anchor\" href=\"#63-函数的调用\">#</a> 6.3 函数的调用</h3>\n<p>** 功能：** 使用定义好的函数</p>\n<p><strong>语法：</strong> <code> 函数名（参数）</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数定义\nint add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参\n&#123;\n\tint sum = num1 + num2;\n\treturn sum;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\t//调用add函数\n\tint sum = add(a, b);//调用时的a，b称为实际参数，简称实参\n\tcout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;\n\n\ta = 100;\n\tb = 100;\n\n\tsum = add(a, b);\n\tcout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>\n</blockquote>\n<h3 id=\"64-值传递\"><a class=\"anchor\" href=\"#64-值传递\">#</a> 6.4 值传递</h3>\n<ul>\n<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>\n<li>值传递时，<mark>如果形参发生，并不会影响实参</mark></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">void swap(int num1, int num2)\n&#123;\n\tcout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;\n\n\tint temp = num1;\n\tnum1 = num2;\n\tnum2 = temp;\n\n\tcout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;\n\n\t//return ; 当函数声明时候，不需要返回值，可以不写return\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\n\tswap(a, b);\n\n\tcout &lt;&lt; &quot;mian中的 a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;mian中的 b = &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结： 值传递时，形参是修饰不了实参的</p>\n</blockquote>\n<h3 id=\"65-函数的常见样式\"><a class=\"anchor\" href=\"#65-函数的常见样式\">#</a> <strong>6.5 函数的常见样式</strong></h3>\n<p>常见的函数样式有 4 种</p>\n<ol>\n<li>无参无返</li>\n<li>有参无返</li>\n<li>无参有返</li>\n<li>有参有返</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数常见样式\n//1、 无参无返\nvoid test01()\n&#123;\n\t//void a = 10; //无类型不可以创建变量,原因无法分配内存\n\tcout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl;\n\t//test01(); 函数调用\n&#125;\n\n//2、 有参无返\nvoid test02(int a)\n&#123;\n\tcout &lt;&lt; &quot;this is test02&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n&#125;\n\n//3、无参有返\nint test03()\n&#123;\n\tcout &lt;&lt; &quot;this is test03 &quot; &lt;&lt; endl;\n\treturn 10;\n&#125;\n\n//4、有参有返\nint test04(int a, int b)\n&#123;\n\tcout &lt;&lt; &quot;this is test04 &quot; &lt;&lt; endl;\n\tint sum = a + b;\n\treturn sum;\n&#125;\n</code></pre>\n<h3 id=\"66-函数的声明\"><a class=\"anchor\" href=\"#66-函数的声明\">#</a> 6.6 函数的声明</h3>\n<p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<ul>\n<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//声明可以多次，定义只能一次\n//声明\nint max(int a, int b);\nint max(int a, int b);\n//定义\nint max(int a, int b)\n&#123;\n\treturn a &gt; b ? a : b;\n&#125;\n\nint main() &#123;\n\n\tint a = 100;\n\tint b = 200;\n\n\tcout &lt;&lt; max(a, b) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"67-函数的分文件编写\"><a class=\"anchor\" href=\"#67-函数的分文件编写\">#</a> 6.7 函数的分文件编写</h3>\n<p>** 作用：** 让代码结构更加清晰</p>\n<p>函数分文件编写一般有 4 个步骤</p>\n<ol>\n<li>创建后缀名为.h 的头文件</li>\n<li>创建后缀名为.cpp 的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//swap.h文件\n#include&lt;iostream&gt;\nusing namespace std;\n\n//实现两个数字交换的函数声明\nvoid swap(int a, int b);\n\n</code></pre>\n<pre><code class=\"language-C++\">//swap.cpp文件\n#include &quot;swap.h&quot;\n\nvoid swap(int a, int b)\n&#123;\n\tint temp = a;\n\ta = b;\n\tb = temp;\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n&#125;\n</code></pre>\n<pre><code class=\"language-C++\">//main函数文件\n#include &quot;swap.h&quot;\nint main() &#123;\n\n\tint a = 100;\n\tint b = 200;\n\tswap(a, b);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<h2 id=\"7-指针\"><a class=\"anchor\" href=\"#7-指针\">#</a> 7 指针</h2>\n<h3 id=\"71-指针的基本概念\"><a class=\"anchor\" href=\"#71-指针的基本概念\">#</a> 7.1 指针的基本概念</h3>\n<p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>\n<ul>\n<li>内存编号是从 0 开始记录的，一般用十六进制数字表示</li>\n<li>可以利用指针变量保存地址</li>\n</ul>\n<h3 id=\"72-指针变量的定义和使用\"><a class=\"anchor\" href=\"#72-指针变量的定义和使用\">#</a> 7.2 指针变量的定义和使用</h3>\n<p>指针变量定义语法：  <code>数据类型 * 变量名；</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//1、指针的定义\n\tint a = 10; //定义整型变量a\n\t\n\t//指针定义语法： 数据类型 * 变量名 ;\n\tint * p;\n\n\t//指针变量赋值\n\tp = &amp;a; //指针指向变量a的地址\n\tcout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址\n\tcout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p\n\n\t//2、指针的使用\n\t//通过*操作指针变量指向的内存\n\tcout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>指针变量和普通变量的区别</p>\n<ul>\n<li>普通变量存放的是数据，指针变量存放的是地址</li>\n<li>指针变量可以通过 &quot;*&quot; 操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>\n</ul>\n<blockquote>\n<p>总结 1： 我们可以通过 &amp; 符号 获取变量的地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：利用指针可以记录地址</p>\n</blockquote>\n<blockquote>\n<p>总结 3：对指针变量解引用，可以操作指针指向的内存</p>\n</blockquote>\n<h3 id=\"73-指针所占内存空间\"><a class=\"anchor\" href=\"#73-指针所占内存空间\">#</a> 7.3 指针所占内存空间</h3>\n<p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint a = 10;\n\n\tint * p;\n\tp = &amp;a; //指针指向数据a的地址\n\n\tcout &lt;&lt; *p &lt;&lt; endl; //* 解引用\n\tcout &lt;&lt; sizeof(p) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(char *) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(float *) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(double *) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：所有指针类型在 32 位操作系统下是 4 个字节</p>\n</blockquote>\n<h3 id=\"74-空指针和野指针\"><a class=\"anchor\" href=\"#74-空指针和野指针\">#</a> 7.4 空指针和野指针</h3>\n<p><strong>空指针</strong>：指针变量指向内存中编号为 0 的空间</p>\n<p>** 用途：** 初始化指针变量</p>\n<p>** 注意：** 空指针指向的内存是不可以访问的</p>\n<p><strong>示例 1：空指针</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//指针变量p指向内存地址编号为0的空间\n\tint * p = NULL;\n\n\t//访问空指针报错 \n\t//内存编号0 ~255为系统占用内存，不允许用户访问\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<p><strong>示例 2：野指针</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\t//指针变量p指向内存地址编号为0x1100的空间\n\tint * p = (int *)0x1100;\n\n\t//访问野指针报错 \n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n</blockquote>\n<h3 id=\"75-const修饰指针\"><a class=\"anchor\" href=\"#75-const修饰指针\">#</a> 7.5 const 修饰指针</h3>\n<p>const 修饰指针有三种情况</p>\n<ol>\n<li>const 修饰指针   --- 常量指针</li>\n<li>const 修饰常量   --- 指针常量</li>\n<li>const 即修饰指针，又修饰常量</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\n\t//const修饰的是指针，指针指向可以改，指针指向的值不可以更改\n\tconst int * p1 = &amp;a; \n\tp1 = &amp;b; //正确\n\t//*p1 = 100;  报错\n\t\n\n\t//const修饰的是常量，指针指向不可以改，指针指向的值可以更改\n\tint * const p2 = &amp;a;\n\t//p2 = &amp;b; //错误\n\t*p2 = 100; //正确\n\n    //const既修饰指针又修饰常量\n\tconst int * const p3 = &amp;a;\n\t//p3 = &amp;b; //错误\n\t//*p3 = 100; //错误\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>技巧：看 const 右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h3 id=\"76-指针和数组\"><a class=\"anchor\" href=\"#76-指针和数组\">#</a> 7.6 指针和数组</h3>\n<p>** 作用：** 利用指针访问数组中元素</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tint arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;\n\n\tint * p = arr;  //指向数组的指针\n\n\tcout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\t//利用指针遍历数组\n\t\tcout &lt;&lt; *p &lt;&lt; endl;\n\t\tp++;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"77-指针和函数\"><a class=\"anchor\" href=\"#77-指针和函数\">#</a> 7.7 指针和函数</h3>\n<p>** 作用：** 利用指针作函数参数，可以修改实参的值</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//值传递\nvoid swap1(int a ,int b)\n&#123;\n\tint temp = a;\n\ta = b; \n\tb = temp;\n&#125;\n//地址传递\nvoid swap2(int * p1, int *p2)\n&#123;\n\tint temp = *p1;\n\t*p1 = *p2;\n\t*p2 = temp;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\tswap1(a, b); // 值传递不会改变实参\n\n\tswap2(&amp;a, &amp;b); //地址传递会改变实参\n\n\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n</blockquote>\n<h3 id=\"78-指针-数组-函数\"><a class=\"anchor\" href=\"#78-指针-数组-函数\">#</a> 7.8 指针、数组、函数</h3>\n<p>** 案例描述：** 封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n<p>例如数组：int arr [10] = { 4,3,6,9,1,2,10,8,7,5 };</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">//冒泡排序函数\nvoid bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]\n&#123;\n\tfor (int i = 0; i &lt; len - 1; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; len - 1 - i; j++)\n\t\t&#123;\n\t\t\tif (arr[j] &gt; arr[j + 1])\n\t\t\t&#123;\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n\n//打印数组函数\nvoid printArray(int arr[], int len)\n&#123;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tint arr[10] = &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;\n\tint len = sizeof(arr) / sizeof(int);\n\n\tbubbleSort(arr, len);\n\n\tprintArray(arr, len);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>\n</blockquote>\n<h2 id=\"8-结构体\"><a class=\"anchor\" href=\"#8-结构体\">#</a> 8 结构体</h2>\n<h3 id=\"81-结构体基本概念\"><a class=\"anchor\" href=\"#81-结构体基本概念\">#</a> 8.1 结构体基本概念</h3>\n<p>结构体属于用户<mark>自定义的数据类型</mark>，允许用户存储不同的数据类型</p>\n<h3 id=\"82-结构体定义和使用\"><a class=\"anchor\" href=\"#82-结构体定义和使用\">#</a> 8.2 结构体定义和使用</h3>\n<p><strong>语法：</strong> <code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>\n<p>通过结构体创建变量的方式有三种：</p>\n<ul>\n<li>struct 结构体名 变量名</li>\n<li 成员1值=\"\" ，=\"\" 成员2值...=\"\">struct 结构体名 变量名 =</li>\n<li>定义结构体时顺便创建变量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;stu3; //结构体变量创建方式3 \n\n\nint main() &#123;\n\n\t//结构体变量创建方式1\n\tstruct student stu1; //struct 关键字可以省略\n\n\tstu1.name = &quot;张三&quot;;\n\tstu1.age = 18;\n\tstu1.score = 100;\n\t\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;\n\n\t//结构体变量创建方式2\n\tstruct student stu2 = &#123; &quot;李四&quot;,19,60 &#125;;\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;\n\n\n\tstu3.name = &quot;王五&quot;;\n\tstu3.age = 18;\n\tstu3.score = 80;\n\t\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：定义结构体时的关键字是 struct，不可省略</p>\n</blockquote>\n<blockquote>\n<p>总结 2：创建结构体变量时，关键字 struct 可以省略</p>\n</blockquote>\n<blockquote>\n<p>总结 3：结构体变量利用操作符 ''.''  访问成员</p>\n</blockquote>\n<h3 id=\"83-结构体数组\"><a class=\"anchor\" href=\"#83-结构体数组\">#</a> 8.3 结构体数组</h3>\n<p>** 作用：** 将自定义的结构体放入到数组中方便维护</p>\n<p><strong>语法：</strong> <code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;\n\nint main() &#123;\n\t\n\t//结构体数组\n\tstruct student arr[3]=\n\t&#123;\n\t\t&#123;&quot;张三&quot;,18,80 &#125;,\n\t\t&#123;&quot;李四&quot;,19,60 &#125;,\n\t\t&#123;&quot;王五&quot;,20,70 &#125;\n\t&#125;;\n\n\tfor (int i = 0; i &lt; 3; i++)\n\t&#123;\n\t\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"84-结构体指针\"><a class=\"anchor\" href=\"#84-结构体指针\">#</a> 8.4 结构体指针</h3>\n<p>** 作用：** 通过指针访问结构体中的成员</p>\n<ul>\n<li>利用操作符  <code>-&gt; </code> 可以通过结构体指针访问结构体属性</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n\nint main() &#123;\n\t\n\tstruct student stu = &#123; &quot;张三&quot;,18,100, &#125;;\n\t\n\tstruct student * p = &amp;stu;\n\t\n\tp-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>\n</blockquote>\n<h3 id=\"85-结构体嵌套结构体\"><a class=\"anchor\" href=\"#85-结构体嵌套结构体\">#</a> 8.5 结构体嵌套结构体</h3>\n<p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>\n<p>** 例如：** 每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//教师结构体定义\nstruct teacher\n&#123;\n    //成员列表\n\tint id; //职工编号\n\tstring name;  //教师姓名\n\tint age;   //教师年龄\n\tstruct student stu; //子结构体 学生\n&#125;;\n\n\nint main() &#123;\n\n\tstruct teacher t1;\n\tt1.id = 10000;\n\tt1.name = &quot;老王&quot;;\n\tt1.age = 40;\n\n\tt1.stu.name = &quot;张三&quot;;\n\tt1.stu.age = 18;\n\tt1.stu.score = 100;\n\n\tcout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;\n\t\n\tcout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>\n<h3 id=\"86-结构体做函数参数\"><a class=\"anchor\" href=\"#86-结构体做函数参数\">#</a> 8.6 结构体做函数参数</h3>\n<p>** 作用：** 将结构体作为参数向函数中传递</p>\n<p>传递方式有两种：</p>\n<ul>\n<li>值传递</li>\n<li>地址传递</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//值传递\nvoid printStudent(student stu )\n&#123;\n\tstu.age = 28;\n\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n&#125;\n\n//地址传递\nvoid printStudent2(student *stu)\n&#123;\n\tstu-&gt;age = 28;\n\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tstudent stu = &#123; &quot;张三&quot;,18,100&#125;;\n\t//值传递\n\tprintStudent(stu);\n\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n\n\tcout &lt;&lt; endl;\n\n\t//地址传递\n\tprintStudent2(&amp;stu);\n\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>\n</blockquote>\n<h3 id=\"87-结构体中-const使用场景\"><a class=\"anchor\" href=\"#87-结构体中-const使用场景\">#</a> 8.7 结构体中 const 使用场景</h3>\n<p>** 作用：** 用 const 来防止误操作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//const使用场景\nvoid printStudent(const student *stu) //加const防止函数体中的误操作\n&#123;\n\t//stu-&gt;age = 100; //操作失败，因为加了const修饰\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;\n\n&#125;\n\nint main() &#123;\n\n\tstudent stu = &#123; &quot;张三&quot;,18,100 &#125;;\n\n\tprintStudent(&amp;stu);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"88-结构体案例\"><a class=\"anchor\" href=\"#88-结构体案例\">#</a> 8.8 结构体案例</h3>\n<h4 id=\"881-案例1\"><a class=\"anchor\" href=\"#881-案例1\">#</a> 8.8.1 案例 1</h4>\n<p><strong>案例描述：</strong></p>\n<p>学校正在做毕设项目，每名老师带领 5 个学生，总共有 3 名老师，需求如下</p>\n<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放 5 名学生的数组作为成员</p>\n<p>学生的成员有姓名、考试分数，创建数组存放 3 名老师，通过函数给每个老师及所带的学生赋值</p>\n<p>最终打印出老师数据以及老师所带的学生数据。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">struct Student\n&#123;\n\tstring name;\n\tint score;\n&#125;;\nstruct Teacher\n&#123;\n\tstring name;\n\tStudent sArray[5];\n&#125;;\n\nvoid allocateSpace(Teacher tArray[] , int len)\n&#123;\n\tstring tName = &quot;教师&quot;;\n\tstring sName = &quot;学生&quot;;\n\tstring nameSeed = &quot;ABCDE&quot;;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\ttArray[i].name = tName + nameSeed[i];\n\t\t\n\t\tfor (int j = 0; j &lt; 5; j++)\n\t\t&#123;\n\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];\n\t\t\ttArray[i].sArray[j].score = rand() % 61 + 40;\n\t\t&#125;\n\t&#125;\n&#125;\n\nvoid printTeachers(Teacher tArray[], int len)\n&#123;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\tcout &lt;&lt; tArray[i].name &lt;&lt; endl;\n\t\tfor (int j = 0; j &lt; 5; j++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;\\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;\n\t\t&#125;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tsrand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;\n\n\tTeacher tArray[3]; //老师数组\n\n\tint len = sizeof(tArray) / sizeof(Teacher);\n\n\tallocateSpace(tArray, len); //创建数据\n\n\tprintTeachers(tArray, len); //打印数据\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"882-案例2\"><a class=\"anchor\" href=\"#882-案例2\">#</a> 8.8.2 案例 2</h4>\n<p><strong>案例描述：</strong></p>\n<p>设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放 5 名英雄。</p>\n<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>\n<p>五名英雄信息如下：</p>\n<pre><code class=\"language-C++\">\t\t&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,\n\t\t&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,\n\t\t&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,\n\t\t&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,\n\t\t&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//英雄结构体\nstruct hero\n&#123;\n\tstring name;\n\tint age;\n\tstring sex;\n&#125;;\n//冒泡排序\nvoid bubbleSort(hero arr[] , int len)\n&#123;\n\tfor (int i = 0; i &lt; len - 1; i++)\n\t&#123;\n\t\tfor (int j = 0; j &lt; len - 1 - i; j++)\n\t\t&#123;\n\t\t\tif (arr[j].age &gt; arr[j + 1].age)\n\t\t\t&#123;\n\t\t\t\thero temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n//打印数组\nvoid printHeros(hero arr[], int len)\n&#123;\n\tfor (int i = 0; i &lt; len; i++)\n\t&#123;\n\t\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\tstruct hero arr[5] =\n\t&#123;\n\t\t&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,\n\t\t&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,\n\t\t&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,\n\t\t&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,\n\t\t&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,\n\t&#125;;\n\n\tint len = sizeof(arr) / sizeof(hero); //获取数组元素个数\n\n\tbubbleSort(arr, len); //排序\n\n\tprintHeros(arr, len); //打印\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "编程基础",
                "C++"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/26/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/PS4%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/",
            "url": "https://zengshengli775.gitee.io/2021/08/26/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/PS4%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/",
            "title": "PS4代理上网",
            "date_published": "2021-08-25T16:00:00.000Z",
            "content_html": "<h2 id=\"ps4代理上网\"><a class=\"anchor\" href=\"#ps4代理上网\">#</a> PS4 代理上网</h2>\n<p>gitee 净网，有敏感字，无法部署，请转至 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbWFpbG5jdWVkdWNuLW15LnNoYXJlcG9pbnQuY29tLzp0Oi9nL3BlcnNvbmFsLzYxMDgxMTkwOTRfZW1haWxfbmN1X2VkdV9jbi9FYnl0Y1AxTXNNaEdrMnB3OHMzMWFRd0JONENvS2VOa0h4ZFowV2hGLUhMSVVnP2U9Y1ZaNUxK\">onedriver</span> 下载浏览。</p>\n<p>\n\n\t<div class=\"row\">\n\t\t<iframe src=\"https://drive.google.com/file/d/1UO7t5vQ5WQmWkHtGrn_XZXOT0O7PfLBY/preview\" style=\"width:100%; height:550px\"></iframe>\n\t</div>\n\n\n</p>\n",
            "tags": [
                "实用技巧",
                "PS4"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/",
            "url": "https://zengshengli775.gitee.io/2021/08/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/",
            "title": "机器学习基础",
            "date_published": "2021-08-25T16:00:00.000Z",
            "content_html": "<h3 id=\"李宏毅机器学习笔记\"><a class=\"anchor\" href=\"#李宏毅机器学习笔记\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXRhd2hhbGVjaGluYS5naXRodWIuaW8vbGVlbWwtbm90ZXMvIy8=\">李宏毅机器学习笔记</span></h3>\n<h3 id=\"黑马程序员3天快速入门python机器学习\"><a class=\"anchor\" href=\"#黑马程序员3天快速入门python机器学习\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW50NDExcjd0ag==\">黑马程序员 3 天快速入门 python 机器学习</span></h3>\n<h3 id=\"黑马-3天快速入门-python机器学习-html\"><a class=\"anchor\" href=\"#黑马-3天快速入门-python机器学习-html\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbWFpbG5jdWVkdWNuLW15LnNoYXJlcG9pbnQuY29tLzpmOi9nL3BlcnNvbmFsLzYxMDgxMTkwOTRfZW1haWxfbmN1X2VkdV9jbi9Fc0tseHBxRmhYSkRtNElVMFJiYld6MEJ6WFFqb2ZvZUNKOTZXTEpKQThmUm1BP2U9bjFTaDV1\">[黑马] 3 天快速入门 python 机器学习 - html</span></h3>\n<h2 id=\"1机器学习概述\"><a class=\"anchor\" href=\"#1机器学习概述\">#</a> 1. 机器学习概述</h2>\n<h3 id=\"11什么是机器学习\"><a class=\"anchor\" href=\"#11什么是机器学习\">#</a> 1.1 什么是机器学习</h3>\n<p>机器学习是从<strong>数据</strong>中<strong>自动分析获得模型</strong>，并利用<strong>模型</strong>对未知数据进行预测。</p>\n<p>数据集构成：特征值 + 目标值</p>\n<h3 id=\"12机器学习算法分类\"><a class=\"anchor\" href=\"#12机器学习算法分类\">#</a> 1.2 机器学习算法分类</h3>\n<ul>\n<li>监督学习 (supervised learning)（预测）\n<ul>\n<li>定义：输入数据是由输入特征值和目标值所组成。函数的输出可以是一个连续的值 (称为回归），或是输出是有限个离散值（称作分类）。</li>\n<li><strong>分类 k - 近邻算法、贝叶斯分类、决策树与随机森林、逻辑回归、神经网络</strong></li>\n<li><strong>回归 线性回归、岭回归</strong></li>\n</ul>\n</li>\n<li>无监督学习 (unsupervised learning)\n<ul>\n<li>定义：输入数据是由输入特征值所组成。</li>\n<li><strong>聚类 k-means</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13开发流程\"><a class=\"anchor\" href=\"#13开发流程\">#</a> 1.3 开发流程</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011532152.jpg\" alt=\"开发流程.png\" /></p>\n<h2 id=\"2特征工程\"><a class=\"anchor\" href=\"#2特征工程\">#</a> 2. 特征工程</h2>\n<h3 id=\"21数据集\"><a class=\"anchor\" href=\"#21数据集\">#</a> 2.1 数据集</h3>\n<h4 id=\"211-可用数据集\"><a class=\"anchor\" href=\"#211-可用数据集\">#</a> 2.1.1 可用数据集</h4>\n<p>​\t\tKaggle 网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9kYXRhc2V0cw==\">https://www.kaggle.com/datasets</span></p>\n<p>​\t\tUCI 数据集网址： <span class=\"exturl\" data-url=\"aHR0cDovL2FyY2hpdmUuaWNzLnVjaS5lZHUvbWwv\">http://archive.ics.uci.edu/ml/</span></p>\n<p>​\t\tscikit-learn 网址：<span class=\"exturl\" data-url=\"aHR0cDovL3NjaWtpdC1sZWFybi5vcmcvc3RhYmxlL2RhdGFzZXRzL2luZGV4Lmh0bWw=\">http://scikit-learn.org/stable/datasets/index.html#datasets</span></p>\n<h4 id=\"212-sklearn\"><a class=\"anchor\" href=\"#212-sklearn\">#</a> 2.1.2 sklearn</h4>\n<ul>\n<li>sklearn.datasets 加载获取流行数据集\n<ul>\n<li>datasets.load_*()\t获取小规模数据集，数据包含在 datasets 里</li>\n<li>datasets.fetch_*(data_home=None)\t获取大规模数据集，需要从网络上下载，函数的第一个参数是 data_home，表示数据集下载的目录，默认是～/scikit_learn_data/</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_iris</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 获取鸢尾花数据集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris <span class=\"token operator\">=</span> load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸢尾花数据集的返回值：\\n\"</span><span class=\"token punctuation\">,</span> iris<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 返回值是一个继承自字典的 Bench</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸢尾花的特征值:\\n\"</span><span class=\"token punctuation\">,</span> iris<span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸢尾花的目标值：\\n\"</span><span class=\"token punctuation\">,</span> iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸢尾花特征的名字：\\n\"</span><span class=\"token punctuation\">,</span> iris<span class=\"token punctuation\">.</span>feature_names<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸢尾花目标值的名字：\\n\"</span><span class=\"token punctuation\">,</span> iris<span class=\"token punctuation\">.</span>target_names<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸢尾花的描述：\\n\"</span><span class=\"token punctuation\">,</span> iris<span class=\"token punctuation\">.</span>DESCR<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"22-特征工程介绍\"><a class=\"anchor\" href=\"#22-特征工程介绍\">#</a> 2.2 特征工程介绍</h3>\n<p>​\t特征工程是使用<strong>专业背景知识和技巧处理数据</strong>，<strong>使得特征能在机器学习算法上发挥更好的作用的过程</strong>。</p>\n<p><strong>特征工程包含内容</strong></p>\n<ul>\n<li>特征抽取</li>\n<li>特征预处理</li>\n<li>特征降维</li>\n</ul>\n<h3 id=\"23-特征抽取\"><a class=\"anchor\" href=\"#23-特征抽取\">#</a> 2.3 特征抽取</h3>\n<p>将任意数据（如文本或图像）转换为可用于机器学习的数字特征</p>\n<ul>\n<li>字典特征提取 (特征离散化)</li>\n<li>文本特征提取</li>\n<li>图像特征提取（深度学习将介绍）</li>\n</ul>\n<h4 id=\"232-字典特征提取\"><a class=\"anchor\" href=\"#232-字典特征提取\">#</a> 2.3.2 字典特征提取</h4>\n<p><strong>作用：对字典数据进行特征值化</strong></p>\n<p><strong>对于特征当中存在类别信息的我们都会做 one-hot 编码处理</strong></p>\n<ul>\n<li>sklearn.feature_extraction.DictVectorizer(sparse=True,…)\n<ul>\n<li>DictVectorizer.fit_transform (X) X: 字典或者包含字典的迭代器返回值：返回 sparse 矩阵</li>\n<li>DictVectorizer.inverse_transform (X) X:array 数组或者 sparse 矩阵 返回值：转换之前数据格式</li>\n<li>DictVectorizer.get_feature_names () 返回类别名称</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>feature_extraction <span class=\"token keyword\">import</span> DictVectorizer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dict_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    对字典类型的数据进行特征抽取</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'北京'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'temperature'</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'上海'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'temperature'</span><span class=\"token punctuation\">:</span><span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'深圳'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'temperature'</span><span class=\"token punctuation\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 1、实例化一个转换器类</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    transfer <span class=\"token operator\">=</span> DictVectorizer<span class=\"token punctuation\">(</span>sparse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">#sparse=False 参数，one-hot 编码处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    data <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回的结果:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 打印特征名字</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"特征名字：\\n\"</span><span class=\"token punctuation\">,</span> transfer<span class=\"token punctuation\">.</span>get_feature_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h4 id=\"233-文本特征提取\"><a class=\"anchor\" href=\"#233-文本特征提取\">#</a> 2.3.3 文本特征提取</h4>\n<p><strong>作用：对文本数据进行特征值化</strong></p>\n<h5 id=\"2331sklearnfeature_extractiontextcountvectorizerstop_words返回词频矩阵统计每个样本特征词出现的个数\"><a class=\"anchor\" href=\"#2331sklearnfeature_extractiontextcountvectorizerstop_words返回词频矩阵统计每个样本特征词出现的个数\">#</a> 2.3.3.1.<strong>sklearn.feature_extraction.text.CountVectorizer(stop_words=[])</strong>\t<strong>返回词频矩阵，统计每个样本特征词出现的个数</strong>。</h5>\n<ul>\n<li>\n<p>CountVectorizer.fit_transform (X) X: 文本或者包含文本字符串的可迭代对象 返回值：返回 sparse 矩阵</p>\n</li>\n<li>\n<p>CountVectorizer.inverse_transform (X) X:array 数组或者 sparse 矩阵 返回值：转换之前数据格</p>\n</li>\n<li>\n<p>CountVectorizer.get_feature_names () 返回值：单词列表</p>\n<h6 id=\"23311对英文进行特征提取\"><a class=\"anchor\" href=\"#23311对英文进行特征提取\">#</a> 2.3.3.1.1<strong> 对英文进行特征提取</strong></h6>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>feature_extraction<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> CountVectorizer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">text_count_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    对文本进行特征抽取，countvetorizer</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"life is short,i like like python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"life is too long,i dislike python\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 1、实例化一个转换器类</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># transfer = CountVectorizer(sparse=False)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    transfer <span class=\"token operator\">=</span> CountVectorizer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    data <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文本特征抽取的结果：\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>toarray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">#调用 fit_transform 方法输入数据并转换 （注意返回格式，</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回特征名字：\\n\"</span><span class=\"token punctuation\">,</span> transfer<span class=\"token punctuation\">.</span>get_feature_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h6 id=\"23312对中文进行特征提取\"><a class=\"anchor\" href=\"#23312对中文进行特征提取\">#</a> 2.3.3.1.2<strong> 对中文进行特征提取</strong></h6>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>feature_extraction<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> CountVectorizer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> jieba</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">cut_word</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    对中文进行分词</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \"我爱北京天安门\"————>\"我 爱 北京 天安门\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    :param text:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    :return: text</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 用结巴对中文字符串进行分词</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    text <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> text</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">text_chinese_count_demo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    对中文进行特征抽取</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"一种还是一种今天很残酷，明天更残酷，后天很美好，但绝对大部分是死在明天晚上，所以每个人不要放弃今天。\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token string\">\"我们看到的从很远星系来的光是在几百万年之前发出的，这样当我们看到宇宙时，我们是在看它的过去。\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token string\">\"如果只用一种方式了解某样事物，你就不会真正了解它。了解事物真正含义的秘密取决于如何将其与我们所了解的事物相联系。\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 将原始数据转换成分好词的形式</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    text_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> sent <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        text_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cut_word<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\"># 1、实例化一个转换器类</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># transfer = CountVectorizer(sparse=False)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    transfer <span class=\"token operator\">=</span> CountVectorizer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    data <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>text_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文本特征抽取的结果：\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>toarray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回特征名字：\\n\"</span><span class=\"token punctuation\">,</span> transfer<span class=\"token punctuation\">.</span>get_feature_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h5 id=\"2332sklearnfeature_extractiontexttfidfvectorizer用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度\"><a class=\"anchor\" href=\"#2332sklearnfeature_extractiontexttfidfvectorizer用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度\">#</a> 2.3.3.2.<strong>sklearn.feature_extraction.text.TfidfVectorizer</strong>\t<strong>用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。</strong></h5>\n<ul>\n<li>词频（term frequency，tf）指的是某一个给定的词语在该文件中出现的频率</li>\n<li>逆向文档频率（inverse document frequency，idf）是一个词语普遍重要性的度量。某一特定词语的 idf，可以<strong>由总文件数目除以包含该词语之文件的数目，再将得到的商取以 10 为底的对数得到</strong></li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011532964.jpg\" alt=\"tfidf公式.png\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>feature_extraction<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> TfidfVectorizer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> jieba</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">cut_word</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    对中文进行分词</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \"我爱北京天安门\"————>\"我 爱 北京 天安门\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    :param text:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    :return: text</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 用结巴对中文字符串进行分词</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    text <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> text</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">text_chinese_tfidf_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    对中文进行特征抽取</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"一种还是一种今天很残酷，明天更残酷，后天很美好，但绝对大部分是死在明天晚上，所以每个人不要放弃今天。\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token string\">\"我们看到的从很远星系来的光是在几百万年之前发出的，这样当我们看到宇宙时，我们是在看它的过去。\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token string\">\"如果只用一种方式了解某样事物，你就不会真正了解它。了解事物真正含义的秘密取决于如何将其与我们所了解的事物相联系。\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 将原始数据转换成分好词的形式</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    text_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> sent <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        text_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cut_word<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\"># 1、实例化一个转换器类</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># transfer = CountVectorizer(sparse=False)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    transfer <span class=\"token operator\">=</span> TfidfVectorizer<span class=\"token punctuation\">(</span>stop_words<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'一种'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'不会'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'不要'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    data <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>text_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文本特征抽取的结果：\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>toarray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回特征名字：\\n\"</span><span class=\"token punctuation\">,</span> transfer<span class=\"token punctuation\">.</span>get_feature_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h3 id=\"24-特征预处理\"><a class=\"anchor\" href=\"#24-特征预处理\">#</a> 2.4 特征预处理</h3>\n<p>通过<strong>一些转换函数</strong>将特征数据<strong>转换成更加适合算法模型</strong>的特征数据过程</p>\n<ul>\n<li>数值型数据的无量纲化：\n<ul>\n<li>归一化</li>\n<li>标准化</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"241归一化\"><a class=\"anchor\" href=\"#241归一化\">#</a> 2.4.1 归一化</h4>\n<p>通过对原始数据进行变换把数据映射到 (默认为 [0,1]) 之间</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011532546.jpg\" alt=\"image.png\" /></p>\n<blockquote>\n<p>作用于每一列，max 为一列的最大值，min 为一列的最小值，那么 X’’为最终结果，mx，mi 分别为指定区间值默认 mx 为 1,mi 为 0</p>\n</blockquote>\n<ul>\n<li>sklearn.preprocessing.MinMaxScaler (feature_range=(0,1)… )\n<ul>\n<li>MinMaxScalar.fit_transform(X)\n<ul>\n<li>X:numpy array 格式的数据 [n_samples,n_features]</li>\n</ul>\n</li>\n<li>返回值：转换后的形状相同的 array</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> MinMaxScaler</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">minmax_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    归一化演示</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"dating.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 1、实例化一个转换器类</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    transfer <span class=\"token operator\">=</span> MinMaxScaler<span class=\"token punctuation\">(</span>feature_range<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    data <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'milage'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Liters'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Consumtime'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最小值最大值归一化处理的结果：\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><p><strong>归一化鲁棒性较差，只适合传统精确小数据场景。</strong></p>\n<h4 id=\"242标准化\"><a class=\"anchor\" href=\"#242标准化\">#</a> 2.4.2 标准化</h4>\n<p>通过对原始数据进行变换把数据变换到均值为 0, 标准差为 1 范围内</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011533098.jpg\" alt=\"image.png\" /></p>\n<p>作用于每一列，mean 为平均值，σ 为标准差</p>\n<ul>\n<li>sklearn.preprocessing.StandardScaler( )\n<ul>\n<li>处理之后每列来说所有数据都聚集在均值 0 附近标准差差为 1</li>\n<li>StandardScaler.fit_transform(X)\n<ul>\n<li>X:numpy array 格式的数据 [n_samples,n_features]</li>\n</ul>\n</li>\n<li>返回值：转换后的形状相同的 array</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> StandardScaler</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">stand_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    标准化演示</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"dating.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 1、实例化一个转换器类</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    transfer <span class=\"token operator\">=</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    data <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'milage'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Liters'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Consumtime'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标准化的结果:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"每一列特征的平均值：\\n\"</span><span class=\"token punctuation\">,</span> transfer<span class=\"token punctuation\">.</span>mean_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"每一列特征的方差：\\n\"</span><span class=\"token punctuation\">,</span> transfer<span class=\"token punctuation\">.</span>var_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><p>在已有样本足够多的情况下比较稳定，适合现代嘈杂大数据场景。</p>\n<h3 id=\"25-特征降维\"><a class=\"anchor\" href=\"#25-特征降维\">#</a> 2.5 特征降维</h3>\n<h4 id=\"251-降维\"><a class=\"anchor\" href=\"#251-降维\">#</a> 2.5.1 降维</h4>\n<p><strong>降维</strong>是指在某些限定条件下，<strong>降低随机变量 (特征) 个数</strong>，得到<strong>一组 “不相关” 主变量</strong>的过程</p>\n<ul>\n<li><strong>特征选择</strong></li>\n<li><strong>主成分分析</strong></li>\n</ul>\n<h4 id=\"252特征选择\"><a class=\"anchor\" href=\"#252特征选择\">#</a> 2.5.2 特征选择</h4>\n<p>数据中包含<strong>冗余或无关变量（或称特征、属性、指标等）</strong>，旨在从<strong>原有特征中找出主要特征</strong>。</p>\n<h5 id=\"2521方法\"><a class=\"anchor\" href=\"#2521方法\">#</a> 2.5.2.1 方法</h5>\n<ul>\n<li>Filter (过滤式)：主要探究特征本身特点、特征与特征和目标值之间关联\n<ul>\n<li><strong>方差选择法：低方差特征过滤</strong></li>\n<li><strong>相关系数</strong></li>\n</ul>\n</li>\n<li>Embedded (嵌入式)：算法自动选择特征（特征与目标值之间的关联）\n<ul>\n<li><strong>决策树：信息熵、信息增益</strong></li>\n<li><strong>正则化：L1、L2</strong></li>\n<li><strong>深度学习：卷积等</strong></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2522过滤式\"><a class=\"anchor\" href=\"#2522过滤式\">#</a> 2.5.2.2 过滤式</h5>\n<ul>\n<li>\n<p>特征方差小：某个特征大多样本的值比较相近</p>\n</li>\n<li>\n<p>特征方差大：某个特征很多样本的值都有差别</p>\n</li>\n<li>\n<p>sklearn.feature_selection.VarianceThreshold(threshold = 0.0)</p>\n<ul>\n<li>删除所有低方差特征</li>\n<li>Variance.fit_transform(X)\n<ul>\n<li>X:numpy array 格式的数据 [n_samples,n_features]</li>\n<li>返回值：训练集差异低于 threshold 的特征将被删除。默认值是保留所有非零方差特征，即删除所有样本中具有相同值的特征。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">variance_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    删除低方差特征——特征选择</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"factor_returns.csv\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 1、实例化一个转换器类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    transfer <span class=\"token operator\">=</span> VarianceThreshold<span class=\"token punctuation\">(</span>threshold<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    data <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除低方差特征的结果：\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形状：\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h4 id=\"253相关系数\"><a class=\"anchor\" href=\"#253相关系数\">#</a> 2.5.3 相关系数</h4>\n<p><strong>相关系数的值介于–1 与 + 1 之间，即–1≤ r ≤+1</strong>。其性质如下：</p>\n<ul>\n<li><strong>当 r&gt;0 时，表示两变量正相关，r&lt;0 时，两变量为负相关</strong></li>\n<li>当 | r|=1 时，表示两变量为完全相关，当 r=0 时，表示两变量间无相关关系</li>\n<li><strong>当 0&lt;|r|&lt;1 时，表示两变量存在一定程度的相关。且 | r | 越接近 1，两变量间线性关系越密切；|r | 越接近于 0，表示两变量的线性相关越弱</strong></li>\n<li><strong>一般可按三级划分：|r|&lt;0.4 为低度相关；0.4≤|r|&lt;0.7 为显著性相关；0.7≤|r|&lt;1 为高度线性相关</strong></li>\n</ul>\n<blockquote>\n<p>这个符号：|r | 为 r 的绝对值， |-5| = 5</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011533904.jpg\" alt=\"image.png\" /></p>\n<ul>\n<li>from scipy.stats import pearsonr\n<ul>\n<li>x : (N,) array_like</li>\n<li>y : (N,) array_like Returns: (Pearson’s correlation coefficient, p-value)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">import</span> pearsonr</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">pearsonr_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    相关系数计算</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"factor_returns.csv\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    factor <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pe_ratio'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pb_ratio'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'market_cap'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return_on_asset_net_profit'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'du_return_on_equity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ev'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token string\">'earnings_per_share'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'revenue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'total_expense'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\"指标%s与指标%s之间的相关性大小为%f\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factor<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pearsonr<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>factor<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>factor<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h3 id=\"26主成分分析pca\"><a class=\"anchor\" href=\"#26主成分分析pca\">#</a> 2.6 主成分分析 (PCA)</h3>\n<ul>\n<li>\n<p>定义：<strong>高维数据转化为低维数据的过程</strong>，在此过程中<strong>可能会舍弃原有数据、创造新的变量</strong></p>\n</li>\n<li>\n<p>作用：<strong>是数据维数压缩，尽可能降低原数据的维数（复杂度），损失少量信息。</strong></p>\n</li>\n<li>\n<p>应用：回归分析或者聚类分析当中</p>\n</li>\n<li>\n<p>sklearn.decomposition.PCA(n_components=None)</p>\n<ul>\n<li>将数据分解为较低维数空间</li>\n<li>n_components:\n<ul>\n<li><strong>小数：表示保留百分之多少的信息</strong></li>\n<li><strong>整数：减少到多少特征</strong></li>\n</ul>\n</li>\n<li>PCA.fit_transform (X) X:numpy array 格式的数据 [n_samples,n_features]</li>\n<li>返回值：转换后指定维度的 array</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>decomposition <span class=\"token keyword\">import</span> PCA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">pca_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    对数据进行PCA降维</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 1、实例化 PCA, 小数 —— 保留多少信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    transfer <span class=\"token operator\">=</span> PCA<span class=\"token punctuation\">(</span>n_components<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    data1 <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"保留90%的信息，降维结果为：\\n\"</span><span class=\"token punctuation\">,</span> data1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># 1、实例化 PCA, 整数 —— 指定降维到的维数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    transfer2 <span class=\"token operator\">=</span> PCA<span class=\"token punctuation\">(</span>n_components<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 2、调用 fit_transform</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    data2 <span class=\"token operator\">=</span> transfer2<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"降维到3维的结果：\\n\"</span><span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011533446.jpg\" alt=\"image.png\" /></p>\n<h2 id=\"3分类算法\"><a class=\"anchor\" href=\"#3分类算法\">#</a> 3. 分类算法</h2>\n<h3 id=\"31数据集介绍与划分\"><a class=\"anchor\" href=\"#31数据集介绍与划分\">#</a> 3.1 数据集介绍与划分</h3>\n<h4 id=\"数据集的划分\"><a class=\"anchor\" href=\"#数据集的划分\">#</a> 数据集的划分</h4>\n<p>机器学习一般的数据集会划分为两个部分：</p>\n<ul>\n<li>训练数据：用于训练，构建模型</li>\n<li>测试数据：在模型检验时使用，用于评估模型是否有效</li>\n</ul>\n<p>划分比例：</p>\n<ul>\n<li>训练集：70% 80% 75%</li>\n<li>测试集：30% 20% 30%</li>\n</ul>\n<h4 id=\"api\"><a class=\"anchor\" href=\"#api\">#</a> API</h4>\n<ul>\n<li>\n<p>sklearn.model_selection.train_test_split(</p>\n<p>arrays, *</p>\n<p>options)</p>\n<ul>\n<li>x 数据集的特征值</li>\n<li>y 数据集的标签值</li>\n<li>test_size 测试集的大小，一般为 float</li>\n<li>random_state 随机数种子，不同的种子会造成不同的随机采样结果。相同的种子采样结果相同。</li>\n<li>return ，测试集特征训练集特征值值，训练标签，测试标签 (默认随机取)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"sklearn数据集介绍\"><a class=\"anchor\" href=\"#sklearn数据集介绍\">#</a> sklearn 数据集介绍</h4>\n<h4 id=\"api-2\"><a class=\"anchor\" href=\"#api-2\">#</a> API</h4>\n<ul>\n<li>sklearn.datasets\n<ul>\n<li>加载获取流行数据集</li>\n<li>datasets.load_*()\n<ul>\n<li>获取小规模数据集，数据包含在 datasets 里</li>\n</ul>\n</li>\n<li>datasets.fetch_*(data_home=None)\n<ul>\n<li>获取大规模数据集，需要从网络上下载，函数的第一个参数是 data_home，表示数据集下载的目录，默认是～/scikit_learn_data/</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分类和回归数据集\"><a class=\"anchor\" href=\"#分类和回归数据集\">#</a> 分类和回归数据集</h4>\n<ul>\n<li>分类数据集</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011533830.jpg\" alt=\"image.png\" /></p>\n<ul>\n<li>sklearn.datasets.fetch_20newsgroups(data_home=None,subset=‘train’)\n<ul>\n<li>subset: 'train' 或者 'test','all'，可选，选择要加载的数据集。训练集的 “训练”，测试集的 “测试”，两者的 “全部”</li>\n</ul>\n</li>\n<li>回归数据集</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011533845.jpg\" alt=\"image.png\" /></p>\n<h4 id=\"返回类型\"><a class=\"anchor\" href=\"#返回类型\">#</a> 返回类型</h4>\n<ul>\n<li>\n<p>load</p>\n<p>和 fetch</p>\n<p>返回的数据类型 datasets.base.Bunch (字典格式)</p>\n<ul>\n<li>data：特征数据数组，是 [n_samples * n_features] 的二维 numpy.ndarray 数组</li>\n<li>target：标签数组，是 n_samples 的一维 numpy.ndarray 数组</li>\n<li>DESCR：数据描述</li>\n<li>feature_names：特征名，新闻数据，手写数字、回归数据集没有</li>\n<li>target_names：标签名</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"32sklearn转换器和估计器\"><a class=\"anchor\" href=\"#32sklearn转换器和估计器\">#</a> 3.2sklearn 转换器和估计器</h3>\n<h4 id=\"1转换器\"><a class=\"anchor\" href=\"#1转换器\">#</a> 1. 转换器</h4>\n<p>特征工程的步骤:</p>\n<ul>\n<li>1、实例化 (实例化的是一个转换器类 (Transformer))</li>\n<li>2、调用 fit_transform (对于文档建立分类词频矩阵，不能同时调用)</li>\n</ul>\n<p>我们把特征工程的接口称之为转换器，其中转换器调用有这么几种形式</p>\n<ul>\n<li>fit_transform</li>\n<li>fit</li>\n<li>transform</li>\n</ul>\n<p><strong>这几个方法之间的区别:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> StandardScaler</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> std1 <span class=\"token operator\">=</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> std1<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> std2 <span class=\"token operator\">=</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> std2<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> StandardScaler<span class=\"token punctuation\">(</span>copy<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> with_mean<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> with_std<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> std2<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>从中可以看出，fit_transform 的作用相当于 transform 加上 fit。但是为什么还要提供单独的 fit 呢，我们还是使用原来的 std2 来进行标准化看看</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> std2<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> std2<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"2估计器sklearn机器学习算法的实现\"><a class=\"anchor\" href=\"#2估计器sklearn机器学习算法的实现\">#</a> 2. 估计器 (sklearn 机器学习算法的实现)</h4>\n<p>在 sklearn 中，估计器 (estimator) 是一个重要的角色，是一类实现了算法的 API</p>\n<ul>\n<li>1、用于分类的估计器：\n<ul>\n<li>sklearn.neighbors k - 近邻算法</li>\n<li>sklearn.naive_bayes 贝叶斯</li>\n<li>sklearn.linear_model.LogisticRegression 逻辑回归</li>\n<li>sklearn.tree 决策树与随机森林</li>\n</ul>\n</li>\n<li>2、用于回归的估计器：\n<ul>\n<li>sklearn.linear_model.LinearRegression 线性回归</li>\n<li>sklearn.linear_model.Ridge 岭回归</li>\n</ul>\n</li>\n<li>3、用于无监督学习的估计器\n<ul>\n<li>sklearn.cluster.KMeans 聚类</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011534346.jpg\" alt=\"image.png\" /></p>\n<h3 id=\"33-k-近邻算法knn\"><a class=\"anchor\" href=\"#33-k-近邻算法knn\">#</a> 3.3 K - 近邻算法 (KNN)</h3>\n<h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>如果一个样本在特征空间中的<strong> k 个最相似 (即特征空间中最邻近) 的样本中的大多数属于某一个类别</strong>，则该样本也属于这个类别。</p>\n<blockquote>\n<p>来源：KNN 算法最早是由 Cover 和 Hart 提出的一种分类算法</p>\n</blockquote>\n<h4 id=\"距离公式\"><a class=\"anchor\" href=\"#距离公式\">#</a> 距离公式</h4>\n<p>两个样本的距离可以通过如下公式计算，又叫欧式距离</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011534200.jpg\" alt=\"image.png\" /></p>\n<h4 id=\"k-近邻算法api\"><a class=\"anchor\" href=\"#k-近邻算法api\">#</a> K - 近邻算法 API</h4>\n<ul>\n<li>sklearn.neighbors.KNeighborsClassifier(n_neighbors=5,algorithm='auto')\n<ul>\n<li>n_neighbors：int, 可选（默认 = 5），k_neighbors 查询默认使用的邻居数</li>\n<li>algorithm：{‘auto’，‘ball_tree’，‘kd_tree’，‘brute’}，可选用于计算最近邻居的算法：‘ball_tree’将会使用 BallTree，‘kd_tree’将使用 KDTree。‘auto’将尝试根据传递给 fit 方法的值来决定最合适的算法。 (不同实现方式影响效率)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"预测签到位置\"><a class=\"anchor\" href=\"#预测签到位置\">#</a> 预测签到位置</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011534376.jpg\" alt=\"image.png\" /></p>\n<p>数据介绍：将根据用户的位置，准确性和时间戳预测用户正在查看的业务。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>train<span class=\"token punctuation\">.</span>csv，test<span class=\"token punctuation\">.</span>csv </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>row_id：登记事件的ID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xy：坐标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>准确性：定位准确性 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>时间：时间戳</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>place_id：业务的ID，这是您预测的目标</pre></td></tr></table></figure><blockquote>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9uYXZvc2h0YS9ncmlkLWtubi9kYXRh\">https://www.kaggle.com/navoshta/grid-knn/data</span></p>\n</blockquote>\n<h4 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h4>\n<ul>\n<li>\n<p>对于数据做一些基本处理（这里所做的一些处理不一定达到很好的效果，我们只是简单尝试，有些特征我们可以根据一些特征选择的方式去做处理）</p>\n<ul>\n<li>\n<p>1、缩小数据集范围 DataFrame.query ()</p>\n</li>\n<li>\n<p>4、删除没用的日期数据 DataFrame.drop（可以选择保留）</p>\n</li>\n<li>\n<p>5、将签到位置少于 n 个用户的删除</p>\n<p>place_count = data.groupby('place_id').count()</p>\n<p>tf = place_count[place_count.row_id &gt; 3].reset_index()</p>\n<p>data = data[data['place_id'].isin(tf.place_id)]</p>\n</li>\n</ul>\n</li>\n<li>\n<p>分割数据集</p>\n</li>\n<li>\n<p>标准化处理</p>\n</li>\n<li>\n<p>k - 近邻预测</p>\n</li>\n</ul>\n<h4 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">knncls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    K近邻算法预测入住位置类别</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    :return:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 一、处理数据以及特征工程</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 1、读取收，缩小数据的范围</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/FBlocation/train.csv\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 数据逻辑筛选操作 df.query ()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">\"x > 1.0 &amp; x &lt; 1.25 &amp; y > 2.5 &amp; y &lt; 2.75\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 删除 time 这一列特征</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 删除入住次数少于三次位置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    place_count <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'place_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    tf <span class=\"token operator\">=</span> place_count<span class=\"token punctuation\">[</span>place_count<span class=\"token punctuation\">.</span>row_id <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>reset_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'place_id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isin<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>place_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># 3、取出特征值和目标值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    y <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'place_id'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\"># y = data[['place_id']]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    x <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'place_id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'row_id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># 4、数据分割与特征工程？</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># （1）、数据分割</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    x_train<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\"># (2)、标准化</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    std <span class=\"token operator\">=</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\"># 队训练集进行标准化操作</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    x_train <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\"># 进行测试集的标准化操作</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    x_test <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\"># 二、算法的输入训练预测</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\"># K 值：算法传入参数不定的值    理论上：k = 根号 (样本数)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\"># K 值：后面会使用参数调优方法，去轮流试出最好的参数 [1,3,5,10,20,100,200]</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    knn <span class=\"token operator\">=</span> KNeighborsClassifier<span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\"># 调用 fit ()</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    knn<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\"># 预测测试数据集，得出准确率</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    y_predict <span class=\"token operator\">=</span> knn<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"预测测试集类别：\"</span><span class=\"token punctuation\">,</span> y_predict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"准确率为：\"</span><span class=\"token punctuation\">,</span> knn<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h3 id=\"34模型选择与调优\"><a class=\"anchor\" href=\"#34模型选择与调优\">#</a> 3.4 模型选择与调优</h3>\n<p>交叉验证目的：<strong>为了让被评估的模型更加准确可信</strong></p>\n<p>交叉验证：将拿到的训练数据，分为训练和验证集。以下图为例：将数据分成 5 份，其中一份作为验证集。然后经过 5 次 (组) 的测试，每次都更换不同的验证集。即得到 5 组模型的结果，取平均值作为最终结果。又称 5 折交叉验证。</p>\n<ul>\n<li>训练集：训练集 + 验证集</li>\n<li>测试集：测试集</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011534706.jpg\" alt=\"image.png\" /></p>\n<h4 id=\"超参数搜索-网格搜索grid-search\"><a class=\"anchor\" href=\"#超参数搜索-网格搜索grid-search\">#</a> 超参数搜索 - 网格搜索 (Grid Search)</h4>\n<p>通常情况下，<strong>有很多参数是需要手动指定的（如 k - 近邻算法中的 K 值），这种叫超参数</strong>。但是手动过程繁杂，所以需要对模型预设几种超参数组合。<strong>每组超参数都采用交叉验证来进行评估。最后选出最优参数组合建立模型。</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011534438.jpg\" alt=\"image.png\" /></p>\n<h4 id=\"模型选择与调优\"><a class=\"anchor\" href=\"#模型选择与调优\">#</a> 模型选择与调优</h4>\n<ul>\n<li>sklearn.model_selection.GridSearchCV(estimator, param_grid=None,cv=None)\n<ul>\n<li>对估计器的指定参数值进行详尽搜索</li>\n<li>estimator：估计器对象</li>\n<li “n_neighbors”:[1,3,5]=\"\">param_grid：估计器参数 (dict)</li>\n<li>cv：指定几折交叉验证</li>\n<li></li>\n<li>fit：输入训练数据</li>\n<li>score：准确率</li>\n<li>结果分析：\n<ul>\n<li>best<em>score</em>: 在交叉验证中验证的最好结果_</li>\n<li>best<em>estimator</em>：最好的参数模型</li>\n<li>cv<em>results</em>: 每次交叉验证后的验证集准确率结果和训练集准确率结果</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"facebook签到位置预测k值调优\"><a class=\"anchor\" href=\"#facebook签到位置预测k值调优\">#</a> Facebook 签到位置预测 K 值调优</h4>\n<ul>\n<li>使用网格搜索估计器</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用网格搜索和交叉验证找到合适的参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>knn <span class=\"token operator\">=</span> KNeighborsClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>param <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"n_neighbors\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gc <span class=\"token operator\">=</span> GridSearchCV<span class=\"token punctuation\">(</span>knn<span class=\"token punctuation\">,</span> param_grid<span class=\"token operator\">=</span>param<span class=\"token punctuation\">,</span> cv<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>gc<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选择了某个模型测试集当中预测的准确率为：\"</span><span class=\"token punctuation\">,</span> gc<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 训练验证集的结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在交叉验证当中验证的最好结果：\"</span><span class=\"token punctuation\">,</span> gc<span class=\"token punctuation\">.</span>best_score_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gc选择了的模型K值是：\"</span><span class=\"token punctuation\">,</span> gc<span class=\"token punctuation\">.</span>best_estimator_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"每次交叉验证的结果为：\"</span><span class=\"token punctuation\">,</span> gc<span class=\"token punctuation\">.</span>cv_results_<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"35朴素贝叶斯算法\"><a class=\"anchor\" href=\"#35朴素贝叶斯算法\">#</a> 3.5 朴素贝叶斯算法</h3>\n<blockquote>\n<p>朴素贝叶斯算法 = 朴素 + 贝叶斯</p>\n<p>朴素：变量与变量之间相互独立</p>\n<p>贝叶斯：贝叶斯公式</p>\n</blockquote>\n<h4 id=\"条件概率与联合概率\"><a class=\"anchor\" href=\"#条件概率与联合概率\">#</a> 条件概率与联合概率</h4>\n<ul>\n<li>联合概率：包含多个条件，且所有条件同时成立的概率\n<ul>\n<li>记作：P (A,B)</li>\n<li>特性：P (A, B) = P (A) P (B)</li>\n</ul>\n</li>\n<li>条件概率：就是事件 A 在另外一个事件 B 已经发生条件下的发生概率\n<ul>\n<li>记作：P (A|B)</li>\n<li>特性：P (A1,A2|B) = P (A1|B) P (A2|B)</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：此条件概率的成立，<strong>是由于 A1,A2 相互独立的结果</strong> (记忆)</p>\n</blockquote>\n<h4 id=\"贝叶斯公式\"><a class=\"anchor\" href=\"#贝叶斯公式\">#</a> 贝叶斯公式</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011534795.jpg\" alt=\"image.png\" /></p>\n<p><strong>那么这个公式如果应用在文章分类的场景当中，我们可以这样看：</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011534565.jpg\" alt=\"image.png\" /></p>\n<p>公式分为三个部分：</p>\n<ul>\n<li>P (C)：每个文档类别的概率 (某文档类别数／总文档数量)</li>\n<li>P (W│C)：给定类别下特征（被预测文档中出现的词）的概率\n<ul>\n<li>计算方法：P (F1│C)=Ni/N （训练文档中去计算）\n<ul>\n<li>Ni 为该 F1 词在 C 类别所有文档中出现的次数</li>\n<li>N 为所属类别 C 下的文档所有词出现的次数和</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>P (F1,F2,…) 预测文档中每个词的概率</li>\n</ul>\n<h4 id=\"拉普拉斯平滑系数\"><a class=\"anchor\" href=\"#拉普拉斯平滑系数\">#</a> 拉普拉斯平滑系数</h4>\n<p>目的：防止计算出的分类概率为 0</p>\n<p><img data-src=\"http://tva1.sinaimg.cn/large/007QGucbgy1guz1kkl1hmj60ve05c3zu02.jpg\" alt=\"image.png\" /></p>\n<h4 id=\"api-3\"><a class=\"anchor\" href=\"#api-3\">#</a> API</h4>\n<ul>\n<li>sklearn.naive_bayes.MultinomialNB(alpha = 1.0)\n<ul>\n<li>朴素贝叶斯分类</li>\n<li>alpha：拉普拉斯平滑系数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"20类新闻分类\"><a class=\"anchor\" href=\"#20类新闻分类\">#</a> 20 类新闻分类</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011534818.jpg\" alt=\"image.png\" /></p>\n<h4 id=\"分析-2\"><a class=\"anchor\" href=\"#分析-2\">#</a> 分析</h4>\n<ul>\n<li>分割数据集</li>\n<li>tfidf 进行的特征抽取</li>\n<li>朴素贝叶斯预测</li>\n</ul>\n<h4 id=\"代码-2\"><a class=\"anchor\" href=\"#代码-2\">#</a> 代码</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">nbcls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    朴素贝叶斯对新闻数据集进行预测</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    :return:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 获取新闻的数据，20 个类别</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    news <span class=\"token operator\">=</span> fetch_20newsgroups<span class=\"token punctuation\">(</span>subset<span class=\"token operator\">=</span><span class=\"token string\">'all'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 进行数据集分割</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    x_train<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>news<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> news<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 对于文本数据，进行特征抽取</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    tf <span class=\"token operator\">=</span> TfidfVectorizer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    x_train <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\"># 这里打印出来的列表是：训练集当中的所有不同词的组成的一个列表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>get_feature_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># print(x_train.toarray())</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 不能调用 fit_transform</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    x_test <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># estimator 估计器流程</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    mlb <span class=\"token operator\">=</span> MultinomialNB<span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    mlb<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\"># 进行预测</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    y_predict <span class=\"token operator\">=</span> mlb<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"预测每篇文章的类别：\"</span><span class=\"token punctuation\">,</span> y_predict<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实类别为：\"</span><span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"预测准确率为：\"</span><span class=\"token punctuation\">,</span> mlb<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h3 id=\"决策树\"><a class=\"anchor\" href=\"#决策树\">#</a> 决策树</h3>\n<h4 id=\"信息熵\"><a class=\"anchor\" href=\"#信息熵\">#</a> 信息熵</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011450474.png\" alt=\"信息熵公式\" /></p>\n<h4 id=\"信息增益-定义与公式\"><a class=\"anchor\" href=\"#信息增益-定义与公式\">#</a> 信息增益 定义与公式</h4>\n<p>特征 A 对训练数据集 D 的信息增益 g (D,A), 定义为集合 D 的信息熵 H (D) 与特征 A 给定条件下 D 的信息条件熵 H (D|A) 之差，即公式为：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011451005.png\" alt=\"信息增益公式\" /></p>\n<p>即公式为：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011452377.png\" alt=\"信息增益公式\" /></p>\n<p>公式的详细解释：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011452988.png\" alt=\"信息增益公式详解\" /></p>\n<blockquote>\n<p>注：信息增益表示得知特征 X 的信息而息的不确定性减少的程度使得类 Y 的信息熵减少的程度</p>\n</blockquote>\n<h4 id=\"决策树的三种算法实现\"><a class=\"anchor\" href=\"#决策树的三种算法实现\">#</a> 决策树的三种算法实现</h4>\n<p>当然决策树的原理不止信息增益这一种，还有其他方法。但是原理都类似，我们就不去举例计算。</p>\n<ul>\n<li>ID3\n<ul>\n<li>信息增益 最大的准则</li>\n</ul>\n</li>\n<li>C4.5\n<ul>\n<li>信息增益比 最大的准则</li>\n</ul>\n</li>\n<li>CART\n<ul>\n<li>分类树：基尼系数 最小的准则 在 sklearn 中可以选择划分的默认原则</li>\n<li>优势：划分更加细致（从后面例子的树显示来理解）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"决策树api\"><a class=\"anchor\" href=\"#决策树api\">#</a> 决策树 API</h4>\n<ul>\n<li>class sklearn.tree.DecisionTreeClassifier(criterion=’gini’, max_depth=None,random_state=None)\n<ul>\n<li>决策树分类器</li>\n<li>criterion: 默认是’gini’系数，也可以选择信息增益的熵’entropy’</li>\n<li>max_depth: 树的深度大小</li>\n<li>random_state: 随机数种子</li>\n</ul>\n</li>\n<li>其中会有些超参数：max_depth: 树的深度大小\n<ul>\n<li>其它超参数我们会结合随机森林讲解</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"泰坦尼克号乘客生存预测\"><a class=\"anchor\" href=\"#泰坦尼克号乘客生存预测\">#</a> 泰坦尼克号乘客生存预测</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">decisioncls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    决策树进行乘客生存预测</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    :return:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 1、获取数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    titan <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 2、数据的处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    x <span class=\"token operator\">=</span> titan<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'pclass'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sex'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    y <span class=\"token operator\">=</span> titan<span class=\"token punctuation\">[</span><span class=\"token string\">'survived'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># print(x , y)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 缺失值需要处理，将特征当中有类别的这些特征进行字典特征抽取</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 对于 x 转换成字典数据 x.to_dict (orient=\"records\")</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># [&#123;\"pclass\": \"1st\", \"age\": 29.00, \"sex\": \"female\"&#125;, &#123;&#125;]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> DictVectorizer<span class=\"token punctuation\">(</span>sparse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>to_dict<span class=\"token punctuation\">(</span>orient<span class=\"token operator\">=</span><span class=\"token string\">\"records\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>get_feature_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\"># 分割训练集合测试集</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    x_train<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># 进行决策树的建立和预测</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    dc <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>max_depth<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    dc<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"预测的准确率为：\"</span><span class=\"token punctuation\">,</span> dc<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h4 id=\"可视化决策树\"><a class=\"anchor\" href=\"#可视化决策树\">#</a> 可视化决策树</h4>\n<h4 id=\"保存树的结构到dot文件\"><a class=\"anchor\" href=\"#保存树的结构到dot文件\">#</a> 保存树的结构到 dot 文件</h4>\n<ul>\n<li>1、sklearn.tree.export_graphviz () 该函数能够导出 DOT 格式\n<ul>\n<li>tree.export_graphviz(estimator,out_file='tree.dot’,feature_names=[‘’,’’])</li>\n</ul>\n</li>\n<li>2、工具：(能够将 dot 文件转换为 pdf、png)\n<ul>\n<li>安装 graphviz</li>\n<li>ubuntu:sudo apt-get install graphviz Mac:brew install graphviz</li>\n</ul>\n</li>\n<li>3、运行命令\n<ul>\n<li>然后我们运行这个命令</li>\n<li>dot -Tpng tree.dot -o tree.png</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export_graphviz<span class=\"token punctuation\">(</span>dc<span class=\"token punctuation\">,</span> out_file<span class=\"token operator\">=</span><span class=\"token string\">\"./tree.dot\"</span><span class=\"token punctuation\">,</span> feature_names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pclass=1st'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pclass=2nd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pclass=3rd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女性'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'男性'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"决策树总结\"><a class=\"anchor\" href=\"#决策树总结\">#</a> 决策树总结</h4>\n<ul>\n<li>优点：\n<ul>\n<li>简单的理解和解释，树木可视化。</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li><strong>决策树学习者可以创建不能很好地推广数据的过于复杂的树，这被称为过拟合。</strong></li>\n</ul>\n</li>\n<li>改进：\n<ul>\n<li>减枝 cart 算法 (决策树 API 当中已经实现，随机森林参数调优有相关介绍)</li>\n<li><strong>随机森林</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集成学习方法之随机森林\"><a class=\"anchor\" href=\"#集成学习方法之随机森林\">#</a> 集成学习方法之随机森林</h3>\n<h4 id=\"集成学习方法\"><a class=\"anchor\" href=\"#集成学习方法\">#</a> 集成学习方法</h4>\n<p>集成学习通过建立几个模型组合的来解决单一预测问题。它的工作原理是<strong>生成多个分类器 / 模型</strong>，各自独立地学习和作出预测。<strong>这些预测最后结合成组合预测，因此优于任何一个单分类的做出预测。</strong></p>\n<h4 id=\"随机森林\"><a class=\"anchor\" href=\"#随机森林\">#</a> 随机森林</h4>\n<p>在机器学习中，<strong>随机森林是一个包含多个决策树的分类器</strong>，并且其输出的类别是由个别树输出的类别的众数而定。</p>\n<h4 id=\"随机森林原理过程\"><a class=\"anchor\" href=\"#随机森林原理过程\">#</a> 随机森林原理过程</h4>\n<p>学习算法根据下列算法而建造每棵树：</p>\n<ul>\n<li>用 N 来表示训练用例（样本）的个数，M 表示特征数目。\n<ul>\n<li>1、一次随机选出一个样本，重复 N 次， （有可能出现重复的样本）</li>\n<li>2、随机去选出 m 个特征，m &lt;&lt;M，建立决策树</li>\n</ul>\n</li>\n<li>采取 bootstrap 抽样</li>\n</ul>\n<h4 id=\"api-4\"><a class=\"anchor\" href=\"#api-4\">#</a> API</h4>\n<ul>\n<li>\n<p>class sklearn.ensemble.RandomForestClassifier(n_estimators=10, criterion=’gini’, max_depth=None, bootstrap=True, random_state=None, min_samples_split=2)</p>\n<ul>\n<li>随机森林分类器</li>\n<li>n_estimators：integer，optional（default = 10）森林里的树木数量 120,200,300,500,800,1200</li>\n<li>criteria：string，可选（default =“gini”）分割特征的测量方法</li>\n<li>max_depth：integer 或 None，可选（默认 = 无）树的最大深度 5,8,15,25,30</li>\n<li>max_features=&quot;auto”, 每个决策树的最大特征数量\n<ul>\n<li>If &quot;auto&quot;, then  <code>max_features=sqrt(n_features)</code> .</li>\n<li>If &quot;sqrt&quot;, then  <code>max_features=sqrt(n_features)</code>  (same as &quot;auto&quot;).</li>\n<li>If &quot;log2&quot;, then  <code>max_features=log2(n_features)</code> .</li>\n<li>If None, then  <code>max_features=n_features</code> .</li>\n</ul>\n</li>\n<li>bootstrap：boolean，optional（default = True）是否在构建树时使用放回抽样</li>\n<li>min_samples_split: 节点划分最少样本数</li>\n<li>min_samples_leaf: 叶子节点的最小样本数</li>\n</ul>\n</li>\n<li>\n<p>超参数：n_estimator, max_depth, min_samples_split,min_samples_leaf</p>\n</li>\n</ul>\n<h4 id=\"代码-3\"><a class=\"anchor\" href=\"#代码-3\">#</a> 代码</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 随机森林去进行预测</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rf <span class=\"token operator\">=</span> RandomForestClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>param <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"n_estimators\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span><span class=\"token number\">1200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"max_depth\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 超参数调优</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>gc <span class=\"token operator\">=</span> GridSearchCV<span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">,</span> param_grid<span class=\"token operator\">=</span>param<span class=\"token punctuation\">,</span> cv<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>gc<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"随机森林预测的准确率为：\"</span><span class=\"token punctuation\">,</span> gc<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110011700215.png\" alt=\"机器学习day02\" /></p>\n<h2 id=\"回归与聚类算法\"><a class=\"anchor\" href=\"#回归与聚类算法\">#</a> 回归与聚类算法</h2>\n<h3 id=\"线性回归\"><a class=\"anchor\" href=\"#线性回归\">#</a> 线性回归</h3>\n<h4 id=\"定义与公式\"><a class=\"anchor\" href=\"#定义与公式\">#</a> 定义与公式</h4>\n<p>线性回归 (Linear regression) 是利用<strong>回归方程 (函数)<strong> 对一个或</strong>多个自变量 (特征值) 和因变量 (目标值) 之间</strong>关系进行建模的一种分析方式。</p>\n<ul>\n<li>特点：只有一个自变量的情况称为单变量回归，大于一个自变量情况的叫做多元回归</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052058772.png\" alt=\"线性回归公式\" /></p>\n<h3 id=\"损失函数\"><a class=\"anchor\" href=\"#损失函数\">#</a> 损失函数</h3>\n<p>总损失定义为：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052102076.png\" alt=\"线性回归损失函数\" /></p>\n<ul>\n<li>y_i 为第 i 个训练样本的真实值</li>\n<li>h (x_i) 为第 i 个训练样本特征值组合预测函数</li>\n<li>又称最小二乘法</li>\n</ul>\n<h3 id=\"优化算法\"><a class=\"anchor\" href=\"#优化算法\">#</a> 优化算法</h3>\n<p><strong>如何去求模型当中的 W，使得损失最小？（目的是找到最小损失对应的 W 值）</strong></p>\n<p>线性回归经常使用的两种优化算法</p>\n<ul>\n<li>正规方程</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052103328.png\" alt=\"正规方程\" /></p>\n<blockquote>\n<p>理解：X 为特征值矩阵，y 为目标值矩阵。直接求到最好的结果</p>\n<p>缺点：当特征过多过复杂时，求解速度太慢并且得不到结果</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052107712.png\" alt=\"损失行数求解1\" /></p>\n<ul>\n<li><strong>梯度下降 (Gradient Descent)</strong></li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052108246.png\" alt=\"梯度下降公式\" /></p>\n<blockquote>\n<p>理解：α 为学习速率，需要手动指定（超参数），α 旁边的整体表示方向</p>\n<p>沿着这个函数下降的方向找，最后就能找到山谷的最低点，然后更新 W 值</p>\n<p>使用：面对训练数据规模十分庞大的任务 ，能够找到较好的结果</p>\n</blockquote>\n<p>我们通过两个图更好理解梯度下降的过程</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052109456.png\" alt=\"单变量的梯度下降\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052109622.png\" alt=\"多变量的梯度下降\" /></p>\n<p><strong>所以有了梯度下降这样一个优化算法，回归就有了 &quot;自动学习&quot; 的能力</strong></p>\n<h3 id=\"优化动态图演示\"><a class=\"anchor\" href=\"#优化动态图演示\">#</a> 优化动态图演示</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052109870.gif\" alt=\"线性回归优化动态图\" /></p>\n<h3 id=\"线性回归api\"><a class=\"anchor\" href=\"#线性回归api\">#</a> 线性回归 API</h3>\n<ul>\n<li>sklearn.linear_model.LinearRegression(fit_intercept=True)\n<ul>\n<li>通过正规方程优化</li>\n<li>fit_intercept：是否计算偏置</li>\n<li>LinearRegression.coef_：回归系数</li>\n<li>LinearRegression.intercept_：偏置</li>\n</ul>\n</li>\n<li>sklearn.linear_model.SGDRegressor(loss=&quot;squared_loss&quot;, fit_intercept=True, learning_rate ='invscaling', eta0=0.01)\n<ul>\n<li>SGDRegressor 类实现了随机梯度下降学习，它支持不同的<strong> loss 函数和正则化惩罚项</strong>来拟合线性回归模型。</li>\n<li>loss: 损失类型\n<ul>\n<li><strong>loss=”squared_loss”: 普通最小二乘法</strong></li>\n</ul>\n</li>\n<li>fit_intercept：是否计算偏置</li>\n<li>learning_rate : string, optional\n<ul>\n<li>学习率填充</li>\n<li><strong>'constant': eta = eta0</strong></li>\n<li><strong>'optimal': eta = 1.0 / (alpha * (t + t0)) [default]</strong></li>\n<li>'invscaling': eta = eta0 / pow(t, power_t)\n<ul>\n<li><strong>power_t=0.25: 存在父类当中</strong></li>\n</ul>\n</li>\n<li><strong>对于一个常数值的学习率来说，可以使用 learning_rate=’constant’ ，并使用 eta0 来指定学习率。</strong></li>\n</ul>\n</li>\n<li>SGDRegressor.coef_：回归系数</li>\n<li>SGDRegressor.intercept_：偏置</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>sklearn 提供给我们两种实现的 API， 可以根据选择使用</p>\n</blockquote>\n<h3 id=\"分析-3\"><a class=\"anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<p>回归当中的数据大小不一致，是否会导致结果影响较大。所以需要做标准化处理。同时我们对目标值也需要做标准化处理。</p>\n<ul>\n<li>数据分割与标准化处理</li>\n<li>回归预测</li>\n<li>线性回归的算法效果评估</li>\n</ul>\n<h3 id=\"回归性能评估\"><a class=\"anchor\" href=\"#回归性能评估\">#</a> 回归性能评估</h3>\n<p>均方误差 (Mean Squared Error) MSE) 评价机制：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052122771.png\" alt=\"线性回归评估\" /></p>\n<blockquote>\n<p>注：y^i 为预测值，¯y 为真实值</p>\n</blockquote>\n<ul>\n<li>sklearn.metrics.mean_squared_error(y_true, y_pred)\n<ul>\n<li>均方误差回归损失</li>\n<li>y_true: 真实值</li>\n<li>y_pred: 预测值</li>\n<li>return: 浮点数结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码-4\"><a class=\"anchor\" href=\"#代码-4\">#</a> 代码</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">mylinearregression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    线性回归预测房子价格</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    :return:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    lb <span class=\"token operator\">=</span> load_boston<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># print(lb.data)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># print(lb.target)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 对数据集进行划分</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    x_train<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>lb<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> lb<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 需要做标准化处理对于特征值处理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    std_x <span class=\"token operator\">=</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    x_train <span class=\"token operator\">=</span> std_x<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x_test <span class=\"token operator\">=</span> std_x<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># print(x_train)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\"># 对于目标值进行标准化</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    std_y <span class=\"token operator\">=</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    y_train <span class=\"token operator\">=</span> std_y<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    y_test <span class=\"token operator\">=</span> std_y<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    y_test <span class=\"token operator\">=</span> std_y<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\"># 使用线性模型进行预测</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\"># 使用正规方程求解</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    lr <span class=\"token operator\">=</span> LinearRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\"># # 此时在干什么？</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    y_lr_predict <span class=\"token operator\">=</span> std_y<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正规方程预测的结果为：\"</span><span class=\"token punctuation\">,</span> y_lr_predict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正规方程的均方误差为：\"</span><span class=\"token punctuation\">,</span> mean_squared_error<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_lr_predict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\"># 梯度下降进行预测</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    sgd <span class=\"token operator\">=</span> SGDRegressor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    sgd<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SGD的权重参数为：\"</span><span class=\"token punctuation\">,</span> sgd<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    y_sgd_predict <span class=\"token operator\">=</span> std_y<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>sgd<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SGD的预测的结果为：\"</span><span class=\"token punctuation\">,</span> y_sgd_predict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\"># # 怎么评判这两个方法好坏</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SGD的均方误差为：\"</span><span class=\"token punctuation\">,</span> mean_squared_error<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_sgd_predict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h3 id=\"正规方程和梯度下降对比\"><a class=\"anchor\" href=\"#正规方程和梯度下降对比\">#</a> 正规方程和梯度下降对比</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110052125273.png\" alt=\"正规方程和梯度下降对比\" /></p>\n<ul>\n<li>文字对比</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">梯度下降</th>\n<th style=\"text-align:center\">正规方程</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">需要选择学习率</td>\n<td style=\"text-align:center\">不需要</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">需要迭代求解</td>\n<td style=\"text-align:center\">一次运算得出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特征数量较大可以使用</td>\n<td style=\"text-align:center\">需要计算方程，时间复杂度高 O (n3)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>选择：\n<ul>\n<li>小规模数据：\n<ul>\n<li><strong>LinearRegression (不能解决拟合问题)</strong></li>\n<li>岭回归</li>\n</ul>\n</li>\n<li>大规模数据：SGDRegressor</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"拓展-关于优化方法gd-sgd-sag\"><a class=\"anchor\" href=\"#拓展-关于优化方法gd-sgd-sag\">#</a> 拓展 - 关于优化方法 GD、SGD、SAG</h3>\n<h4 id=\"gd\"><a class=\"anchor\" href=\"#gd\">#</a> GD</h4>\n<p><strong>梯度下降 (Gradient Descent)，原始的梯度下降法需要计算所有样本的值才能够得出梯度，计算量大，所以后面才有会一系列的改进。</strong></p>\n<h4 id=\"sgd\"><a class=\"anchor\" href=\"#sgd\">#</a> SGD</h4>\n<p><strong>随机梯度下降 (Stochastic gradient descent) 是一个优化方法。它在一次迭代时只考虑一个训练样本。</strong></p>\n<ul>\n<li>SGD 的优点是：\n<ul>\n<li>高效</li>\n<li>容易实现</li>\n</ul>\n</li>\n<li>SGD 的缺点是：\n<ul>\n<li>SGD 需要许多超参数：比如正则项参数、迭代数。</li>\n<li>SGD 对于特征标准化是敏感的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"sag\"><a class=\"anchor\" href=\"#sag\">#</a> SAG</h4>\n<p>随机平均梯度法 (Stochasitc Average Gradient)，由于收敛的速度太慢，有人提出 SAG 等基于梯度下降的算法</p>\n<blockquote>\n<p>Scikit-learn：SGDRegressor、岭回归、逻辑回归等当中都会有 SAG 优化</p>\n</blockquote>\n<h2 id=\"欠拟合与过拟合\"><a class=\"anchor\" href=\"#欠拟合与过拟合\">#</a> 欠拟合与过拟合</h2>\n<h3 id=\"定义-2\"><a class=\"anchor\" href=\"#定义-2\">#</a> 定义</h3>\n<ul>\n<li>过拟合：一个假设在训练数据上能够获得比其他假设更好的拟合， 但是在测试数据集上却不能很好地拟合数据，此时认为这个假设出现了过拟合的现象。(模型过于复杂)</li>\n<li>欠拟合：一个假设在训练数据上不能获得更好的拟合，并且在测试数据集上也不能很好地拟合数据，此时认为这个假设出现了欠拟合的现象。(模型过于简单)</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211518735.png\" alt=\"欠拟合过拟合图示\" /></p>\n<h3 id=\"原因以及解决办法\"><a class=\"anchor\" href=\"#原因以及解决办法\">#</a> 原因以及解决办法</h3>\n<ul>\n<li>欠拟合原因以及解决办法\n<ul>\n<li>原因：学习到数据的特征过少</li>\n<li>解决办法：增加数据的特征数量</li>\n</ul>\n</li>\n<li>过拟合原因以及解决办法\n<ul>\n<li>原因：原始特征过多，存在一些嘈杂特征， 模型过于复杂是因为模型尝试去兼顾各个测试数据点</li>\n<li>解决办法：\n<ul>\n<li>正则化</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在这里针对回归，我们选择了正则化。但是对于其他机器学习算法如分类算法来说也会出现这样的问题，除了一些算法本身作用之外（决策树、神经网络），我们更多的也是去自己做特征选择，包括之前说的删除、合并一些特征</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211523717.png\" alt=\"模型复杂\" /></p>\n<h4 id=\"如何解决\"><a class=\"anchor\" href=\"#如何解决\">#</a> 如何解决？</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211523371.png\" alt=\"正则化\" /></p>\n<blockquote>\n<p>在学习的时候，数据提供的特征有些影响模型复杂度或者这个特征的数据点异常较多，所以算法在学习的时候尽量减少这个特征的影响（甚至删除某个特征的影响），这就是正则化</p>\n<p>注：调整时候，算法并不知道某个特征影响，而是去调整参数得出优化的结果</p>\n</blockquote>\n<h3 id=\"正则化类别\"><a class=\"anchor\" href=\"#正则化类别\">#</a> 正则化类别</h3>\n<ul>\n<li>L2 正则化\n<ul>\n<li>作用：可以使得其中一些 W 的都很小，都接近于 0，削弱某个特征的影响</li>\n<li>优点：越小的参数说明模型越简单，越简单的模型则越不容易产生过拟合现象</li>\n<li>Ridge 回归</li>\n</ul>\n</li>\n<li>L1 正则化\n<ul>\n<li>作用：可以使得其中一些 W 的值直接为 0，删除这个特征的影响</li>\n<li>LASSO 回归</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"线性回归的改进-岭回归\"><a class=\"anchor\" href=\"#线性回归的改进-岭回归\">#</a> 线性回归的改进 - 岭回归</h2>\n<h3 id=\"带有l2正则化的线性回归-岭回归\"><a class=\"anchor\" href=\"#带有l2正则化的线性回归-岭回归\">#</a> 带有 L2 正则化的线性回归 - 岭回归</h3>\n<p>岭回归，其实也是一种线性回归。只不过在算法建立回归方程时候，加上正则化的限制，从而达到解决过拟合的效果</p>\n<h3 id=\"api-5\"><a class=\"anchor\" href=\"#api-5\">#</a> API</h3>\n<ul>\n<li>sklearn.linear_model.Ridge(alpha=1.0, fit_intercept=True,solver=&quot;auto&quot;, normalize=False)\n<ul>\n<li>具有 l2 正则化的线性回归</li>\n<li>alpha: 正则化力度，也叫 λ\n<ul>\n<li><strong>λ 取值：0~1 1~10</strong></li>\n</ul>\n</li>\n<li>solver: 会根据数据自动选择优化方法\n<ul>\n<li><strong>sag: 如果数据集、特征都比较大，选择该随机梯度下降优化</strong></li>\n</ul>\n</li>\n<li>normalize: 数据是否进行标准化\n<ul>\n<li>normalize=False: 可以在 fit 之前调用 preprocessing.StandardScaler 标准化数据</li>\n</ul>\n</li>\n<li>Ridge.coef_: 回归权重</li>\n<li>Ridge.intercept_: 回归偏置</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>All last four solvers support both dense <span class=\"token keyword\">and</span> sparse data<span class=\"token punctuation\">.</span> However<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>only <span class=\"token string\">'sag'</span> supports sparse <span class=\"token builtin\">input</span> when `fit_intercept` <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure></blockquote>\n<h5 id=\"ridge方法相当于sgdregressorpenaltyl2-losssquared_loss只不过sgdregressor实现了一个普通的随机梯度下降学习推荐使用ridge实现了sag\"><a class=\"anchor\" href=\"#ridge方法相当于sgdregressorpenaltyl2-losssquared_loss只不过sgdregressor实现了一个普通的随机梯度下降学习推荐使用ridge实现了sag\">#</a> Ridge 方法相当于 SGDRegressor (penalty='l2', loss=&quot;squared_loss&quot;), 只不过 SGDRegressor 实现了一个普通的随机梯度下降学习，推荐使用 Ridge (实现了 SAG)</h5>\n<ul>\n<li>sklearn.linear_model.RidgeCV(_BaseRidgeCV, RegressorMixin)\n<ul>\n<li>具有 l2 正则化的线性回归，可以进行交叉验证</li>\n<li>coef_: 回归系数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">_BaseRidgeCV</span><span class=\"token punctuation\">(</span>LinearModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> alphas<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                 fit_intercept<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> normalize<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> scoring<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 cv<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> gcv_mode<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                 store_cv_values<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><h3 id=\"观察正则化程度的变化对结果的影响\"><a class=\"anchor\" href=\"#观察正则化程度的变化对结果的影响\">#</a> 观察正则化程度的变化，对结果的影响？</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211614701.png\" alt=\"正则化力度\" /></p>\n<ul>\n<li>正则化力度越大，权重系数会越小</li>\n<li>正则化力度越小，权重系数会越大</li>\n</ul>\n<h3 id=\"波士顿房价预测\"><a class=\"anchor\" href=\"#波士顿房价预测\">#</a> 波士顿房价预测</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rd <span class=\"token operator\">=</span> Ridge<span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rd<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"岭回归的权重参数为：\"</span><span class=\"token punctuation\">,</span> rd<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>y_rd_predict <span class=\"token operator\">=</span> std_y<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>rd<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"岭回归的预测的结果为：\"</span><span class=\"token punctuation\">,</span> y_rd_predict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"岭回归的均方误差为：\"</span><span class=\"token punctuation\">,</span> mean_squared_error<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_rd_predict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"分类算法-逻辑回归与二分类\"><a class=\"anchor\" href=\"#分类算法-逻辑回归与二分类\">#</a> 分类算法 - 逻辑回归与二分类</h2>\n<h3 id=\"逻辑回归的原理\"><a class=\"anchor\" href=\"#逻辑回归的原理\">#</a> 逻辑回归的原理</h3>\n<blockquote>\n<p>逻辑回归（Logistic Regression）是机器学习中的一种分类模型，逻辑回归是一种分类算法，虽然名字中带有回归，但是它与回归之间有一定的联系。</p>\n</blockquote>\n<h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211617961.png\" alt=\"\" /></p>\n<p>逻辑回归的输入就是一个线性回归的结果。</p>\n<h4 id=\"激活函数\"><a class=\"anchor\" href=\"#激活函数\">#</a> 激活函数</h4>\n<ul>\n<li>sigmoid 函数</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211617300.png\" alt=\"sigmoid公式\" /></p>\n<ul>\n<li>分析\n<ul>\n<li>回归的结果输入到 sigmoid 函数当中</li>\n<li>输出结果：[0, 1] 区间中的一个概率值，默认为 0.5 为阈值</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>逻辑回归最终的分类是通过属于某个类别的概率值来判断是否属于某个类别，并且这个类别默认标记为 1 (正例), 另外的一个类别会标记为 0 (反例)。（方便损失计算）</p>\n</blockquote>\n<h5 id=\"输出结果解释重要假设有两个类别ab并且假设我们的概率值为属于a1这个类别的概率值-现在有一个样本的输入到逻辑回归输出结果06那么这个概率值超过05意味着我们训练或者预测的结果就是a1类别-那么反之如果得出结果为03那么训练或者预测结果就为b0类别\"><a class=\"anchor\" href=\"#输出结果解释重要假设有两个类别ab并且假设我们的概率值为属于a1这个类别的概率值-现在有一个样本的输入到逻辑回归输出结果06那么这个概率值超过05意味着我们训练或者预测的结果就是a1类别-那么反之如果得出结果为03那么训练或者预测结果就为b0类别\">#</a> 输出结果解释 (重要)：假设有两个类别 A，B，并且假设我们的概率值为属于 A (1) 这个类别的概率值。现在有一个样本的输入到逻辑回归输出结果 0.6，那么这个概率值超过 0.5，意味着我们训练或者预测的结果就是 A (1) 类别。那么反之，如果得出结果为 0.3 那么，训练或者预测结果就为 B (0) 类别。</h5>\n<h5 id=\"所以接下来我们回忆之前的线性回归预测结果我们用均方误差衡量那如果对于逻辑回归我们预测的结果不对该怎么去衡量这个损失呢我们来看这样一张图\"><a class=\"anchor\" href=\"#所以接下来我们回忆之前的线性回归预测结果我们用均方误差衡量那如果对于逻辑回归我们预测的结果不对该怎么去衡量这个损失呢我们来看这样一张图\">#</a> 所以接下来我们回忆之前的线性回归预测结果我们用均方误差衡量，那如果对于逻辑回归，我们预测的结果不对该怎么去衡量这个损失呢？我们来看这样一张图</h5>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211617262.png\" alt=\"逻辑回归运算过程\" /></p>\n<p>那么如何去衡量逻辑回归的预测结果与真实结果的差异呢？</p>\n<h3 id=\"损失以及优化\"><a class=\"anchor\" href=\"#损失以及优化\">#</a> 损失以及优化</h3>\n<h4 id=\"损失\"><a class=\"anchor\" href=\"#损失\">#</a> 损失</h4>\n<p>逻辑回归的损失，称之为<strong>对数似然损失</strong>，公式如下：</p>\n<ul>\n<li>分开类别：</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211631735.png\" alt=\"单个对数似然损失\" /></p>\n<p>怎么理解单个的式子呢？这个要根据 log 的函数图像来理解</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211631366.png\" alt=\"单个损失解释\" /></p>\n<ul>\n<li>综合完整损失函数</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211631991.png\" alt=\"完整对数似然损失\" /></p>\n<blockquote>\n<p>看到这个式子，其实跟我们讲的信息熵类似。</p>\n</blockquote>\n<p>接下来我们呢就带入上面那个例子来计算一遍，就能理解意义了。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211631731.png\" alt=\"损失计算过程\" /></p>\n<blockquote>\n<p>我们已经知道，log (P), P 值越大，结果越小，所以我们可以对着这个损失的式子去分析</p>\n</blockquote>\n<h4 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 优化</h4>\n<p>同样使用梯度下降优化算法，去减少损失函数的值。这样去更新逻辑回归前面对应算法的权重参数，<strong>提升原本属于 1 类别的概率，降低原本是 0 类别的概率。</strong></p>\n<h3 id=\"逻辑回归api\"><a class=\"anchor\" href=\"#逻辑回归api\">#</a> 逻辑回归 API</h3>\n<ul>\n<li>sklearn.linear_model.LogisticRegression(solver='liblinear', penalty=‘l2’, C = 1.0)\n<ul>\n<li>solver: 优化求解方式（默认开源的 liblinear 库实现，内部使用了坐标轴下降法来迭代优化损失函数）\n<ul>\n<li>sag：根据数据集自动选择，随机平均梯度下降</li>\n</ul>\n</li>\n<li>penalty：正则化的种类</li>\n<li>C：正则化力度</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>默认将类别数量少的当做正例</strong></p>\n</blockquote>\n<h5 id=\"logisticregression方法相当于-sgdclassifierlosslog-penalty-sgdclassifier实现了一个普通的随机梯度下降学习也支持平均随机梯度下降法asgd可以通过设置averagetrue-而使用logisticregression实现了sag\"><a class=\"anchor\" href=\"#logisticregression方法相当于-sgdclassifierlosslog-penalty-sgdclassifier实现了一个普通的随机梯度下降学习也支持平均随机梯度下降法asgd可以通过设置averagetrue-而使用logisticregression实现了sag\">#</a> LogisticRegression 方法相当于 SGDClassifier (loss=&quot;log&quot;, penalty=&quot; &quot;),SGDClassifier 实现了一个普通的随机梯度下降学习，也支持平均随机梯度下降法（ASGD），可以通过设置 average=True。而使用 LogisticRegression (实现了 SAG)</h5>\n<h3 id=\"案例癌症分类预测-良恶性乳腺癌肿瘤预测\"><a class=\"anchor\" href=\"#案例癌症分类预测-良恶性乳腺癌肿瘤预测\">#</a> 案例：癌症分类预测 - 良／恶性乳腺癌肿瘤预测</h3>\n<ul>\n<li>数据介绍</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211641873.png\" alt=\"癌症数据\" /></p>\n<p>原始数据的下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNoaXZlLmljcy51Y2kuZWR1L21sL21hY2hpbmUtbGVhcm5pbmctZGF0YWJhc2VzL2JyZWFzdC1jYW5jZXItd2lzY29uc2luLw==\">https://archive.ics.uci.edu/ml/machine-learning-databases/</span></p>\n<blockquote>\n<p>数据描述</p>\n<p>（1）699 条样本，共 11 列数据，第一列用语检索的 id，后 9 列分别是与肿瘤</p>\n<p>相关的医学特征，最后一列表示肿瘤类型的数值。</p>\n<p>（2）包含 16 个缺失值，用”?” 标出。</p>\n</blockquote>\n<h3 id=\"分析-4\"><a class=\"anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<ul>\n<li>缺失值处理</li>\n<li>标准化处理</li>\n<li>逻辑回归预测</li>\n</ul>\n<h3 id=\"代码-5\"><a class=\"anchor\" href=\"#代码-5\">#</a> 代码</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">logisticregression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    逻辑回归进行癌症预测</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    :return: None</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 1、读取数据，处理缺失值以及标准化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    column_name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Sample code number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Clump Thickness'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Uniformity of Cell Size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Uniformity of Cell Shape'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                   <span class=\"token string\">'Marginal Adhesion'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Single Epithelial Cell Size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bare Nuclei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bland Chromatin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                   <span class=\"token string\">'Normal Nucleoli'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mitoses'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Class'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                       names<span class=\"token operator\">=</span>column_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># 删除缺失值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>to_replace<span class=\"token operator\">=</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 取出特征值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    x <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>column_name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    y <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>column_name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 分割数据集</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    x_train<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\"># 进行标准化</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    std <span class=\"token operator\">=</span> StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    x_train <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    x_test <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># 使用逻辑回归</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    lr <span class=\"token operator\">=</span> LogisticRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"得出来的权重：\"</span><span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># 预测类别</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"预测的类别：\"</span><span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\"># 得出准确率</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"预测的准确率:\"</span><span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><h3 id=\"分类的评估方法\"><a class=\"anchor\" href=\"#分类的评估方法\">#</a> 分类的评估方法</h3>\n<h4 id=\"精确率与召回率\"><a class=\"anchor\" href=\"#精确率与召回率\">#</a> 精确率与召回率</h4>\n<h5 id=\"混淆矩阵\"><a class=\"anchor\" href=\"#混淆矩阵\">#</a> 混淆矩阵</h5>\n<p>在分类任务下，预测结果 (Predicted Condition) 与正确标记 (True Condition) 之间存在四种不同的组合，构成混淆矩阵 (适用于多分类)</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211700329.png\" alt=\"混淆矩阵\" /></p>\n<h5 id=\"精确率precision与召回率recall\"><a class=\"anchor\" href=\"#精确率precision与召回率recall\">#</a> 精确率 (Precision) 与召回率 (Recall)</h5>\n<ul>\n<li>精确率：预测结果为正例样本中真实为正例的比例（了解）</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211701104.png\" alt=\"精确率\" /></p>\n<ul>\n<li>召回率：真实为正例的样本中预测结果为正例的比例（查的全，对正样本的区分能力）</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211701338.png\" alt=\"召回率\" /></p>\n<p>那么怎么更好理解这个两个概念</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211701280.png\" alt=\"精确率与召回率理解\" /></p>\n<p>还有其他的评估标准，F1-score，反映了模型的稳健型</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211702028.png\" alt=\"F1\" /></p>\n<h5 id=\"分类评估报告api\"><a class=\"anchor\" href=\"#分类评估报告api\">#</a> 分类评估报告 API</h5>\n<ul>\n<li>sklearn.metrics.classification_report(y_true, y_pred, labels=[], target_names=None )</li>\n<li>\n<ul>\n<li>y_true：真实目标值</li>\n<li>y_pred：估计器预测目标值</li>\n<li>labels: 指定类别对应的数字</li>\n<li>target_names：目标类别名称</li>\n<li>return：每个类别精确率与召回率</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"精确率和召回率为：\"</span><span class=\"token punctuation\">,</span> classification_report<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> labels<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target_names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'良性'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'恶性'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>假设这样一个情况，如果 99 个样本癌症，1 个样本非癌症，不管怎样我全都预测正例 (默认癌症为正例), 准确率就为 99% 但是这样效果并不好，这就是样本不均衡下的评估问题</strong></p>\n<h4 id=\"问题如何衡量样本不均衡下的评估\"><a class=\"anchor\" href=\"#问题如何衡量样本不均衡下的评估\">#</a> 问题：如何衡量样本不均衡下的评估？</h4>\n<h4 id=\"roc曲线与auc指标\"><a class=\"anchor\" href=\"#roc曲线与auc指标\">#</a> ROC 曲线与 AUC 指标</h4>\n<h5 id=\"知道tpr与fpr\"><a class=\"anchor\" href=\"#知道tpr与fpr\">#</a> 知道 TPR 与 FPR</h5>\n<ul>\n<li>TPR = TP / (TP + FN)\n<ul>\n<li>所有真实类别为 1 的样本中，预测类别为 1 的比例</li>\n</ul>\n</li>\n<li>FPR = FP / (FP + FN)\n<ul>\n<li>所有真实类别为 0 的样本中，预测类别为 1 的比例</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"roc曲线\"><a class=\"anchor\" href=\"#roc曲线\">#</a> ROC 曲线</h5>\n<ul>\n<li>ROC 曲线的横轴就是 FPRate，纵轴就是 TPRate，当二者相等时，表示的意义则是：对于不论真实类别是 1 还是 0 的样本，分类器预测为 1 的概率是相等的，此时 AUC 为 0.5</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211702640.png\" alt=\"ROC\" /></p>\n<h5 id=\"auc指标\"><a class=\"anchor\" href=\"#auc指标\">#</a> AUC 指标</h5>\n<ul>\n<li>AUC 的概率意义是随机取一对正负样本，正样本得分大于负样本的概率</li>\n<li>AUC 的最小值为 0.5，最大值为 1，取值越高越好</li>\n<li><strong>AUC=1，完美分类器，采用这个预测模型时，不管设定什么阈值都能得出完美预测。绝大多数预测的场合，不存在完美分类器。</strong></li>\n<li><strong>0.5&lt;AUC&lt;1，优于随机猜测。这个分类器（模型）妥善设定阈值的话，能有预测价值。</strong></li>\n</ul>\n<blockquote>\n<p><strong>最终 AUC 的范围在 [0.5, 1] 之间，并且越接近 1 越好</strong></p>\n</blockquote>\n<h5 id=\"auc计算api\"><a class=\"anchor\" href=\"#auc计算api\">#</a> AUC 计算 API</h5>\n<ul>\n<li>from sklearn.metrics import roc_auc_score\n<ul>\n<li>sklearn.metrics.roc_auc_score(y_true, y_score)\n<ul>\n<li>计算 ROC 曲线面积，即 AUC 值</li>\n<li>y_true: 每个样本的真实类别，必须为 0 (反例),1 (正例) 标记</li>\n<li>y_score: 每个样本预测的概率值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 0.5~1 之间，越接近于 1 约好</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>y_test <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>y_test <span class=\"token operator\">></span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AUC指标：\"</span><span class=\"token punctuation\">,</span> roc_auc_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h5>\n<ul>\n<li>AUC 只能用来评价二分类</li>\n<li>AUC 非常适合评价样本不平衡中的分类器性能</li>\n</ul>\n<h2 id=\"模型保存和加载\"><a class=\"anchor\" href=\"#模型保存和加载\">#</a> 模型保存和加载</h2>\n<h3 id=\"1-sklearn模型的保存和加载api\"><a class=\"anchor\" href=\"#1-sklearn模型的保存和加载api\">#</a> 1、sklearn 模型的保存和加载 API</h3>\n<ul>\n<li>from sklearn.externals import joblib\n<ul>\n<li>保存：joblib.dump (rf, 'test.pkl')</li>\n<li>加载：estimator = joblib.load ('test.pkl')</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-线性回归的模型保存加载案例\"><a class=\"anchor\" href=\"#2-线性回归的模型保存加载案例\">#</a> 2、线性回归的模型保存加载案例</h3>\n<ul>\n<li>保存</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用线性模型进行预测</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 使用正规方程求解</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lr <span class=\"token operator\">=</span> LinearRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 此时在干什么？</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 保存训练完结束的模型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>joblib<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.pkl\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>加载</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 通过已有的模型去预测房价</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>model <span class=\"token operator\">=</span> joblib<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"test.pkl\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"从文件加载进来的模型预测房价的结果：\"</span><span class=\"token punctuation\">,</span> std_y<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"无监督学习-k-means算法\"><a class=\"anchor\" href=\"#无监督学习-k-means算法\">#</a> 无监督学习 - K-means 算法</h2>\n<h3 id=\"1-什么是无监督学习\"><a class=\"anchor\" href=\"#1-什么是无监督学习\">#</a> 1、 什么是无监督学习</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211710955.png\" alt=\"人员聚类\" /></p>\n<ul>\n<li>一家广告平台需要根据相似的人口学特征和购买习惯将美国人口分成不同的小组，以便广告客户可以通过有关联的广告接触到他们的目标客户。</li>\n<li>Airbnb 需要将自己的房屋清单分组成不同的社区，以便用户能更轻松地查阅这些清单。</li>\n<li>一个数据科学团队需要降低一个大型数据集的维度的数量，以便简化建模和降低文件大小。</li>\n</ul>\n<p>我们可以怎样最有用地对其进行归纳和分组？我们可以怎样以一种压缩格式有效地表征数据？<strong>这都是无监督学习的目标，之所以称之为无监督，是因为这是从无标签的数据开始学习的。</strong></p>\n<h3 id=\"2-无监督学习包含算法\"><a class=\"anchor\" href=\"#2-无监督学习包含算法\">#</a> 2、 无监督学习包含算法</h3>\n<ul>\n<li>聚类\n<ul>\n<li>K-means (K 均值聚类)</li>\n</ul>\n</li>\n<li>降维\n<ul>\n<li>PCA</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-k-means原理\"><a class=\"anchor\" href=\"#3-k-means原理\">#</a> 3、 K-means 原理</h3>\n<p>我们先来看一下一个 K-means 的聚类效果图</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211710799.png\" alt=\"K-means如何聚类效果\" /></p>\n<h4 id=\"31-k-means聚类步骤\"><a class=\"anchor\" href=\"#31-k-means聚类步骤\">#</a> 3.1 K-means 聚类步骤</h4>\n<ul>\n<li>1、随机设置 K 个特征空间内的点作为初始的聚类中心</li>\n<li>2、对于其他每个点计算到 K 个中心的距离，未知的点选择最近的一个聚类中心点作为标记类别</li>\n<li>3、接着对着标记的聚类中心之后，重新计算出每个聚类的新中心点（平均值）</li>\n<li>4、如果计算得出的新中心点与原中心点一样，那么结束，否则重新进行第二步过程</li>\n</ul>\n<p>我们以一张图来解释效果</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211710386.png\" alt=\"K-means过程分析\" /></p>\n<h3 id=\"4-k-meansapi\"><a class=\"anchor\" href=\"#4-k-meansapi\">#</a> 4、K-meansAPI</h3>\n<ul>\n<li>sklearn.cluster.KMeans(n_clusters=8,init=‘k-means++’)\n<ul>\n<li>k-means 聚类</li>\n<li>n_clusters: 开始的聚类中心数量</li>\n<li>init: 初始化方法，默认为 'k-means ++’</li>\n<li>labels_: 默认标记的类型，可以和真实值比较（不是值比较）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-案例k-means对instacart-market用户聚类\"><a class=\"anchor\" href=\"#5-案例k-means对instacart-market用户聚类\">#</a> 5、 案例：k-means 对 Instacart Market 用户聚类</h3>\n<h4 id=\"51-分析\"><a class=\"anchor\" href=\"#51-分析\">#</a> 5.1 分析</h4>\n<ul>\n<li>1、降维之后的数据</li>\n<li>2、k-means 聚类</li>\n<li>3、聚类结果显示</li>\n</ul>\n<h4 id=\"52-代码\"><a class=\"anchor\" href=\"#52-代码\">#</a> 5.2 代码</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 取 500 个用户进行测试</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cust <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>km <span class=\"token operator\">=</span> KMeans<span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>km<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>cust<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pre <span class=\"token operator\">=</span> km<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>cust<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"问题如何去评估聚类的效果呢\"><a class=\"anchor\" href=\"#问题如何去评估聚类的效果呢\">#</a> 问题：如何去评估聚类的效果呢？</h4>\n<h3 id=\"6-kmeans性能评估指标\"><a class=\"anchor\" href=\"#6-kmeans性能评估指标\">#</a> 6、Kmeans 性能评估指标</h3>\n<h4 id=\"61-轮廓系数\"><a class=\"anchor\" href=\"#61-轮廓系数\">#</a> 6.1 轮廓系数</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211711780.png\" alt=\"轮廓系数公式\" /></p>\n<blockquote>\n<p>注：对于每个点 i 为已聚类数据中的样本 ，b_i 为 i 到其它族群的所有样本的距离最小值，a_i 为 i 到本身簇的距离平均值。最终计算出所有的样本点的轮廓系数平均值</p>\n</blockquote>\n<h4 id=\"62-轮廓系数值分析\"><a class=\"anchor\" href=\"#62-轮廓系数值分析\">#</a> 6.2 轮廓系数值分析</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/1910853272/image/img/202110211711297.png\" alt=\"img\" /></p>\n<ul>\n<li>分析过程（我们以一个蓝 1 点为例）\n<ul>\n<li>1、计算出蓝 1 离本身族群所有点的距离的平均值 a_i</li>\n<li>2、蓝 1 到其它两个族群的距离计算出平均值红平均，绿平均，取最小的那个距离作为 b_i</li>\n<li>根据公式：极端值考虑：如果 b_i &gt;&gt;a_i: 那么公式结果趋近于 1；如果 a_i&gt;&gt;&gt;b_i: 那么公式结果趋近于 - 1</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"63-结论\"><a class=\"anchor\" href=\"#63-结论\">#</a> 6.3 结论</h4>\n<p><strong>如果 b_i&gt;&gt;a_i: 趋近于 1 效果越好， b_i&lt;&lt;a_i: 趋近于 - 1，效果不好。轮廓系数的值是介于 [-1,1] ，越趋近于 1 代表内聚度和分离度都相对较优。</strong></p>\n<h4 id=\"64-轮廓系数api\"><a class=\"anchor\" href=\"#64-轮廓系数api\">#</a> 6.4 轮廓系数 API</h4>\n<ul>\n<li>sklearn.metrics.silhouette_score(X, labels)\n<ul>\n<li>计算所有样本的平均轮廓系数</li>\n<li>X：特征值</li>\n<li>labels：被聚类标记的目标值</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"65-用户聚类结果评估\"><a class=\"anchor\" href=\"#65-用户聚类结果评估\">#</a> 6.5 用户聚类结果评估</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>silhouette_score<span class=\"token punctuation\">(</span>cust<span class=\"token punctuation\">,</span> pre<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"7-k-means总结\"><a class=\"anchor\" href=\"#7-k-means总结\">#</a> 7、K-means 总结</h3>\n<ul>\n<li>特点分析：采用迭代式算法，直观易懂并且非常实用</li>\n<li>缺点：容易收敛到局部最优解 (多次聚类)</li>\n</ul>\n<blockquote>\n<p>注意：聚类一般做在分类之前</p>\n</blockquote>\n",
            "tags": [
                "机器学习",
                "机器学习"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/25/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Mac%20VScode%E5%BF%AB%E6%8D%B7%E9%94%AE/",
            "url": "https://zengshengli775.gitee.io/2021/08/25/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Mac%20VScode%E5%BF%AB%E6%8D%B7%E9%94%AE/",
            "title": "Mac VScode快捷键",
            "date_published": "2021-08-24T16:00:00.000Z",
            "content_html": "<h2 id=\"全局\"><a class=\"anchor\" href=\"#全局\">#</a> 全局</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + Shift + P &#x2F; F1 显示命令面板</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + P 快速打开</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + Shift + N 打开新窗口</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + W 关闭窗口</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + Option + Esc 强制退出软件</pre></td></tr></table></figure><h2 id=\"基本\"><a class=\"anchor\" href=\"#基本\">#</a> 基本</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + X 剪切（未选中文本的情况下，剪切光标所在行）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + C 复制（未选中文本的情况下，复制光标所在行）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Option + Up 向上移动行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Option + Down 向下移动行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Option + Shift + Up 向上复制行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Option + Shift + Down 向下复制行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + Shift + K 删除行</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + Enter 下一行插入</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + Shift + Enter 上一行插入</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Command + Shift + \\ 跳转到匹配的括号</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Command + [ 减少缩进</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + ] 增加缩进</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Home 跳转至行首</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>End 跳转到行尾</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Command + Up 跳转至文件开头</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Command + Down 跳转至文件结尾</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Ctrl + PgUp 按行向上滚动</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Ctrl + PgDown 按行向下滚动</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Command + PgUp 按屏向上滚动</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Command + PgDown 按屏向下滚动</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Command + Shift + [ 折叠代码块</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Command + Shift + ] 展开代码块</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Command + K Command + [ 折叠全部子代码块</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Command + K Command + ] 展开全部子代码块</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Command + K Command + 0 折叠全部代码块</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Command + K Command + J 展开全部代码块</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Command + K Command + C 添加行注释</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Command + K Command + U 移除行注释</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Command + &#x2F; 添加、移除行注释</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Option + Shift + A 添加、移除块注释</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Option + Z 自动换行、取消自动换行</pre></td></tr></table></figure><h2 id=\"多光标与选择\"><a class=\"anchor\" href=\"#多光标与选择\">#</a> 多光标与选择</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Option + 点击 插入多个光标</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + Option + Up 向上插入光标</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + Option + Down 向下插入光标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + U 撤销上一个光标操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Option + Shift + I 在所选行的行尾插入光标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + I 选中当前行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + Shift + L 选中所有与当前选中内容相同部分</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + F2 选中所有与当前选中单词相同的单词</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + Ctrl + Shift + Left 折叠选中</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Command + Ctrl + Shift + Right 展开选中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Alt + Shift + 拖动鼠标 选中代码块</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + Shift + Option + Up 列选择 向上</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Command + Shift + Option + Down 列选择 向下</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Command + Shift + Option + Left 列选择 向左</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Command + Shift + Option + Right 列选择 向右</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Command + Shift + Option + PgUp 列选择 向上翻页</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Command + Shift + Option + PgDown 列选择 向下翻页</pre></td></tr></table></figure><h2 id=\"查找替换\"><a class=\"anchor\" href=\"#查找替换\">#</a> 查找替换</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + F 查找</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + Option + F 替换</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + G 查找下一个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + Shift + G 查找上一个</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Option + Enter 选中所有匹配项</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + D 向下选中相同内容</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + K Command + D 移除前一个向下选中相同内容</pre></td></tr></table></figure><h2 id=\"进阶\"><a class=\"anchor\" href=\"#进阶\">#</a> 进阶</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Ctrl + Space 打开建议</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + Shift + Space 参数提示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Tab Emmet 插件缩写补全</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Option + Shift + F 格式化</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + K Command + F 格式化选中内容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>F12 跳转到声明位置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Option + F12 查看具体声明内容</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + K F12 分屏查看具体声明内容</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + . 快速修复</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Shift + F12 显示引用</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>F2 重命名符号</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + Shift + . 替换为上一个值</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Command + Shift + , 替换为下一个值</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Command + K Command + X 删除行尾多余空格</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Command + K M 更改文件语言</pre></td></tr></table></figure><h2 id=\"导航\"><a class=\"anchor\" href=\"#导航\">#</a> 导航</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + T 显示所有符号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Ctrl + G 跳转至某行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + P 跳转到某个文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + Shift + O 跳转到某个符号</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + Shift + M 打开问题面板</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>F8 下一个错误或警告位置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Shift + F8 上一个错误或警告位置</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Ctrl + Shift + Tab 编辑器历史记录</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Ctrl + - 后退</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Ctrl + Shift + - 前进</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Ctrl + Shift + M Tab 切换焦点</pre></td></tr></table></figure><h2 id=\"编辑器管理\"><a class=\"anchor\" href=\"#编辑器管理\">#</a> 编辑器管理</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + W 关闭编辑器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + K F 关闭文件夹</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + \\ 编辑器分屏</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + 1 切换到第一分组</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + 2 切换到第二分组</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + 3 切换到第三分组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + K Command + Left 切换到上一分组</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + K Command + Right 切换到下一分组</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + K Command + Shift + Left 左移编辑器</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Command + K Command + Shift + Right 右移编辑器</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Command + K Left 激活左侧编辑组</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + K Right 激活右侧编辑组</pre></td></tr></table></figure><h2 id=\"文件管理\"><a class=\"anchor\" href=\"#文件管理\">#</a> 文件管理</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + N 新建文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + O 打开文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + S 保存文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + Shift + S 另存为</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + Option + S 全部保存</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + W 关闭</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + K Command + W 全部关闭</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + Shift + T 重新打开被关闭的编辑器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + K Enter 保持打开</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Ctrl + Tab 打开下一个</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Ctrl + Shift + Tab 打开上一个</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + K P 复制当前文件路径</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Command + K R 在资源管理器中查看当前文件</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Command + K O 新窗口打开当前文件</pre></td></tr></table></figure><h2 id=\"显示\"><a class=\"anchor\" href=\"#显示\">#</a> 显示</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + Ctrl + F 全屏、退出全屏</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + Option + 1 切换编辑器分屏方式（横、竖）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + + 放大</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + - 缩小</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + B 显示、隐藏侧边栏</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + Shift + E 显示资源管理器 或 切换焦点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + Shift + F 显示搜索框</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Ctrl + Shift + G 显示 Git 面板</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + Shift + D 显示调试面板</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Command + Shift + X 显示插件面板</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Command + Shift + H 全局搜索替换</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + Shift + J 显示、隐藏高级搜索</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Command + Shift + C 打开新终端</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Command + Shift + U 显示输出面板</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Command + Shift + V Markdown 预览窗口</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Command + K V 分屏显示 Markdown 预览窗口</pre></td></tr></table></figure><h2 id=\"调试\"><a class=\"anchor\" href=\"#调试\">#</a> 调试</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>F9 设置 或 取消断点</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>F5 开始 或 继续</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>F11 进入</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Shift + F11 跳出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>F10 跳过</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + K Command + I 显示悬停信息</pre></td></tr></table></figure><h2 id=\"集成终端\"><a class=\"anchor\" href=\"#集成终端\">#</a> 集成终端</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Ctrl + &#96; 显示终端</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Ctrl + Shift + &#96; 新建终端</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + Up 向上滚动</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + Down 向下滚动</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PgUp 向上翻页</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PgDown 向下翻页</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + Home 滚动到顶部</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + End 滚动到底部</pre></td></tr></table></figure>",
            "tags": [
                "实用技巧",
                "Mac"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/25/%E7%A7%91%E7%A0%94/%E7%A7%91%E7%A0%94%E6%96%87%E7%8C%AE%E7%BD%91%E7%AB%99/",
            "url": "https://zengshengli775.gitee.io/2021/08/25/%E7%A7%91%E7%A0%94/%E7%A7%91%E7%A0%94%E6%96%87%E7%8C%AE%E7%BD%91%E7%AB%99/",
            "title": "科研文献网站",
            "date_published": "2021-08-24T16:00:00.000Z",
            "content_html": "<h2 id=\"科研文献网站\"><a class=\"anchor\" href=\"#科研文献网站\">#</a> 科研文献网站</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3RvcmthcHAubWUvP3JlZj05MzYxNy0xMQ==\">文献鸟 Stork，您忠实的科研助手，追踪新文献</span></p>\n",
            "tags": [
                "科研",
                "科研文献网站"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/23/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Chrome%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%AD%97%E5%B9%95/",
            "url": "https://zengshengli775.gitee.io/2021/08/23/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Chrome%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%AD%97%E5%B9%95/",
            "title": "Chrome在线视频自动生成字幕",
            "date_published": "2021-08-22T16:00:00.000Z",
            "content_html": "<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<p>安装 Chrome 浏览器正式版最新版本，在地址栏输入：</p>\n<p>chrome://flags/#enable-accessibility-live-captions</p>\n<p>然后把 Default 选项更改为 Enabled。</p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtqr2wnd36j60rt087q6s02.jpg\" alt=\"download.png\" /></p>\n<p>根据提示重启浏览器。</p>\n<p>再在浏览器的设置页面，点击高级 - 无障碍。</p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtqr2wl8jzj609x08rjrv02.jpg\" alt=\"download-1.png\" /></p>\n<p>接着勾选开启为您的媒体生成字幕这个选项。接着勾选开启为您的媒体生成字幕这个选项。</p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtqr2wnkfnj60mi04nt8o02.jpg\" alt=\"download.jpg\" /></p>\n<p>设置好以后，当你再次在网页里播放视频时，视频下方将会出现一个新的灰色工具栏，生成的字幕将会不断出现在灰色工具栏中。</p>\n",
            "tags": [
                "实用技巧",
                "字幕"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/14/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/",
            "url": "https://zengshengli775.gitee.io/2021/08/14/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/",
            "title": "考研流程记录",
            "date_published": "2021-08-13T16:00:00.000Z",
            "content_html": "<h2 id=\"考研资料\"><a class=\"anchor\" href=\"#考研资料\">#</a> 考研资料</h2>\n<h3 id=\"数学\"><a class=\"anchor\" href=\"#数学\">#</a> 数学</h3>\n<h4 id=\"高数\"><a class=\"anchor\" href=\"#高数\">#</a> 高数</h4>\n<h5 id=\"a高数基础\"><a class=\"anchor\" href=\"#a高数基础\">#</a> A. 高数基础</h5>\n<h6 id=\"1教材辅导\"><a class=\"anchor\" href=\"#1教材辅导\">#</a> 1. 教材辅导</h6>\n<p>《李永乐王式安复习全书》高数部分</p>\n<p>《汤家凤高等数学辅导讲义》+ 汤家凤基础班视频</p>\n<h6 id=\"2习题\"><a class=\"anchor\" href=\"#2习题\">#</a> 2. 习题</h6>\n<p>《李永乐王式安复习全书》高数部分例题</p>\n<h5 id=\"b高数强化\"><a class=\"anchor\" href=\"#b高数强化\">#</a> B. 高数强化</h5>\n<h6 id=\"1教材辅导-2\"><a class=\"anchor\" href=\"#1教材辅导-2\">#</a> 1. 教材辅导</h6>\n<p>《张宇高数 18 讲》+ 张宇强化班视频</p>\n<h6 id=\"2习题-2\"><a class=\"anchor\" href=\"#2习题-2\">#</a> 2. 习题</h6>\n<p>《张宇 1000 题》高数部分 + 刷题实战演练视频</p>\n<h4 id=\"线代\"><a class=\"anchor\" href=\"#线代\">#</a> 线代</h4>\n<h5 id=\"a线代基础\"><a class=\"anchor\" href=\"#a线代基础\">#</a> A. 线代基础</h5>\n<h6 id=\"1教材辅导-3\"><a class=\"anchor\" href=\"#1教材辅导-3\">#</a> 1. 教材辅导</h6>\n<p>《李永乐王式安复习全书》线代部分 + 李永乐基础班视频</p>\n<h6 id=\"2习题-3\"><a class=\"anchor\" href=\"#2习题-3\">#</a> 2. 习题</h6>\n<p>《李永乐王式安复习全书》线代部分例题</p>\n<h5 id=\"b线代强化\"><a class=\"anchor\" href=\"#b线代强化\">#</a> B. 线代强化</h5>\n<h6 id=\"1教材辅导-4\"><a class=\"anchor\" href=\"#1教材辅导-4\">#</a> 1. 教材辅导</h6>\n<p>《张宇线代 9 讲》</p>\n<p>《李永乐线代辅导讲义》+ 李永乐强化班视频</p>\n<h6 id=\"2习题-4\"><a class=\"anchor\" href=\"#2习题-4\">#</a> 2. 习题</h6>\n<p>《张宇 1000 题》线代部分 + 刷题实战演练视频</p>\n<h4 id=\"概率\"><a class=\"anchor\" href=\"#概率\">#</a> 概率</h4>\n<h5 id=\"a概率基础\"><a class=\"anchor\" href=\"#a概率基础\">#</a> A. 概率基础</h5>\n<h6 id=\"1教材辅导-5\"><a class=\"anchor\" href=\"#1教材辅导-5\">#</a> 1. 教材辅导</h6>\n<p>《李永乐王式安复习全书》概率部分 + 王式安基础班视频</p>\n<h6 id=\"2习题-5\"><a class=\"anchor\" href=\"#2习题-5\">#</a> 2. 习题</h6>\n<p>《李永乐王式安复习全书》概率部分例题</p>\n<h5 id=\"b概率强化\"><a class=\"anchor\" href=\"#b概率强化\">#</a> B. 概率强化</h5>\n<h6 id=\"1教材辅导-6\"><a class=\"anchor\" href=\"#1教材辅导-6\">#</a> 1. 教材辅导</h6>\n<p>《张宇概率 9 讲》</p>\n<p>《王式安概率辅导讲义》+ 王式安强化班视频</p>\n<h6 id=\"2习题-6\"><a class=\"anchor\" href=\"#2习题-6\">#</a> 2. 习题</h6>\n<p>《张宇 1000 题》概率部分 + 刷题实战演练视频</p>\n<h4 id=\"真题模拟题\"><a class=\"anchor\" href=\"#真题模拟题\">#</a> 真题模拟题</h4>\n<p>《张宇考研数学真题大全解》+ 真题精讲视频</p>\n<p>《张宇八套卷》+ 重要题目讲解视频</p>\n<h3 id=\"英语\"><a class=\"anchor\" href=\"#英语\">#</a> 英语</h3>\n<h4 id=\"1单词\"><a class=\"anchor\" href=\"#1单词\">#</a> 1. 单词</h4>\n<p>《恋练有词》</p>\n<h4 id=\"2长难句\"><a class=\"anchor\" href=\"#2长难句\">#</a> 2. 长难句</h4>\n<p>考研核心语法视频</p>\n<h4 id=\"3阅读\"><a class=\"anchor\" href=\"#3阅读\">#</a> 3. 阅读</h4>\n<p>唐迟《考研英语阅读的逻辑》+ 阅读逻辑视频</p>\n<h4 id=\"4写作\"><a class=\"anchor\" href=\"#4写作\">#</a> 4. 写作</h4>\n<p>王江涛《考研英语高分写作》+ 写作带背营视频 + 写作基础视频</p>\n<h4 id=\"5真题\"><a class=\"anchor\" href=\"#5真题\">#</a> 5. 真题</h4>\n<p>《张剑黄皮书历年考研》+ 阅读强化提升班视频</p>\n<h3 id=\"政治\"><a class=\"anchor\" href=\"#政治\">#</a> 政治</h3>\n<h4 id=\"1视频\"><a class=\"anchor\" href=\"#1视频\">#</a> 1. 视频</h4>\n<p>徐涛《核心考案》+ 强化班视频</p>\n<h4 id=\"2辅导书习题\"><a class=\"anchor\" href=\"#2辅导书习题\">#</a> 2. 辅导书 + 习题</h4>\n<p>肖秀荣《1000 题》</p>\n<p>肖秀荣《知识点精讲精练》</p>\n<p>肖秀荣《命题冲刺 8 套卷》必背大题</p>\n<p>肖秀荣《命题终极预测 4 套卷》必背大题</p>\n<h3 id=\"专业课408\"><a class=\"anchor\" href=\"#专业课408\">#</a> 专业课 408</h3>\n<h4 id=\"1教材辅导-7\"><a class=\"anchor\" href=\"#1教材辅导-7\">#</a> 1. 教材辅导</h4>\n<p>” 四本课本 “</p>\n<p>天勤《数据结构》+ 强化视频</p>\n<p>《王道数据结构》习题</p>\n<p>《王道计组》+ 强化视频</p>\n<p>《王道计网》+ 强化视频</p>\n<p>《王道操作系统》+ 强化视频</p>\n<h4 id=\"2真题\"><a class=\"anchor\" href=\"#2真题\">#</a> 2. 真题</h4>\n<p>王道《历年真题解析》+ 历年真题视频</p>\n<h4 id=\"3模拟题\"><a class=\"anchor\" href=\"#3模拟题\">#</a> 3. 模拟题</h4>\n<p>王道《模拟题》+ 模拟题视频</p>\n<h4 id=\"4机试\"><a class=\"anchor\" href=\"#4机试\">#</a> 4. 机试</h4>\n<p>《算法笔记》+PAT 甲级考试</p>\n<p>王道《机试指南》+ 复试机试视频</p>\n<h2 id=\"考研规划\"><a class=\"anchor\" href=\"#考研规划\">#</a> 考研规划</h2>\n<h3 id=\"数学-2\"><a class=\"anchor\" href=\"#数学-2\">#</a> 数学</h3>\n<h4 id=\"1基础阶段\"><a class=\"anchor\" href=\"#1基础阶段\">#</a> 1. 基础阶段</h4>\n<h5 id=\"1月-3月\"><a class=\"anchor\" href=\"#1月-3月\">#</a> 1 月 - 3 月</h5>\n<p>高数：《李永乐王式安复习全书》高数部分、《汤家凤高等数学辅导讲义》+ 汤家凤基础班视频</p>\n<h5 id=\"4月\"><a class=\"anchor\" href=\"#4月\">#</a> 4 月</h5>\n<p>线代：《李永乐王式安复习全书》线代部分 + 李永乐基础班视频</p>\n<h5 id=\"5月\"><a class=\"anchor\" href=\"#5月\">#</a> 5 月</h5>\n<p>概率论：《李永乐王式安复习全书》概率部分 + 王式安基础班视频</p>\n<h4 id=\"2强化阶段\"><a class=\"anchor\" href=\"#2强化阶段\">#</a> 2. 强化阶段</h4>\n<h5 id=\"7月-8月15日\"><a class=\"anchor\" href=\"#7月-8月15日\">#</a> 7 月 - 8 月 15 日</h5>\n<p>高数：《张宇高数 18 讲》+ 张宇强化班视频、《张宇 1000 题》高数部分例题</p>\n<h5 id=\"8月15日-9月10日\"><a class=\"anchor\" href=\"#8月15日-9月10日\">#</a> 8 月 15 日 - 9 月 10 日</h5>\n<p>线代：《张宇线代 9 讲》、《李永乐线代辅导讲义》+ 李永乐强化班视频、《张宇 1000 题》线代部分例题</p>\n<h5 id=\"9月10日-9月31日\"><a class=\"anchor\" href=\"#9月10日-9月31日\">#</a> 9 月 10 日 - 9 月 31 日</h5>\n<p>概率：《张宇概率 9 讲》、《王式安概率辅导讲义》+ 王式安强化班视频、《张宇 1000 题》概率部分例题</p>\n<h4 id=\"3冲刺阶段\"><a class=\"anchor\" href=\"#3冲刺阶段\">#</a> 3. 冲刺阶段</h4>\n<h5 id=\"10月-12月\"><a class=\"anchor\" href=\"#10月-12月\">#</a> 10 月 - 12 月</h5>\n<p>《张宇考研数学真题大全解》+ 真题精讲视频</p>\n<p>《张宇八套卷》+ 重要题目讲解视频</p>\n<h3 id=\"英语-2\"><a class=\"anchor\" href=\"#英语-2\">#</a> 英语</h3>\n<h4 id=\"1基础阶段-2\"><a class=\"anchor\" href=\"#1基础阶段-2\">#</a> 1. 基础阶段</h4>\n<h5 id=\"1月-2月\"><a class=\"anchor\" href=\"#1月-2月\">#</a> 1 月 - 2 月</h5>\n<p>单词：集中背单词，以后每天循环背</p>\n<h5 id=\"3月-5月\"><a class=\"anchor\" href=\"#3月-5月\">#</a> 3 月 - 5 月</h5>\n<p>单词：每天循环背</p>\n<p>长难句：考研核心语法视频</p>\n<p>阅读：唐迟《考研英语阅读的逻辑》+ 阅读逻辑视频</p>\n<p>写作：王江涛《考研英语高分写作》+ 写作带背营视频 + 写作基础视频</p>\n<h4 id=\"2强化阶段-2\"><a class=\"anchor\" href=\"#2强化阶段-2\">#</a> 2. 强化阶段</h4>\n<h5 id=\"7月-10月\"><a class=\"anchor\" href=\"#7月-10月\">#</a> 7 月 - 10 月</h5>\n<p>单词：每天循环背</p>\n<p>真题：《张剑黄皮书历年考研》+ 阅读强化提升班视频</p>\n<h4 id=\"3冲刺阶段-2\"><a class=\"anchor\" href=\"#3冲刺阶段-2\">#</a> 3. 冲刺阶段</h4>\n<h5 id=\"11月-12月\"><a class=\"anchor\" href=\"#11月-12月\">#</a> 11 月 - 12 月</h5>\n<p>单词：每天循环背</p>\n<p>真题：隔一天做一次模拟考</p>\n<p>作文：背作文</p>\n<p>准备新题型、翻译、完型填空。</p>\n<h3 id=\"政治-2\"><a class=\"anchor\" href=\"#政治-2\">#</a> 政治</h3>\n<h4 id=\"1基础阶段-3\"><a class=\"anchor\" href=\"#1基础阶段-3\">#</a> 1. 基础阶段</h4>\n<h5 id=\"8月-9月\"><a class=\"anchor\" href=\"#8月-9月\">#</a> 8 月 - 9 月</h5>\n<p>视频：徐涛《核心考案》+ 强化班视频</p>\n<p>选择题：肖秀荣《1000 题》、肖秀荣《知识点精讲精练》</p>\n<h4 id=\"2强化阶段-3\"><a class=\"anchor\" href=\"#2强化阶段-3\">#</a> 2. 强化阶段</h4>\n<h5 id=\"10月-11月\"><a class=\"anchor\" href=\"#10月-11月\">#</a> 10 月 - 11 月</h5>\n<p>选择题：二刷肖秀荣《1000 题》</p>\n<p>模拟题：肖秀荣《命题冲刺 8 套卷》，背大题</p>\n<h4 id=\"3冲刺阶段-3\"><a class=\"anchor\" href=\"#3冲刺阶段-3\">#</a> 3. 冲刺阶段</h4>\n<h5 id=\"12月\"><a class=\"anchor\" href=\"#12月\">#</a> 12 月</h5>\n<p>模拟题：肖秀荣《命题终极预测 4 套卷》，<strong>肖 4 最重要，大题都要背</strong>，每年肖四都能押中好几道简答题，非常良心，无数经验推荐，考前必背。</p>\n<h3 id=\"专业课408-2\"><a class=\"anchor\" href=\"#专业课408-2\">#</a> 专业课 408</h3>\n<h4 id=\"1基础阶段-4\"><a class=\"anchor\" href=\"#1基础阶段-4\">#</a> 1. 基础阶段</h4>\n<h5 id=\"1月\"><a class=\"anchor\" href=\"#1月\">#</a> 1 月</h5>\n<p>数据结构：天勤《数据结构》+ 强化视频、《王道数据结构》选择题</p>\n<h5 id=\"2月-3月15\"><a class=\"anchor\" href=\"#2月-3月15\">#</a> 2 月 - 3 月 15</h5>\n<p>《算法笔记》+PAT 甲级考试</p>\n<h5 id=\"3月\"><a class=\"anchor\" href=\"#3月\">#</a> 3 月</h5>\n<p>《王道计组》选择题 + 强化视频</p>\n<h5 id=\"4月-2\"><a class=\"anchor\" href=\"#4月-2\">#</a> 4 月</h5>\n<p>《王道计网》选择题 + 强化视频</p>\n<h5 id=\"5月-2\"><a class=\"anchor\" href=\"#5月-2\">#</a> 5 月</h5>\n<p>《王道操作系统》选择题 + 强化视频</p>\n<h4 id=\"2强化阶段-4\"><a class=\"anchor\" href=\"#2强化阶段-4\">#</a> 2. 强化阶段</h4>\n<h5 id=\"7月-8月\"><a class=\"anchor\" href=\"#7月-8月\">#</a> 7 月 - 8 月</h5>\n<p>二刷《王道数据结构》、《王道计组》、《王道计网》、《王道操作系统》选择题和大题</p>\n<p>全面复习知识点及第一轮复习遗留下来的难点</p>\n<h5 id=\"9月\"><a class=\"anchor\" href=\"#9月\">#</a> 9 月</h5>\n<p>参照天勤《数据结构》、《计组》、《计网》、《操作系统》整理出一份自己的重要知识点汇总及易混知识点对比，快速的把天勤复习全书上的题刷完。</p>\n<h4 id=\"3冲刺阶段-4\"><a class=\"anchor\" href=\"#3冲刺阶段-4\">#</a> 3. 冲刺阶段</h4>\n<h5 id=\"10月-11月-2\"><a class=\"anchor\" href=\"#10月-11月-2\">#</a> 10 月 - 11 月</h5>\n<p>王道《历年真题解析》+ 历年真题视频</p>\n<p>重刷王道错题</p>\n<h5 id=\"12月-2\"><a class=\"anchor\" href=\"#12月-2\">#</a> 12 月</h5>\n<p>王道《模拟题》+ 模拟题视频</p>\n",
            "tags": [
                "考研",
                "考研资料",
                "考研规划"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/13/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Macbookpro%E6%81%A2%E5%A4%8D%E5%A4%B1%E7%81%B5%E7%9A%84Type-c%E6%8E%A5%E5%8F%A3/",
            "url": "https://zengshengli775.gitee.io/2021/08/13/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Macbookpro%E6%81%A2%E5%A4%8D%E5%A4%B1%E7%81%B5%E7%9A%84Type-c%E6%8E%A5%E5%8F%A3/",
            "title": "Macbookpro恢复失灵的Type-c接口",
            "date_published": "2021-08-12T16:00:00.000Z",
            "content_html": "<p>最近 Macbook Pro 的一个 Type-c 接口失灵了，从网上找到一个方法解决了。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 关机</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2. 按下键盘右侧的 Shift 键，左侧的 Control 和 Option 键不放。此时电脑会开机，等进入显示白 \t 条的状态，不要松开手，同时按下电源按钮 10 秒钟。此时电脑将关闭。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>3. 松开所有按键</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>4. 等待 10 秒钟，重新启动电脑</pre></td></tr></table></figure><p>只试过用 <code>右侧的Shift+Control+Option</code> ，没有试过用 <code>左侧的Shift+Control+Option</code> ，据说不能成功</p>\n",
            "tags": [
                "实用技巧",
                "Mac"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/12/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://zengshengli775.gitee.io/2021/08/12/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "Python基础知识",
            "date_published": "2021-08-11T16:00:00.000Z",
            "content_html": "<h2 id=\"标识符\"><a class=\"anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>字母、下划线、数字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>区分大小写</pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre>string<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 首字母大写</pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre><span class=\"token string\">\"srring1\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"string2\"</span> 字符串拼接</pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tPython\"</span><span class=\"token punctuation\">)</span> \\t为Table键</pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\\nPython\"</span><span class=\"token punctuation\">)</span> \\n为换行符</pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span>为以<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>为间隔</pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre>string<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 删除字符串两边的空白</pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre>\t<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre>\tseq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 字符串序列</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">print</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span> seq <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre>\t以上实例输出结果如下：</pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>\ta<span class=\"token operator\">-</span>b<span class=\"token operator\">-</span>c</pre></td></tr><tr class=\"marked\"><td data-num=\"14\"></td><td><pre>string<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0:.2f&#125; &#123;1:.2f&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"16\"></td><td><pre>\t<span class=\"token number\">0</span>和<span class=\"token number\">1</span>表示<span class=\"token builtin\">format</span>函数中第一个和第二个参数</pre></td></tr><tr class=\"marked\"><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token number\">2f</span>表示小数部分保留两位</pre></td></tr></table></figure><h2 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:.2f&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> 输出y为两位小数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>gap<span class=\"token punctuation\">)</span> 生成随机数，从start开始，end结束，以gap为间隔</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lower<span class=\"token punctuation\">,</span>upper <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 输入多个值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> x的y次方</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> x的平方根</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pi 圆周率</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e 自然常数</pre></td></tr></table></figure><h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>序列从<span class=\"token number\">0</span>开始</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 将元素添加到列表末尾</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>索引，值<span class=\"token punctuation\">)</span> 将元素添加到列表任意位置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">del</span> string<span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> 删除列表中元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>索引<span class=\"token punctuation\">)</span> 删除列表元素（默认是末尾）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 列表推导式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>值<span class=\"token punctuation\">)</span> 删除列表值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 列表永久排序 reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>为与字母顺序相反的顺序排序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 列表临时排序</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 反转列表顺序</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 确定列表长度</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Test2<span class=\"token operator\">=</span>Test1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> 复制列表</pre></td></tr></table></figure><h2 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tup<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Google<span class=\"token string\">', '</span>Runoo<span class=\"token string\">b', '</span>Taobao<span class=\"token string\">', '</span>Wiki<span class=\"token string\">', '</span>Weibo<span class=\"token string\">','</span>Weixin'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> tup 删除元组</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tup3 <span class=\"token operator\">=</span> tup1 <span class=\"token operator\">+</span> tup2 元组不能修改、删除元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tup<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 创建集合</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">&#125;</span> 集合是无序的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span> 添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span> 移除元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span> 移除集合中的元素，且如果元素不存在，不会发生错误</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 随机删除集合中的一个元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> 计算集合 s 元素个数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 清空集合</pre></td></tr></table></figure><h2 id=\"字典\"><a class=\"anchor\" href=\"#字典\">#</a> 字典</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'First'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> 访问字典里的值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span> 修改字典</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">del</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">]</span> 删除键 <span class=\"token string\">'Name'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 清空字典</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">del</span> <span class=\"token builtin\">dict</span> 删除字典</pre></td></tr></table></figure><h2 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>迭代器有两个基本的方法：<span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 和 <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> it <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 创建迭代器对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出迭代器的下一个元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 与 __next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyNumbers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tx <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>a</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tself<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">raise</span> StopIteration <span class=\"token comment\">#StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况\t</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>myclass <span class=\"token operator\">=</span> MyNumbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>myiter <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>myclass<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> myiter<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<h2 id=\"生成器\"><a class=\"anchor\" href=\"#生成器\">#</a> 生成器</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在 Python 中，使用了 <span class=\"token keyword\">yield</span> 的函数被称为生成器（generator）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>使用 <span class=\"token keyword\">yield</span> 实现斐波那契数列</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 生成器函数 - 斐波那契</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ta<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">yield</span> a</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\ta<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcounter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>f <span class=\"token operator\">=</span> fibonacci<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># f 是一个迭代器，由生成器返回生成</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tsys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python 使用 <span class=\"token keyword\">lambda</span> 来创建匿名函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 可写函数说明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> arg1 <span class=\"token operator\">+</span> arg2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 调用 sum 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"相加后的值为 : \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"相加后的值为 : \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>不定长参数 <span class=\"token operator\">*</span></pre></td></tr></table></figure><h2 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token operator\">=</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Python.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span> 以文本方式打开文件<span class=\"token punctuation\">(</span>第一个字母r表示操作，第二个字母t表示文件类型<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 关闭文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 读取整行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> 将字符串写入文件，返回的是写入的字符长度</pre></td></tr></table></figure><h2 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">##plotly 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 创建 data frame</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>df <span class=\"token operator\">=</span> timesData<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># import graph objects as \"go\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> plotly<span class=\"token punctuation\">.</span>graph_objs <span class=\"token keyword\">as</span> go</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 设置第一条折线 trace1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># go.Scatter 可以创建一个散点图或者折线图的对象，我们将其命名为 trace1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>trace1 <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span>Scatter<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    x <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>world_rank<span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 定义坐标轴的映射关系，将 world_rank 这一列作为 x 轴</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    y <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>citations<span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 同理，将 citations 这一列作为 y 轴</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"lines\"</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 我们要绘制折线图，所以将 mode 设置为 “lines”</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    name <span class=\"token operator\">=</span> <span class=\"token string\">\"citations\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 将这条折线命名为 citations</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    marker <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(16, 112, 2, 0.8)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\"># maker 用来定义点的性质，如颜色、大小等</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    text<span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>university_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\"># 将 university_name 一列设置为悬停文本（鼠标悬停在图片上方显示的内容）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 设置第二条折线 trace2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>trace2 <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span>Scatter<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    x <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>world_rank<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    y <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>teaching<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"lines+markers\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">#绘制的折线图由散点连接而成，即 lines+markers</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    name <span class=\"token operator\">=</span> <span class=\"token string\">\"teaching\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    marker <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(80, 26, 80, 0.8)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    text<span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>university_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>trace1<span class=\"token punctuation\">,</span> trace2<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 添加图层 layout</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>layout <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'Citation and Teaching vs World Rank of Top 100 Universities'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token comment\"># 设置图像的标题</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              xaxis<span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span> <span class=\"token string\">'World Rank'</span><span class=\"token punctuation\">,</span>ticklen<span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>zeroline<span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              <span class=\"token comment\"># 设置 x 轴名称，x 轴刻度线的长度，不显示零线</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 将 data 与 layout 组合为一个图像</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>fig <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">,</span> layout <span class=\"token operator\">=</span> layout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># 绘制图像</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>iplot<span class=\"token punctuation\">(</span>fig<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<h2 id=\"类和对象\"><a class=\"anchor\" href=\"#类和对象\">#</a> 类和对象</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#创建类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token string\">'类的帮助信息'</span>   <span class=\"token comment\">#类文档字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   class_suite  <span class=\"token comment\">#类体，class_suite 由类成员，方法，数据属性组成。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#创建实例对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token string\">'所有员工的基类'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   empCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#构造方法，用于创建对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token comment\">#定义成员变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      self<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      Employee<span class=\"token punctuation\">.</span>empCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">def</span> <span class=\"token function\">displayCount</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Employee %d\"</span> <span class=\"token operator\">%</span> Employee<span class=\"token punctuation\">.</span>empCount</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">def</span> <span class=\"token function\">displayEmployee</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">print</span> <span class=\"token string\">\"Name : \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>  <span class=\"token string\">\", Salary: \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>salary</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token string\">\"创建 Employee 类的第一个对象\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>emp1 <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Zara\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token string\">\"创建 Employee 类的第二个对象\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>emp2 <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Manni\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>emp1<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>emp2<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Employee %d\"</span> <span class=\"token operator\">%</span> Employee<span class=\"token punctuation\">.</span>empCount</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#访问属性</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">## 您可以使用点号。来访问对象的属性 对象名。成员名</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>emp1<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>emp2<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Employee %d\"</span> <span class=\"token operator\">%</span> Employee<span class=\"token punctuation\">.</span>empCount</pre></td></tr></table></figure>",
            "tags": [
                "编程基础",
                "Python"
            ]
        }
    ]
}